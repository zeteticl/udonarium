/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $range = Opal.range, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$===', '$check_lostroyal', '$to_i', '$last_match', '$roll_fumble_chart', '$roll_wind_power_chart', '$roll_emotion_chart', '$roll_hope', '$each', '$roll', '$<<', '$to_a', '$map', '$[]', '$-', '$inject', '$find_sequence', '$join', '$nil?', '$empty?', '$fumble?', '$size', '$+', '$>=', '$sort', '$find_sequence_from_start_key', '$max', '$select', '$>', '$<=>', '$include?', '$!', '$==', '$unshift', '$count', '$loop', '$min', '$!=', '$is_1or2']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'LostRoyal');

    var $nesting = [self].concat($parent_nesting), $LostRoyal_initialize$1, $LostRoyal_rollDiceCommand$2, $LostRoyal_check_lostroyal$3, $LostRoyal_find_sequence$6, $LostRoyal_find_sequence_from_start_key$10, $LostRoyal_fumble$ques$11, $LostRoyal_roll_fumble_chart$13, $LostRoyal_roll_wind_power_chart$14, $LostRoyal_roll_emotion_chart$16, $LostRoyal_roll_hope$17, $LostRoyal_is_1or2$19;

    
    Opal.const_set($nesting[0], 'ID', "LostRoyal");
    Opal.const_set($nesting[0], 'NAME', "\u30ED\u30B9\u30C8\u30ED\u30A4\u30E4\u30EB");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u308D\u3059\u3068\u308D\u3044\u3084\u308B");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u30FBD66\u30C0\u30A4\u30B9\u3042\u308A\n" + "\n" + "\u884C\u70BA\u5224\u5B9A\n" + "\u3000LR[x,x,x,x,x,x]\n" + "\u3000\u3000x \u306E\u4E26\u3073\u306B\u306F\u3010\u5224\u5B9A\u8868\u3011\u306E\u6570\u5024\u3092\u9806\u756A\u306B\u5165\u529B\u3059\u308B\u3002\n" + "\u3000\u3000\uFF08\u4F8B\uFF1A LR[1,3,0,1,2] \uFF09\n" + "\n" + "\u30D5\u30A1\u30F3\u30D6\u30EB\u8868\n" + "\u3000FC\n" + "\n" + "\u98A8\u529B\u6C7A\u5B9A\u8868\n" + "\u3000WPC\n" + "\n" + "\u611F\u60C5\u6C7A\u5B9A\u8868\n" + "\u3000EC\n" + "\n" + "\u5E0C\u671B\u70B9\u306E\u6C7A\u5B9A\n" + "\u3000HRx\n" + "\u3000\u3000x \u306B\u306F\u30C0\u30A4\u30B9\u306E\u6570\uFF08 1 - 2 \uFF09\u3092\u6307\u5B9A\n");
    self.$setPrefixes(["LR\\[[0-5],[0-5],[0-5],[0-5],[0-5],[0-5]\\]", "FC", "WPC", "EC", "HR[1-2]"]);
    
    Opal.def(self, '$initialize', $LostRoyal_initialize$1 = function $$initialize() {
      var $iter = $LostRoyal_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $LostRoyal_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $LostRoyal_initialize$1, false), $zuper, $iter);
      self.sendMode = 2;
      self.sortType = 1;
      return (self.d66Type = 1);
    }, $LostRoyal_initialize$1.$$arity = 0);
    
<<<<<<< HEAD
    Opal.defn(self, '$gameName', TMP_LostRoyal_gameName_2 = function $$gameName() {
      var self = this;

      return "ロストロイヤル"
    }, TMP_LostRoyal_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_LostRoyal_gameType_3 = function $$gameType() {
      var self = this;

      return "LostRoyal"
    }, TMP_LostRoyal_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_LostRoyal_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "・D66骰子あり\n" + "\n" + "行為判定\n" + "　LR[x,x,x,x,x,x]\n" + "　　x の並びには【判定表】の数値を順番に入力する。\n" + "　　（例： LR[1,3,0,1,2] ）\n" + "\n" + "ファンブル表\n" + "　FC\n" + "\n" + "風力決定表\n" + "　WPC\n" + "\n" + "感情決定表\n" + "　EC\n" + "\n" + "希望点の決定\n" + "　HRx\n" + "　　x には骰子の数（ 1 - 2 ）を指定\n"
    }, TMP_LostRoyal_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$rollDiceCommand', TMP_LostRoyal_rollDiceCommand_5 = function $$rollDiceCommand(command) {
=======
    Opal.def(self, '$rollDiceCommand', $LostRoyal_rollDiceCommand$2 = function $$rollDiceCommand(command) {
>>>>>>> 0dfe93a1d368ac1ad3ef24167156b31a70848848
      var self = this, $case = nil;

      
      $case = command;
      if (/LR\[([0-5]),([0-5]),([0-5]),([0-5]),([0-5]),([0-5])\]/i['$===']($case)) {return self.$check_lostroyal([$$($nesting, 'Regexp').$last_match(1).$to_i(), $$($nesting, 'Regexp').$last_match(2).$to_i(), $$($nesting, 'Regexp').$last_match(3).$to_i(), $$($nesting, 'Regexp').$last_match(4).$to_i(), $$($nesting, 'Regexp').$last_match(5).$to_i(), $$($nesting, 'Regexp').$last_match(6).$to_i()])}
      else if (/FC/['$===']($case)) {return self.$roll_fumble_chart()}
      else if (/WPC/['$===']($case)) {return self.$roll_wind_power_chart()}
      else if (/EC/['$===']($case)) {return self.$roll_emotion_chart()}
      else if (/HR([1-2])/['$===']($case)) {return self.$roll_hope($$($nesting, 'Regexp').$last_match(1).$to_i())};
      return nil;
    }, $LostRoyal_rollDiceCommand$2.$$arity = 1);
    
    Opal.def(self, '$check_lostroyal', $LostRoyal_check_lostroyal$3 = function $$check_lostroyal(checking_table) {
      var $$4, $$5, $a, self = this, keys = nil, scores = nil, total_score = nil, chained_sequence = nil, text = nil, bonus = nil;

      
      keys = [];
      $send($range(0, 3, true), 'each', [], ($$4 = function(_i){var self = $$4.$$s || this, $a, $b, key = nil;

      
        
        if (_i == null) {
          _i = nil;
        };
        $b = self.$roll(1, 6), $a = Opal.to_ary($b), (key = ($a[0] == null ? nil : $a[0])), $b;
        return keys['$<<'](key);}, $$4.$$s = self, $$4.$$arity = 1, $$4));
      scores = $send(keys, 'map', [], ($$5 = function(k){var self = $$5.$$s || this;

      
        
        if (k == null) {
          k = nil;
        };
        return checking_table['$[]']($rb_minus(k, 1));}, $$5.$$s = self, $$5.$$arity = 1, $$5)).$to_a();
      total_score = scores.$inject("+");
      chained_sequence = self.$find_sequence(keys);
      text = "" + "3D6 => [" + (keys.$join(",")) + "] => (" + (scores.$join("+")) + ") => " + (total_score);
      if ($truthy(($truthy($a = chained_sequence['$nil?']()) ? $a : chained_sequence['$empty?']()))) {
      } else {
        
        bonus = (function() {if ($truthy(self['$fumble?'](keys, chained_sequence))) {
          return 3
        } else {
          return chained_sequence.$size()
        }; return nil; })();
        text = $rb_plus(text, "" + " | " + (chained_sequence.$size()) + " chain! (" + (chained_sequence.$join(",")) + ") => " + ($rb_plus(total_score, bonus)));
        if ($truthy($rb_ge(chained_sequence.$size(), 3))) {
          text = $rb_plus(text, " [\u30B9\u30DA\u30B7\u30E3\u30EB]")};
        if ($truthy(self['$fumble?'](keys, chained_sequence))) {
          text = $rb_plus(text, " [\u30D5\u30A1\u30F3\u30D6\u30EB]")};
      };
      return text;
    }, $LostRoyal_check_lostroyal$3.$$arity = 1);
    
    Opal.def(self, '$find_sequence', $LostRoyal_find_sequence$6 = function $$find_sequence(keys) {
      var $$7, $$8, $$9, self = this, sequences = nil, sequence = nil;

      
      keys = keys.$sort();
      sequences = $send($range(1, 6, true), 'map', [], ($$7 = function(start_key){var self = $$7.$$s || this;

      
        
        if (start_key == null) {
          start_key = nil;
        };
        return self.$find_sequence_from_start_key(keys, start_key);}, $$7.$$s = self, $$7.$$arity = 1, $$7));
      sequence = $send($send(sequences, 'select', [], ($$8 = function(x){var self = $$8.$$s || this;

      
        
        if (x == null) {
          x = nil;
        };
        return $rb_gt(x.$size(), 1);}, $$8.$$s = self, $$8.$$arity = 1, $$8)), 'max', [], ($$9 = function(a, b){var self = $$9.$$s || this;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return a.$size()['$<=>'](b.$size());}, $$9.$$s = self, $$9.$$arity = 2, $$9));
      return sequence;
    }, $LostRoyal_find_sequence$6.$$arity = 1);
    
    Opal.def(self, '$find_sequence_from_start_key', $LostRoyal_find_sequence_from_start_key$10 = function $$find_sequence_from_start_key(keys, start_key) {
      var $a, self = this, chained_keys = nil, key = nil;

      
      chained_keys = [];
      key = start_key;
      while ($truthy(keys['$include?'](key))) {
        
        chained_keys['$<<'](key);
        key = $rb_plus(key, 1);
      };
      if ($truthy(($truthy($a = chained_keys['$empty?']()['$!']()) ? chained_keys['$[]'](0)['$=='](1) : $a))) {
        
        key = 6;
        while ($truthy(keys['$include?'](key))) {
          
          chained_keys.$unshift(key);
          key = $rb_minus(key, 1);
        };};
      return chained_keys;
    }, $LostRoyal_find_sequence_from_start_key$10.$$arity = 2);
    
    Opal.def(self, '$fumble?', $LostRoyal_fumble$ques$11 = function(keys, chained_sequence) {try {

      var $$12, self = this;

      
      $send(chained_sequence, 'each', [], ($$12 = function(k){var self = $$12.$$s || this;

      
        
        if (k == null) {
          k = nil;
        };
        if ($truthy($rb_ge(keys.$count(k), 2))) {
          Opal.ret(true)
        } else {
          return nil
        };}, $$12.$$s = self, $$12.$$arity = 1, $$12));
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $LostRoyal_fumble$ques$11.$$arity = 2);
    
    Opal.def(self, '$roll_fumble_chart', $LostRoyal_roll_fumble_chart$13 = function $$roll_fumble_chart() {
      var $a, $b, self = this, key = nil, text = nil;

      
      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (key = ($a[0] == null ? nil : $a[0])), $b;
      text = ["\u4F55\u304B\u306E\u554F\u984C\u3067\u8A00\u3044\u4E89\u3044\u3001\u4E3B\u541B\u306B\u7121\u793C\u3092\u50CD\u3044\u3066\u3057\u307E\u3046\u3002\u3042\u306A\u305F\u306F\u4E3B\u541B\u306E\u540D\u8A89\u70B9\u3092\uFF11\u70B9\u5931\u3046\u304B\u3001\u3010\u6642\u9593\u3011\u3092\uFF11\u70B9\u6D88\u8CBB\u3057\u3066\u548C\u89E3\u306E\u8A71\u3057\u5408\u3044\u3092\u6301\u3064\u304B\u9078\u3079\u308B\u3002", "\u898B\u904E\u3054\u305B\u3070\u4EBA\u3005\u3092\u4E0D\u5E78\u306B\u3059\u308B\u5371\u967A\u306B\u906D\u9047\u3059\u308B\u3002\u3042\u306A\u305F\u306F\u9003\u3052\u51FA\u3057\u3066\u5192\u967A\u306E\u540D\u8A89\u70B9\u3092\uFF11\u70B9\u5931\u3046\u304B\u3001\u3053\u308C\u306B\u7ACB\u3061\u5411\u304B\u3044\u3010\u547D\u6570\u3011\u3092\uFF12\u70B9\u6E1B\u3089\u3059\u304B\u3092\u9078\u3079\u308B\u3002", "\u3042\u306A\u305F\u304C\u60F9\u304B\u308C\u305F\u306E\u306F\u597D\u610F\u306B\u4ED8\u3051\u8FBC\u3080\u4EBA\u3060\u3063\u305F\u3002\u3042\u306A\u305F\u306F\u305D\u306E\u5834\u3092\u53BB\u3063\u3066\u604B\u6155\u306E\u540D\u8A89\u70B9\u3092\uFF11\u70B9\u5931\u3046\u304B\u3010\u6B63\u7FA9\u3011\u3092\uFF11\u70B9\u6E1B\u3089\u3057\u3066\u793C\u3092\u5C3D\u304F\u3059\u304B\u3092\u9078\u3079\u308B\u3002", "\u91D1\u92AD\u7684\u306A\u554F\u984C\u3067\u3001\u751F\u547D\u3068\u9B42\u306E\u82E6\u3057\u307F\u3092\u80CC\u8CA0\u3046\u4EBA\u306B\u51FA\u4F1A\u3046\u3002\u3042\u306A\u305F\u306F\u5E87\u8B77\u306E\u540D\u8A89\u70B9\u3092\uFF11\u70B9\u5931\u3046\u304B\u51FA\u8CBB\u3092\uFF13\u70B9\u5897\u3084\u3059\u304B\u3092\u9078\u3079\u308B\u3002", "\u8972\u6483\u3092\u53D7\u3051\u308B\u3002\u82E6\u3082\u306A\u304F\u53E9\u304D\u4F0F\u305B\u308B\u3068\u3001\u5351\u5C48\u306A\u614B\u5EA6\u3067\u547D\u4E5E\u3044\u3092\u3057\u3066\u304D\u305F\u3002\u5BB9\u8D66\u306A\u304F\u547D\u3092\u596A\u3044\u5BDB\u5BB9\u306E\u540D\u8A89\u70B9\u3092\uFF11\u70B9\u5931\u3046\u304B\u3001\u5BC6\u544A\u306B\u3088\u3063\u3066\u3010\u8840\u8DEF\u3011\u304C\uFF11\uFF24\uFF16\u70B9\u5897\u3048\u308B\u304B\u3092\u9078\u3076\u3053\u3068\u304C\u3067\u304D\u308B\u3002", "\u98A8\u805E\u306B\u3088\u308A\u3001\u53CB\u304C\u60AA\u306B\u8EAB\u3092\u8CB6\u3081\u305F\u3068\u77E5\u308B\u3002\u5171\u306B\u4E26\u3093\u3060\u6226\u5834\u304C\u8272\u892A\u305B\u308B\u60F3\u3044\u3060\u3002\u6226\u53CB\u306E\u540D\u8A89\u70B9\u3092\uFF11\u70B9\u6E1B\u3089\u3059\u304B\u3001\u3010\u9152\u3068\u6B4C\u3011\u3059\u3079\u3066\u3092\u5931\u3046\u304B\u3092\u9078\u3079\u308B\u3002"]['$[]']($rb_minus(key, 1));
      return "" + "1D6 => [" + (key) + "] " + (text);
    }, $LostRoyal_roll_fumble_chart$13.$$arity = 0);
    
    Opal.def(self, '$roll_wind_power_chart', $LostRoyal_roll_wind_power_chart$14 = function $$roll_wind_power_chart() {try {

      var $$15, self = this, key = nil, total_bonus = nil, text = nil;

      
      key = 0;
      total_bonus = 0;
      text = "";
      return $send(self, 'loop', [], ($$15 = function(){var self = $$15.$$s || this, $a, $b, dice = nil, add = nil, bonus = nil, current_text = nil;

      
        $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), $b;
        key = $rb_plus(key, dice);
        $b = [[true, 0, "\u307B\u307C\u51EA\uFF08\u632F\u308A\u8DB3\u3057\uFF09"], [true, 0, "\u5F31\u3044\u98A8\uFF08\u632F\u308A\u8DB3\u3057\uFF09"], [false, 0, "\u3086\u308B\u3084\u304B\u306A\u98A8"], [false, 0, "\u3086\u308B\u3084\u304B\u306A\u98A8"], [false, 1, "\u3084\u3084\u5F37\u3044\u98A8\uFF08\u5100\u5F0F\u70B9\u30D7\u30E9\u30B9\uFF11\uFF09"], [false, 2, "\u5F37\u3044\u98A8\uFF08\u9F8D\u3092\u5E7B\u8996\u3001\u5100\u5F0F\u70B9\u30D7\u30E9\u30B9\uFF12\uFF09"], [false, 3, "\u4F53\u304C\u63FA\u3089\u3050\u307B\u3069\u306E\u98A8\uFF08\u9F8D\u3092\u5E7B\u8996\u3001\u5100\u5F0F\u70B9\u30D7\u30E9\u30B9\uFF13\uFF09"]]['$[]']($rb_minus([key, 7].$min(), 1)), $a = Opal.to_ary($b), (add = ($a[0] == null ? nil : $a[0])), (bonus = ($a[1] == null ? nil : $a[1])), (current_text = ($a[2] == null ? nil : $a[2])), $b;
        total_bonus = $rb_plus(total_bonus, bonus);
        if ($truthy(key['$!='](dice))) {
          current_text = "" + "1D6[" + (dice) + "]+" + ($rb_minus(key, dice)) + " " + (current_text)
        } else {
          current_text = "" + "1D6[" + (dice) + "] " + (current_text)
        };
        if ($truthy(text['$empty?']())) {
          text = current_text
        } else {
          text = "" + (text) + " => " + (current_text)
        };
        if ($truthy(add)) {
          return nil
        } else {
          
          text = $rb_plus(text, "" + " [\u5408\u8A08\uFF1A\u5100\u5F0F\u70B9 +" + (total_bonus) + " ]");
          Opal.ret(text);
        };}, $$15.$$s = self, $$15.$$arity = 0, $$15));
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $LostRoyal_roll_wind_power_chart$14.$$arity = 0);
    
    Opal.def(self, '$roll_emotion_chart', $LostRoyal_roll_emotion_chart$16 = function $$roll_emotion_chart() {
      var $a, $b, self = this, key = nil, text = nil;

      
      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (key = ($a[0] == null ? nil : $a[0])), $b;
      text = ["\u611B\u60C5\uFF0F\u6BBA\u610F", "\u53CB\u60C5\uFF0F\u8CA0\u76EE", "\u5D07\u62DD\uFF0F\u5ACC\u60AA", "\u8208\u5473\uFF0F\u4FAE\u8511", "\u4FE1\u983C\uFF0F\u5AC9\u59AC", "\u5B88\u8B77\uFF0F\u6B32\u60C5"]['$[]']($rb_minus(key, 1));
      return "" + "1D6 => [" + (key) + "] " + (text);
    }, $LostRoyal_roll_emotion_chart$16.$$arity = 0);
    
    Opal.def(self, '$roll_hope', $LostRoyal_roll_hope$17 = function $$roll_hope(number_of_dice) {try {

      var $$18, self = this, total = nil, text = nil;

      
      total = 0;
      text = "";
      return $send(self, 'loop', [], ($$18 = function(){var self = $$18.$$s || this, $a, $b, d1 = nil, d2 = nil;

      
        $b = self.$roll(1, 6), $a = Opal.to_ary($b), (d1 = ($a[0] == null ? nil : $a[0])), $b;
        d2 = 0;
        if ($truthy($rb_ge(number_of_dice, 2))) {
          $b = self.$roll(1, 6), $a = Opal.to_ary($b), (d2 = ($a[0] == null ? nil : $a[0])), $b};
        total = $rb_plus(total, $rb_plus(d1, d2));
        if (number_of_dice['$=='](2)) {
          text = $rb_plus(text, "" + "2D6[" + (d1) + "," + (d2) + "]")
        } else {
          text = $rb_plus(text, "" + "1D6[" + (d1) + "]")
        };
        if ($truthy(($truthy($a = self.$is_1or2(d1)) ? $a : self.$is_1or2(d2)))) {
          return (text = $rb_plus(text, " \uFF08\u632F\u308A\u8DB3\u3057\uFF09 => "))
        } else {
          
          text = $rb_plus(text, "" + " => \u5408\u8A08 " + (total));
          Opal.ret(text);
        };}, $$18.$$s = self, $$18.$$arity = 0, $$18));
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $LostRoyal_roll_hope$17.$$arity = 1);
    return (Opal.def(self, '$is_1or2', $LostRoyal_is_1or2$19 = function $$is_1or2(n) {
      var self = this;

      return [1, 2]['$include?'](n)
    }, $LostRoyal_is_1or2$19.$$arity = 1), nil) && 'is_1or2';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
