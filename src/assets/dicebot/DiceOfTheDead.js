/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$upcase', '$===', '$to_i', '$last_match', '$checkInfection', '$rollZombie', '$times', '$roll', '$+', '$-', '$ceil', '$/', '$[]', '$first', '$last', '$max', '$min', '$assoc']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'DiceOfTheDead');

    var $nesting = [self].concat($parent_nesting), $DiceOfTheDead_initialize$1, $DiceOfTheDead_rollDiceCommand$2, $DiceOfTheDead_checkInfection$3, $DiceOfTheDead_rollZombie$5;

    
    Opal.const_set($nesting[0], 'ID', "DiceOfTheDead");
    Opal.const_set($nesting[0], 'NAME', "\u30C0\u30A4\u30B9\u30FB\u30AA\u30D6\u30FB\u30B6\u30FB\u30C7\u30C3\u30C9");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u305F\u3044\u3059\u304A\u3075\u3055\u3066\u3064\u3068");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u30FB\u30BE\u30F3\u30D3\u5316\u8868\u3000ZMB+x\n" + "\uFF08x=\u30AA\u30FC\u30D7\u30F3\u4E2D\u306E\u611F\u67D3\u5EA6\u30DE\u30B9\u306E\u6570\u3002+x\u306F\u7701\u7565\u53EF\u80FD\u3001\u7701\u7565\u6642\u306F0\uFF09\n" + "\u30FB\u611F\u67D3\u5EA6\u8868\u3000BIOx\n" + "\uFF08x\u306F\u88AB\u5F3E\u56DE\u6570\u3002x\u306F\u7701\u7565\u53EF\u80FD\u3001\u7701\u7565\u6642\u306F1\uFF09\n" + "\uFF08\u4E0A\u8A18\u4E8C\u3064\u306F\u6700\u521D\u304B\u3089\u30B7\u30FC\u30AF\u30EC\u30C3\u30C8\u30C0\u30A4\u30B9\u3067\u884C\u308F\u308C\u307E\u3059\uFF09\n");
    self.$setPrefixes(["(ZMB|BIO).*"]);
    
    Opal.def(self, '$initialize', $DiceOfTheDead_initialize$1 = function $$initialize() {
      var $iter = $DiceOfTheDead_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $DiceOfTheDead_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $DiceOfTheDead_initialize$1, false), $zuper, $iter);
      self.sendMode = 2;
      self.sortType = 1;
      return (self.d66Type = 2);
    }, $DiceOfTheDead_initialize$1.$$arity = 0);
    
<<<<<<< HEAD
    Opal.defn(self, '$gameName', TMP_DiceOfTheDead_gameName_2 = function $$gameName() {
      var self = this;

      return "骰子・オブ・ザ・デッド"
    }, TMP_DiceOfTheDead_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_DiceOfTheDead_gameType_3 = function $$gameType() {
      var self = this;

      return "DiceOfTheDead"
    }, TMP_DiceOfTheDead_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_DiceOfTheDead_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "・ゾンビ化表　ZMB+x\n" + "（x=オープン中の感染度マスの数。+xは省略可能、省略時は0）\n" + "・感染度表　BIOx\n" + "（xは被弾回数。xは省略可能、省略時は1）\n" + "（上記二つは最初からシークレットダイスで行われます）\n"
    }, TMP_DiceOfTheDead_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$rollDiceCommand', TMP_DiceOfTheDead_rollDiceCommand_5 = function $$rollDiceCommand(command) {
=======
    Opal.def(self, '$rollDiceCommand', $DiceOfTheDead_rollDiceCommand$2 = function $$rollDiceCommand(command) {
>>>>>>> 0dfe93a1d368ac1ad3ef24167156b31a70848848
      var $a, self = this, result = nil, secret_flg = nil, $case = nil, roll_times = nil, value = nil;

      
      command = command.$upcase();
      result = "";
      secret_flg = false;
      $case = command;
      if (/^BIO(\d+)?$/i['$===']($case)) {
      roll_times = ($truthy($a = $$($nesting, 'Regexp').$last_match(1)) ? $a : 1).$to_i();
      result = self.$checkInfection(roll_times);
      secret_flg = true;}
      else if (/^ZMB(\+(\d+))?$/i['$===']($case)) {
      value = $$($nesting, 'Regexp').$last_match(2).$to_i();
      result = self.$rollZombie(value);
      secret_flg = true;};
      return [result, secret_flg];
    }, $DiceOfTheDead_rollDiceCommand$2.$$arity = 1);
    
    Opal.def(self, '$checkInfection', $DiceOfTheDead_checkInfection$3 = function $$checkInfection(roll_times) {
      var $$4, self = this, result = nil;

      
      result = "\u611F\u67D3\u5EA6\u8868";
      $send(roll_times, 'times', [], ($$4 = function(){var self = $$4.$$s || this, $a, $b, d1 = nil, d2 = nil, index1 = nil, index2 = nil, table = nil;

      
        $b = self.$roll(1, 6), $a = Opal.to_ary($b), (d1 = ($a[0] == null ? nil : $a[0])), $b;
        $b = self.$roll(1, 6), $a = Opal.to_ary($b), (d2 = ($a[0] == null ? nil : $a[0])), $b;
        result = $rb_plus(result, "" + "\u3000\uFF1E\u3000\u51FA\u76EE\uFF1A" + (d1) + "\u3001" + (d2) + "\u3000");
        index1 = $rb_minus($rb_divide(d1, 2.0).$ceil(), 1);
        index2 = $rb_minus($rb_divide(d2, 2.0).$ceil(), 1);
        table = [["\u300C\u53F3\u4E0B\uFF08\u3010\u8DB3\u3011\uFF0B\uFF11\uFF09\u300D", "\u300C\u53F3\u4E2D\uFF08\u3010\u8DB3\u3011\uFF0B\uFF11\uFF09\u300D", "\u300C\u53F3\u4E0A\uFF08\u3010\u8DB3\u3011\uFF0B\uFF11\uFF09\u300D"], ["\u300C\u4E2D\u4E0B\uFF08\u3010\u8155\u3011\uFF0B\uFF11\uFF09\u300D", "\u300C\u771F\u4E2D\uFF08\u3010\u8155\u3011\uFF0B\uFF11\uFF09\u300D", "\u300C\u4E2D\u4E0A\uFF08\u3010\u8155\u3011\uFF0B\uFF11\uFF09\u300D"], ["\u300C\u5DE6\u4E0B\uFF08\u3010\u982D\u3011\uFF0B\uFF11\uFF09\u300D", "\u300C\u5DE6\u4E2D\uFF08\u3010\u982D\u3011\uFF0B\uFF11\uFF09\u300D", "\u300C\u5DE6\u4E0A\uFF08\u3010\u982D\u3011\uFF0B\uFF11\uFF09\u300D"]];
        return (result = $rb_plus(result, table['$[]'](index1)['$[]'](index2)));}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      return result;
    }, $DiceOfTheDead_checkInfection$3.$$arity = 1);
    return (Opal.def(self, '$rollZombie', $DiceOfTheDead_rollZombie$5 = function $$rollZombie(value) {
      var $a, $b, self = this, d1 = nil, d2 = nil, diceTotal = nil, table = nil, minDice = nil, maxDice = nil, index = nil, _number = nil, text = nil, result = nil;

      
      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (d1 = ($a[0] == null ? nil : $a[0])), $b;
      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (d2 = ($a[0] == null ? nil : $a[0])), $b;
      diceTotal = $rb_plus($rb_plus(d1, d2), value);
      table = [[5, "\uFF15\u4EE5\u4E0B\uFF1A\u5F71\u97FF\u306A\u3057"], [6, "\uFF16\uFF1A\u4EFB\u610F\u306E\u90E8\u4F4D\u3092\uFF11\u70B9\u56DE\u5FA9"], [7, "\uFF17\uFF1A\u3008\u30A2\u30A4\u30C6\u30E0\u3009\u6B66\u5668\u3092\uFF11\u3064\u305D\u306E\u5834\u306B\u843D\u3068\u3059"], [8, "\uFF18\uFF1A\u3008\u30A2\u30A4\u30C6\u30E0\u3009\u4FBF\u5229\u9053\u5177\uFF11\u3064\u3092\u305D\u306E\u5834\u306B\u843D\u3068\u3059"], [9, "\uFF19\uFF1A\u3008\u30A2\u30A4\u30C6\u30E0\u3009\u6D88\u8017\u54C1\uFF11\u3064\u3092\u305D\u306E\u5834\u306B\u843D\u3068\u3059"], [10, "\uFF11\uFF10\uFF1A\u8155\u306E\u50B7\u304C\u5E83\u304C\u308B\u3002\u300C\u90E8\u4F4D\uFF1A\u3010\u8155\u3011\u300D\uFF11\u70B9\u30C0\u30E1\u30FC\u30B8"], [11, "\uFF11\uFF11\uFF1A\u8DB3\u306E\u50B7\u304C\u5E83\u304C\u308B\u3002\u300C\u90E8\u4F4D\uFF1A\u3010\u8DB3\u3011\u300D\uFF11\u70B9\u30C0\u30E1\u30FC\u30B8"], [12, "\uFF11\uFF12\uFF1A\u982D\u306E\u50B7\u304C\u5E83\u304C\u308B\u3002\u300C\u90E8\u4F4D\uFF1A\u3010\u982D\u3011\u300D\uFF11\u70B9\u30C0\u30E1\u30FC\u30B8"], [13, "\uFF11\uFF13\uFF1A\u3010\u30BE\u30F3\u30D3\u5316\u8868\u3011\u304C\u65B0\u305F\u306B\u9069\u7528\u3055\u308C\u308B\u307E\u3067\u300C\u3010\u611F\u67D3\u5EA6\u3011\uFF0B\uFF11\u30DE\u30B9\u300D\u306E\u52B9\u679C\u3092\u53D7\u3051\u308B"], [14, "\uFF11\uFF14\uFF1A\u5373\u5EA7\u306B\u81EA\u5206\u4EE5\u5916\u306E\u5473\u65B9\uFF11\u4EBA\u306E\u30B9\u30ED\u30C3\u30C8\u5185\u306E\u3008\u30A2\u30A4\u30C6\u30E0\u3009\uFF11\u3064\u3092\u30E9\u30F3\u30C0\u30E0\u306B\u6368\u3066\u3055\u305B\u308B"], [15, "\uFF11\uFF15\uFF1A\u5473\u65B9\uFF11\u4EBA\u306B\u7D20\u624B\u3067\u653B\u6483\u3092\u884C\u3046"], [16, "\uFF11\uFF16\uFF1A\u5373\u5EA7\u306B\u611F\u67D3\u5EA6\u304C\uFF11\u4E0A\u6607\u3059\u308B"], [17, "\uFF11\uFF17\uFF1A\u6B21\u306E\u30BF\u30FC\u30F3\u306E\u307F\u3001\u3059\u3079\u3066\u306E\u3010\u80FD\u529B\u5024\u3011\u3092\uFF12\u500D\u306B\u3059\u308B"], [18, "\uFF11\uFF18\u4EE5\u4E0A\uFF1A\u81EA\u5206\u4EE5\u5916\u306E\u5473\u65B9\uFF11\u4EBA\u306B\u3067\u304D\u308B\u9650\u308A\u5168\u529B\u3067\u653B\u6483\u3092\u884C\u3046\u3002\u3008\u30A2\u30A4\u30C6\u30E0\u3009\u3082\u53EF\u80FD\u306A\u9650\u308A\u4F7F\u7528\u3059\u308B"]];
      minDice = table.$first().$first();
      maxDice = table.$last().$first();
      index = diceTotal;
      index = [minDice, index].$max();
      index = [index, maxDice].$min();
      $b = table.$assoc(index), $a = Opal.to_ary($b), (_number = ($a[0] == null ? nil : $a[0])), (text = ($a[1] == null ? nil : $a[1])), $b;
      result = "" + "\u30BE\u30F3\u30D3\u5316\u8868\u3000\uFF1E\u3000\u51FA\u76EE\uFF1A" + (d1) + "\uFF0B" + (d2) + "\u3000\u611F\u67D3\u5EA6\uFF1A" + (value) + "\u3000\u5408\u8A08\u5024\uFF1A" + (diceTotal) + "\u3000\uFF1E\u3000" + (text);
      return result;
    }, $DiceOfTheDead_rollZombie$5.$$arity = 1), nil) && 'rollZombie';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
