/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$===', '$getCheckResult', '$getRegistResult', '$getCombineRoll', '$match', '$to_i', '$[]', '$>', '$+', '$roll', '$getCheckResultText', '$floor', '$/', '$*', '$<', '$<=', '$>=', '$-', '$include?', '$debug', '$==']);
  return (function($base, $super, $parent_nesting) {
<<<<<<< HEAD:src/assets/dicebot/CthulhuChineseTraditional.js
    function $CthulhuChineseTraditional(){};
    var self = $CthulhuChineseTraditional = $klass($base, $super, 'CthulhuChineseTraditional', $CthulhuChineseTraditional);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_CthulhuChineseTraditional_initialize_1, TMP_CthulhuChineseTraditional_gameName_2, TMP_CthulhuChineseTraditional_gameType_3, TMP_CthulhuChineseTraditional_getHelpMessage_4, TMP_CthulhuChineseTraditional_rollDiceCommand_5, TMP_CthulhuChineseTraditional_getCheckResult_6, TMP_CthulhuChineseTraditional_getCheckResultText_7, TMP_CthulhuChineseTraditional_getRegistResult_8, TMP_CthulhuChineseTraditional_getCombineRoll_9;
=======
    var self = $klass($base, $super, 'Cthulhu_ChineseTraditional');

    var $nesting = [self].concat($parent_nesting), $Cthulhu_ChineseTraditional_initialize$1, $Cthulhu_ChineseTraditional_rollDiceCommand$2, $Cthulhu_ChineseTraditional_getCheckResult$3, $Cthulhu_ChineseTraditional_getCheckResultText$4, $Cthulhu_ChineseTraditional_getRegistResult$5, $Cthulhu_ChineseTraditional_getCombineRoll$6;
>>>>>>> 0dfe93a1d368ac1ad3ef24167156b31a70848848:src/assets/dicebot/Cthulhu_ChineseTraditional.js

    self.$$prototype.special_percentage = self.$$prototype.critical_percentage = self.$$prototype.fumble_percentage = nil;
    
    Opal.const_set($nesting[0], 'ID', "Cthulhu:ChineseTraditional");
    Opal.const_set($nesting[0], 'NAME', "\u514B\u8607\u9B6F\u795E\u8A71");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u56FD\u969B\u5316:Chinese Traditional:\u514B\u8607\u9B6F\u795E\u8A717");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "c=\u7206\u64CA\u7387 \uFF0F f=\u5927\u5931\u6557\u503C \uFF0F s=\u7279\u6B8A\n" + "\n" + "1d100<=n    c\u30FBf\u30FBs\u5168\u95DC\u9589\uFF08\u53EA\u9032\u884C\u55AE\u7D14\u6578\u503C\u6BD4\u8F03\u5224\u5B9A\uFF09\n" + "\n" + "\u30FBcfs\u4ED8\u8A3B\u5224\u5B9A\u6307\u4EE4\n" + "\n" + "CC\t 1d100\u64F2\u9AB0 c=1\u3001f=100\n" + "CCB  \u540C\u4E0A\u3001c=5\u3001f=96\n" + "\n" + "\u4F8B\uFF1ACC<=80  \uFF08\u4EE5\u6280\u80FD\u503C80\u4F86\u5224\u5B9A\u3002cf\u9069\u7528\u65BC1%\u898F\u5247\uFF09\n" + "\u4F8B\uFF1ACCB<=55 \uFF08\u4EE5\u6280\u80FD\u503C55\u4F86\u5224\u5B9A\u3002cf\u9069\u7528\u65BC5%\u898F\u5247\uFF09\n" + "\n" + "\u30FB\u95DC\u65BC\u7D44\u5408\u9AB0\u7D44\n" + "\n" + "CBR(x,y)\tc=1\u3001f=100\n" + "CBRB(x,y)\tc=5\u3001f=96\n" + "\n" + "\u30FB\u95DC\u65BC\u5C0D\u6297\u9AB0\n" + "RES(x-y)\tc=1\u3001f=100\n" + "RESB(x-y)\tc=5\u3001f=96\n" + "\n" + "\u203B\u6545\u969C\u7387\u5224\u5B9A\n" + "\n" + "\u30FBCC(x) c=1\u3001f=100\n" + "x=\u6545\u969C\u7387\u3002\u64F2\u51FA\u9AB0\u503Cx\u4EE5\u4E0A\u6642\u3001\u9700\u5728\u5927\u5931\u6557\u767C\u751F\u540C\u6642\u8F38\u51FA\uFF08\u53C3\u7167\u300C\u5927\u5931\u6557\uFF06\u6545\u969C\u300D\uFF09\n" + "\u6C92\u6709\u5927\u5931\u6557\u6642\uFF0C\u7121\u8AD6\u6210\u529F\u6216\u5931\u6557\u53EA\u9700\u53C3\u8003[\u6545\u969C]\u4F86\u8F38\u51FA(\u4E26\u975E\u6210\u529F\u6216\u5931\u6557\u4F86\u8F38\u51FA\uFF0C\u800C\u662F\u8986\u84CB\u4E0A\u53BB\u4E26\u5C0D\u5176\u8F38\u51FA)\n" + "\n" + "\u30FBCCB(x) c=5\u3001f=96\n" + "\u540C\u4E0A\n" + "\n" + "\u30FB\u760B\u72C2\u8868\n" + "\u30FB\u77ED\u671F\u760B\u671F\u3000Short\uFF0F\u9577\u671F\u760B\u72C2\u3000Longer\n" + "\n");
    self.$setPrefixes(["CC(B)?\\(\\d+\\)", "CC(B)?.*", "RES(B)?.*", "CBR(B)?\\(\\d+,\\d+\\)"]);
    
<<<<<<< HEAD:src/assets/dicebot/CthulhuChineseTraditional.js
    Opal.defn(self, '$initialize', TMP_CthulhuChineseTraditional_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_CthulhuChineseTraditional_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_CthulhuChineseTraditional_initialize_1.$$p = null;
=======
    Opal.def(self, '$initialize', $Cthulhu_ChineseTraditional_initialize$1 = function $$initialize() {
      var $iter = $Cthulhu_ChineseTraditional_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Cthulhu_ChineseTraditional_initialize$1.$$p = null;
>>>>>>> 0dfe93a1d368ac1ad3ef24167156b31a70848848:src/assets/dicebot/Cthulhu_ChineseTraditional.js
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
<<<<<<< HEAD:src/assets/dicebot/CthulhuChineseTraditional.js
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_CthulhuChineseTraditional_initialize_1, false), $zuper, $iter);
      self.special_percentage = 20;
      self.critical_percentage = 1;
      return (self.fumble_percentage = 1);
    }, TMP_CthulhuChineseTraditional_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_CthulhuChineseTraditional_gameName_2 = function $$gameName() {
      var self = this;

      return "克蘇魯神話"
    }, TMP_CthulhuChineseTraditional_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_CthulhuChineseTraditional_gameType_3 = function $$gameType() {
      var self = this;

      return "CthulhuChineseTraditional"
    }, TMP_CthulhuChineseTraditional_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_CthulhuChineseTraditional_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "c=爆擊率 ／ f=大失敗值 ／ s=特殊\n" + "\n" + "1d100<=n    c・f・s全關閉（只進行單純數值比較判定）\n" + "\n" + "・cfs付註判定指令\n" + "\n" + "CC\t 1d100擲骰 c=1、f=100\n" + "CCB  同上、c=5、f=96\n" + "\n" + "例：CC<=80  （以技能值80來判定。cf適用於1%規則）\n" + "例：CCB<=55 （以技能值55來判定。cf適用於5%規則）\n" + "\n" + "・關於組合骰組\n" + "\n" + "CBR(x,y)\tc=1、f=100\n" + "CBRB(x,y)\tc=5、f=96\n" + "\n" + "・關於對抗骰\n" + "RES(x-y)\tc=1、f=100\n" + "RESB(x-y)\tc=5、f=96\n" + "\n" + "※故障率判定\n" + "\n" + "・CC(x) c=1、f=100\n" + "x=故障率。擲出骰值x以上時、需在大失敗發生同時輸出（參照「大失敗＆故障」）\n" + "沒有大失敗時，無論成功或失敗只需參考[故障]來輸出(並非成功或失敗來輸出，而是覆蓋上去並對其輸出)\n" + "\n" + "・CCB(x) c=5、f=96\n" + "同上\n" + "\n" + "・瘋狂表\n" + "・短期瘋期　Short／長期瘋狂　Longer\n" + "\n"
    }, TMP_CthulhuChineseTraditional_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$rollDiceCommand', TMP_CthulhuChineseTraditional_rollDiceCommand_5 = function $$rollDiceCommand(command) {
=======
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $Cthulhu_ChineseTraditional_initialize$1, false), $zuper, $iter);
      self.special_percentage = 20;
      self.critical_percentage = 1;
      return (self.fumble_percentage = 1);
    }, $Cthulhu_ChineseTraditional_initialize$1.$$arity = 0);
    
    Opal.def(self, '$rollDiceCommand', $Cthulhu_ChineseTraditional_rollDiceCommand$2 = function $$rollDiceCommand(command) {
>>>>>>> 0dfe93a1d368ac1ad3ef24167156b31a70848848:src/assets/dicebot/Cthulhu_ChineseTraditional.js
      var self = this, $case = nil;

      
      $case = command;
      if (/CCB/i['$===']($case)) {
      self.critical_percentage = 5;
      self.fumble_percentage = 5;
      return self.$getCheckResult(command);}
      else if (/CC/i['$===']($case)) {
      self.critical_percentage = 1;
      self.fumble_percentage = 1;
      return self.$getCheckResult(command);}
      else if (/RESB/i['$===']($case)) {
      self.critical_percentage = 5;
      self.fumble_percentage = 5;
      return self.$getRegistResult(command);}
      else if (/CBRB/i['$===']($case)) {
      self.critical_percentage = 5;
      self.fumble_percentage = 5;
      return self.$getCombineRoll(command);}
      else if (/RES/i['$===']($case)) {
      self.critical_percentage = 1;
      self.fumble_percentage = 1;
      return self.$getRegistResult(command);}
      else if (/CBR/i['$===']($case)) {
      self.critical_percentage = 1;
      self.fumble_percentage = 1;
      return self.$getCombineRoll(command);};
      return nil;
<<<<<<< HEAD:src/assets/dicebot/CthulhuChineseTraditional.js
    }, TMP_CthulhuChineseTraditional_rollDiceCommand_5.$$arity = 1);
    
    Opal.defn(self, '$getCheckResult', TMP_CthulhuChineseTraditional_getCheckResult_6 = function $$getCheckResult(command) {
=======
    }, $Cthulhu_ChineseTraditional_rollDiceCommand$2.$$arity = 1);
    
    Opal.def(self, '$getCheckResult', $Cthulhu_ChineseTraditional_getCheckResult$3 = function $$getCheckResult(command) {
>>>>>>> 0dfe93a1d368ac1ad3ef24167156b31a70848848:src/assets/dicebot/Cthulhu_ChineseTraditional.js
      var $a, $b, self = this, broken_num = nil, diff = nil, m = nil, output = nil, total_n = nil;

      
      broken_num = 0;
      diff = 0;
      if ($truthy((m = /CC(B)?(\d+)<=(\d+)/i.$match(command)))) {
        
        broken_num = m['$[]'](2).$to_i();
        diff = m['$[]'](3).$to_i();
      } else if ($truthy((m = /CC(B)?<=(\d+)/i.$match(command)))) {
        diff = m['$[]'](2).$to_i()};
      output = "";
      if ($truthy($rb_gt(diff, 0))) {
        
        output = "" + "(1D100<=" + (diff) + ")";
        if ($truthy($rb_gt(broken_num, 0))) {
          output = $rb_plus(output, "" + " \u6545\u969C\u7387[" + (broken_num) + "]")};
        $b = self.$roll(1, 100), $a = Opal.to_ary($b), (total_n = ($a[0] == null ? nil : $a[0])), $b;
        output = $rb_plus(output, "" + " \uFF1E " + (total_n));
        output = $rb_plus(output, "" + " \uFF1E " + (self.$getCheckResultText(total_n, diff, broken_num)));
      } else {
        
        $b = self.$roll(1, 100), $a = Opal.to_ary($b), (total_n = ($a[0] == null ? nil : $a[0])), $b;
        output = "" + "(1D100) \uFF1E " + (total_n);
      };
      return output;
<<<<<<< HEAD:src/assets/dicebot/CthulhuChineseTraditional.js
    }, TMP_CthulhuChineseTraditional_getCheckResult_6.$$arity = 1);
    
    Opal.defn(self, '$getCheckResultText', TMP_CthulhuChineseTraditional_getCheckResultText_7 = function $$getCheckResultText(total_n, diff, broken_num) {
=======
    }, $Cthulhu_ChineseTraditional_getCheckResult$3.$$arity = 1);
    
    Opal.def(self, '$getCheckResultText', $Cthulhu_ChineseTraditional_getCheckResultText$4 = function $$getCheckResultText(total_n, diff, broken_num) {
>>>>>>> 0dfe93a1d368ac1ad3ef24167156b31a70848848:src/assets/dicebot/Cthulhu_ChineseTraditional.js
      var $a, self = this, result = nil, diff_special = nil, fumble = nil;

      
      
      if (broken_num == null) {
        broken_num = 0;
      };
      result = "";
      diff_special = 0;
      fumble = false;
      if ($truthy($rb_gt(self.special_percentage, 0))) {
        
        diff_special = $rb_divide($rb_times(diff, self.special_percentage), 100).$floor();
        if ($truthy($rb_lt(diff_special, 1))) {
          diff_special = 1};};
      if ($truthy(($truthy($a = $rb_le(total_n, diff)) ? $rb_lt(total_n, 100) : $a))) {
        
        result = "\u6210\u529F";
        if ($truthy($rb_gt(diff_special, 0))) {
          if ($truthy($rb_le(total_n, self.critical_percentage))) {
            if ($truthy($rb_le(total_n, diff_special))) {
              result = "\u6C7A\u5B9A\u6027\u7684\u6210\u529F/\u7279\u6B8A"
            } else {
              result = "\u6C7A\u5B9A\u6027\u7684\u6210\u529F"
            }
          } else if ($truthy($rb_le(total_n, diff_special))) {
            result = "\u7279\u6B8A"}};
      } else {
        
        result = "\u5931\u6557";
        if ($truthy($rb_gt(diff_special, 0))) {
          if ($truthy(($truthy($a = $rb_ge(total_n, $rb_minus(101, self.fumble_percentage))) ? $rb_lt(diff, 100) : $a))) {
            
            result = "\u81F4\u547D\u6027\u5931\u6557";
            fumble = true;}};
      };
      if ($truthy($rb_gt(broken_num, 0))) {
        if ($truthy($rb_ge(total_n, broken_num))) {
          if ($truthy(fumble)) {
            result = $rb_plus(result, "/\u6545\u969C")
          } else {
            result = "\u6545\u969C"
          }}};
      return result;
<<<<<<< HEAD:src/assets/dicebot/CthulhuChineseTraditional.js
    }, TMP_CthulhuChineseTraditional_getCheckResultText_7.$$arity = -3);
    
    Opal.defn(self, '$getRegistResult', TMP_CthulhuChineseTraditional_getRegistResult_8 = function $$getRegistResult(command) {
=======
    }, $Cthulhu_ChineseTraditional_getCheckResultText$4.$$arity = -3);
    
    Opal.def(self, '$getRegistResult', $Cthulhu_ChineseTraditional_getRegistResult$5 = function $$getRegistResult(command) {
>>>>>>> 0dfe93a1d368ac1ad3ef24167156b31a70848848:src/assets/dicebot/Cthulhu_ChineseTraditional.js
      var $a, $b, self = this, m = nil, value = nil, target = nil, total_n = nil, result = nil;

      
      m = /RES(B)?([-\d]+)/i.$match(command);
      if ($truthy(m)) {
      } else {
        return "1"
      };
      value = m['$[]'](2).$to_i();
      target = $rb_plus($rb_times(value, 5), 50);
      if ($truthy($rb_lt(target, 5))) {
        return "" + "(1d100<=" + (target) + ") \uFF1E \u81EA\u52D5\u5931\u6557"};
      if ($truthy($rb_gt(target, 95))) {
        return "" + "(1d100<=" + (target) + ") \uFF1E \u81EA\u52D5\u6210\u529F"};
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (total_n = ($a[0] == null ? nil : $a[0])), $b;
      result = self.$getCheckResultText(total_n, target);
<<<<<<< HEAD:src/assets/dicebot/CthulhuChineseTraditional.js
      return "" + "(1d100<=" + (target) + ") ＞ " + (total_n) + " ＞ " + (result);
    }, TMP_CthulhuChineseTraditional_getRegistResult_8.$$arity = 1);
    return (Opal.defn(self, '$getCombineRoll', TMP_CthulhuChineseTraditional_getCombineRoll_9 = function $$getCombineRoll(command) {
=======
      return "" + "(1d100<=" + (target) + ") \uFF1E " + (total_n) + " \uFF1E " + (result);
    }, $Cthulhu_ChineseTraditional_getRegistResult$5.$$arity = 1);
    return (Opal.def(self, '$getCombineRoll', $Cthulhu_ChineseTraditional_getCombineRoll$6 = function $$getCombineRoll(command) {
>>>>>>> 0dfe93a1d368ac1ad3ef24167156b31a70848848:src/assets/dicebot/Cthulhu_ChineseTraditional.js
      var $a, $b, self = this, m = nil, diff_1 = nil, diff_2 = nil, total = nil, result_1 = nil, result_2 = nil, successList = nil, succesCount = nil, rank = nil;

      
      m = /CBR(B)?\((\d+),(\d+)\)/i.$match(command);
      if ($truthy(m)) {
      } else {
        return "1"
      };
      diff_1 = m['$[]'](2).$to_i();
      diff_2 = m['$[]'](3).$to_i();
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (total = ($a[0] == null ? nil : $a[0])), $b;
      result_1 = self.$getCheckResultText(total, diff_1);
      result_2 = self.$getCheckResultText(total, diff_2);
      successList = ["\u6C7A\u5B9A\u6027\u6210\u529F/\u7279\u6B8A", "\u6C7A\u5B9A\u6027\u6210\u529F", "\u7279\u6B8A", "\u6210\u529F"];
      succesCount = 0;
      if ($truthy(successList['$include?'](result_1))) {
        succesCount = $rb_plus(succesCount, 1)};
      if ($truthy(successList['$include?'](result_2))) {
        succesCount = $rb_plus(succesCount, 1)};
      self.$debug("succesCount", succesCount);
      rank = (function() {if ($truthy($rb_ge(succesCount, 2))) {
        return "\u6210\u529F"
      } else if (succesCount['$=='](1)) {
        return "\u90E8\u5206\u6027\u6210\u529F"
      } else {
        return "\u5931\u6557"
      }; return nil; })();
<<<<<<< HEAD:src/assets/dicebot/CthulhuChineseTraditional.js
      return "" + "(1d100<=" + (diff_1) + "," + (diff_2) + ") ＞ " + (total) + "[" + (result_1) + "," + (result_2) + "] ＞ " + (rank);
    }, TMP_CthulhuChineseTraditional_getCombineRoll_9.$$arity = 1), nil) && 'getCombineRoll';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
=======
      return "" + "(1d100<=" + (diff_1) + "," + (diff_2) + ") \uFF1E " + (total) + "[" + (result_1) + "," + (result_2) + "] \uFF1E " + (rank);
    }, $Cthulhu_ChineseTraditional_getCombineRoll$6.$$arity = 1), nil) && 'getCombineRoll';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
>>>>>>> 0dfe93a1d368ac1ad3ef24167156b31a70848848:src/assets/dicebot/Cthulhu_ChineseTraditional.js
})(Opal);
