/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$upcase', '$===', '$to_i', '$last_match', '$<', '$scan', '$each', '$+', '$!=', '$checkRoll', '$get_weather_table', '$get_free_situation_table', '$roll', '$collect', '$split', '$[]', '$count', '$==', '$>', '$to_s', '$>=', '$get_table_by_number']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Postman');

    var $nesting = [self].concat($parent_nesting), $Postman_initialize$1, $Postman_rollDiceCommand$2, $Postman_checkRoll$5, $Postman_get_weather_table$8, $Postman_get_free_situation_table$9;

    self.$$prototype.sortType = nil;
    
    Opal.const_set($nesting[0], 'ID', "Postman");
    Opal.const_set($nesting[0], 'NAME', "\u58CA\u308C\u305F\u4E16\u754C\u306E\u30DD\u30B9\u30C8\u30DE\u30F3");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u307B\u3059\u3068\u307E\u3093");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u25C6\u5224\u5B9A\uFF1A[n]PO[+-a][> or >= or @X]\u3000\u3000[]\u5185\u7701\u7565\u53EF\u3002\n" + "\n" + "\u9054\u6210\u5024\u3068\u5224\u5B9A\u306E\u6210\u5426\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u3092\u7D50\u679C\u8868\u793A\u3057\u307E\u3059\u3002\n" + "\u300Cn\u300D\u3067\u30C0\u30A4\u30B9\u6570\u3092\u6307\u5B9A\u3002\u7701\u7565\u6642\u306F2D\u3002\n" + "\u300C+-a\u300D\u3067\u9054\u6210\u5024\u3078\u306E\u4FEE\u6B63\u3092\u6307\u5B9A\u3002\u300C+2+1-4\u300D\u306E\u3088\u3046\u306A\u8907\u6570\u56DE\u6307\u5B9A\u53EF\u3002\n" + "\u300C>X\u300D\u300C>=X\u300D\u300C@X\u300D\u3067\u96E3\u6613\u5EA6\u3092\u6307\u5B9A\u53EF\u3002\n" + "\u300C>X\u300D\u306F\u9054\u6210\u5024>\u96E3\u6613\u5EA6\u3001\u300C>=X\u300D\u300C@X\u300D\u306F\u9054\u6210\u5024>=\u96E3\u6613\u5EA6\u3067\u5224\u5B9A\u3057\u307E\u3059\u3002\n" + "\n" + "\u3010\u66F8\u5F0F\u4F8B\u3011\n" + "3PO+2-1 \u2192 3D\u3067\u9054\u6210\u5024\u4FEE\u6B63+1\u306E\u5224\u5B9A\u3002\u9054\u6210\u5024\u306E\u307F\u8868\u793A\u3002\n" + "PO@5+2 \u2192 2D\u3067\u76EE\u6A19\u50247\u306E\u5224\u5B9A\u3002\u5224\u5B9A\u306E\u6210\u5426\u3068\u9054\u6210\u5024\u3092\u8868\u793A\u3002\n" + "4PO-2+1>7+2 \u2192 4D\u3067\u9054\u6210\u5024\u4FEE\u6B63-1\u3001\u76EE\u6A19\u50249\uFF08\u540C\u5024\u306F\u5931\u6557\uFF09\u306E\u5224\u5B9A\u3002\n" + "\n" + "\n" + "\u25C6\u5929\u5019\u30C1\u30A7\u30C3\u30AF\uFF1AWEA[n]\u3000\u3000[]\u5185\u7701\u7565\u53EF\u3002\n" + "\n" + "\u5929\u5019\u30C1\u30A7\u30C3\u30AF\u8868\u3092\u53C2\u7167\u3057\u307E\u3059\u3002\n" + "\u300Cn\u300D\u3092\u6307\u5B9A\u3059\u308B\u3068\u3001\u6307\u5B9A\u3057\u305F\u7D50\u679C\u3092\u8868\u793A\u3057\u307E\u3059\u3002\uFF08\u3010\u5E78\u904B\u70B9\u3011\u4F7F\u7528\u6642\u7528\uFF09\n" + "\n" + "\n" + "\u25C6\u81EA\u7531\u884C\u52D5\u30B7\u30C1\u30E5\u30A8\u30FC\u30B7\u30E7\u30F3\u8868\uFF1AFRE\n");
    self.$setPrefixes(["WEA\\d*", "(\\d+)?PO.*", "FRE"]);
    
    Opal.def(self, '$initialize', $Postman_initialize$1 = function $$initialize() {
      var $iter = $Postman_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Postman_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $Postman_initialize$1, false), $zuper, $iter);
      return (self.sortType = 1);
    }, $Postman_initialize$1.$$arity = 0);
    
    Opal.def(self, '$rollDiceCommand', $Postman_rollDiceCommand$2 = function $$rollDiceCommand(command) {
      var $a, $$3, $$4, self = this, text = nil, $case = nil, diceCount = nil, modify = nil, modifyAddString = nil, type = nil, target = nil, targetAddString = nil, modify_list = nil, target_list = nil, roc = nil;

      
      text = (function() {$case = command.$upcase();
      if (/(\d+)?PO(\d+)?(([+-]\d+)*)?((>|>=|@)(\d+)(([+-]\d+)*)?)?/i['$===']($case)) {
      diceCount = ($truthy($a = $$($nesting, 'Regexp').$last_match(1)) ? $a : 2).$to_i();
      if ($truthy($rb_lt(diceCount, 2))) {
        diceCount = 2};
      modify = ($truthy($a = $$($nesting, 'Regexp').$last_match(2)) ? $a : 0).$to_i();
      modifyAddString = ($truthy($a = $$($nesting, 'Regexp').$last_match(3)) ? $a : "");
      type = ($truthy($a = $$($nesting, 'Regexp').$last_match(6)) ? $a : "");
      target = ($truthy($a = $$($nesting, 'Regexp').$last_match(7)) ? $a : 0).$to_i();
      targetAddString = ($truthy($a = $$($nesting, 'Regexp').$last_match(8)) ? $a : "");
      modify_list = modifyAddString.$scan(/[+-]\d+/);
      $send(modify_list, 'each', [], ($$3 = function(i){var self = $$3.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return (modify = $rb_plus(modify, i.$to_i()));}, $$3.$$s = self, $$3.$$arity = 1, $$3));
      if ($truthy(target['$!='](0))) {
        
        target_list = targetAddString.$scan(/[+-]\d+/);
        $send(target_list, 'each', [], ($$4 = function(j){var self = $$4.$$s || this;

        
          
          if (j == null) {
            j = nil;
          };
          return (target = $rb_plus(target, j.$to_i()));}, $$4.$$s = self, $$4.$$arity = 1, $$4));};
      return self.$checkRoll(diceCount, modify, type, target);}
      else if (/WEA(\d+)?/i['$===']($case)) {
      roc = ($truthy($a = $$($nesting, 'Regexp').$last_match(1)) ? $a : 0).$to_i();
      return self.$get_weather_table(roc);}
      else if ("FRE"['$===']($case)) {return self.$get_free_situation_table()}
      else { return nil }})();
      return text;
    }, $Postman_rollDiceCommand$2.$$arity = 1);
    
    Opal.def(self, '$checkRoll', $Postman_checkRoll$5 = function $$checkRoll(diceCount, modify, type, target) {
      var $a, $b, $$6, $$7, self = this, dice = nil, diceText = nil, diceArray = nil, dice2 = nil, diceText2 = nil, criticalCount = nil, modifyText = nil, result = nil, resultText = nil, operatorText = nil, text = nil;

      
      $b = self.$roll(diceCount, 6, self.sortType), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      diceArray = $send(diceText.$split(/,/), 'collect', [], ($$6 = function(i){var self = $$6.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i.$to_i();}, $$6.$$s = self, $$6.$$arity = 1, $$6));
      dice2 = $rb_plus(diceArray['$[]'](-2), diceArray['$[]'](-1));
      diceText2 = "" + (diceArray['$[]'](-2)) + "," + (diceArray['$[]'](-1));
      criticalCount = $send(diceArray, 'count', [], ($$7 = function(i){var self = $$7.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i['$=='](6);}, $$7.$$s = self, $$7.$$arity = 1, $$7));
      if ($truthy(modify['$!='](0))) {
        
        modifyText = "";
        if ($truthy($rb_gt(modify, 0))) {
          modifyText = "+"};
        modifyText = $rb_plus(modifyText, modify.$to_s());};
      result = $rb_plus(dice2, modify);
      if ($truthy(type['$!='](""))) {
        
        resultText = " \u3010\u5931\u6557\u3011";
        operatorText = ">";
        if (type['$=='](">")) {
          if ($truthy($rb_gt(result, target))) {
            resultText = " \u3010\u6210\u529F\u3011"}
        } else {
          
          operatorText = $rb_plus(operatorText, "=");
          if ($truthy($rb_ge(result, target))) {
            resultText = " \u3010\u6210\u529F\u3011"};
        };};
      if ($truthy($rb_ge(criticalCount, 2))) {
        resultText = " \u3010\u6210\u529F\u3011\uFF08\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\uFF09"
      } else if (dice['$=='](diceCount)) {
        resultText = " \u3010\u5931\u6557\u3011\uFF08\u30D5\u30A1\u30F3\u30D6\u30EB\uFF09"};
      text = "" + (diceCount) + "D6(" + (diceText) + ")" + (modifyText) + " \uFF1E " + (dice2) + "(" + (diceText2) + ")" + (modifyText) + " = \u9054\u6210\u5024\uFF1A" + (result);
      if ($truthy($rb_gt(target, 0))) {
        text = $rb_plus(text, "" + (operatorText) + (target) + " ")};
      text = $rb_plus(text, resultText.$to_s());
      return text;
    }, $Postman_checkRoll$5.$$arity = 4);
    
    Opal.def(self, '$get_weather_table', $Postman_get_weather_table$8 = function $$get_weather_table(roc) {
      var $a, $b, self = this, name = nil, table = nil, dice = nil, diceText = nil, tableText = nil, text = nil;

      
      name = "\u5929\u5019\u30C1\u30A7\u30C3\u30AF";
      table = [[2, "\u5927\u96E8\u3068\u5F37\u98A8\u3002\u63A2\u7D22\u5224\u5B9A\u306E\u96E3\u6613\u5EA6\u306B+4\u3002"], [3, "\u98A8\u304C\u5F37\u30441\u65E5\u306B\u306A\u308A\u305D\u3046\u3002\u63A2\u7D22\u5224\u5B9A\u306E\u96E3\u6613\u5EA6\u306B+2\u3002"], [4, "\u6674\u308C\u3002\u7279\u306B\u306A\u3057\u3002"], [5, "\u591C\u306E\u9593\u306E\u96E8\u3067\u306C\u304B\u308B\u3080\u3002\u63A2\u7D22\u5224\u5B9A\u306E\u96E3\u6613\u5EA6\u306B+2\u3002"], [6, "\u305D\u308C\u306A\u308A\u306E\u96E8\u8DB3\u3002\u63A2\u7D22\u5224\u5B9A\u306E\u96E3\u6613\u5EA6\u306B+2\u3002"], [7, "\u6674\u308C\u3002\u7279\u306B\u306A\u3057\u3002"], [8, "\u5929\u6C17\u306F\u5927\u8352\u308C\u3002\u63A2\u7D22\u5224\u5B9A\u306E\u96E3\u6613\u5EA6\u306B+4\u3002"], [9, "\u5C0F\u96E8\u304C\u964D\u308B\u3002\u63A2\u7D22\u5224\u5B9A\u306E\u96E3\u6613\u5EA6\u306B+1\u3002"], [10, "\u305D\u308C\u306A\u308A\u306E\u96E8\u8DB3\u3002\u63A2\u7D22\u5224\u5B9A\u306E\u96E3\u6613\u5EA6\u306B+2\u3002"], [11, "\u6674\u308C\u3002\u7279\u306B\u306A\u3057\u3002"], [12, "\u98A8\u304C\u5F37\u30441\u65E5\u306B\u306A\u308A\u305D\u3046\u3002\u63A2\u7D22\u5224\u5B9A\u306E\u96E3\u6613\u5EA6\u306B+2\u3002"]];
      if (roc['$=='](0)) {
        $b = self.$roll(2, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b
      } else {
        
        if ($truthy($rb_lt(roc, 2))) {
          roc = 2};
        if ($truthy($rb_gt(roc, 12))) {
          roc = 12};
        dice = roc;
        diceText = "" + "Choice:" + (roc);
      };
      tableText = self.$get_table_by_number(dice, table);
      text = "" + (name) + "(" + (diceText) + ") \uFF1E " + (dice) + "\uFF1A" + (tableText);
      return text;
    }, $Postman_get_weather_table$8.$$arity = 1);
    return (Opal.def(self, '$get_free_situation_table', $Postman_get_free_situation_table$9 = function $$get_free_situation_table() {
      var $a, $b, self = this, name = nil, table = nil, dice = nil, diceText = nil, tableText = nil, text = nil;

      
      name = "\u81EA\u7531\u884C\u52D5\u30B7\u30C1\u30E5\u30A8\u30FC\u30B7\u30E7\u30F3\u8868";
      table = [[2, "\u4F55\u3092\u3059\u308B\u3067\u3082\u306A\u304F\u3001\u971E\u304C\u304B\u3063\u305F\u3088\u3046\u306A\u591C\u7A7A\u3092\u898B\u4E0A\u3052\u308B\u3002\u3075\u3068\u96A3\u306B\u76EE\u3092\u5411\u3051\u308C\u3070\u3001\u5F7C/\u5F7C\u5973\u304C\u5C45\u305F\u3002\u5F7C/\u5F7C\u5973\u306F\u3001\u3053\u3046\u306A\u308B\u524D\u306E\u591C\u7A7A\u3092\u77E5\u3063\u3066\u3044\u308B\u306E\u3060\u308D\u3046\u304B\u3002"], [3, "\u5922\u3092\u898B\u305F\u3002\u5927\u6226\u306E\u6700\u4E2D\u3001\u8857\u304C\u3001\u4EBA\u304C\u3001\u4E16\u754C\u304C\u713C\u3051\u3066\u3044\u304F\u60AA\u5922\u3092\u3002\u8FFD\u3044\u7ACB\u3066\u3089\u308C\u308B\u3088\u3046\u306B\u3057\u3066\u76EE\u3092\u899A\u307E\u3059\u3068\u3001\u5F7C/\u5F7C\u5973\u304C\u541B\u3092\u898B\u3066\u3044\u305F\u3002\u3000\u2026\u2026\u3082\u3057\u304B\u3057\u3066\u3001\u81EA\u5206\u306F\u3088\u307B\u3069\u3046\u306A\u3055\u308C\u3066\u3044\u305F\u306E\u3060\u308D\u3046\u304B\u3002"], [4, "\u5468\u56F2\u3067\u898B\u3064\u3051\u305F\u30AC\u30E9\u30AF\u30BF\u3092\u4F7F\u3063\u3066\u3001\u3061\u3087\u3063\u3068\u3057\u305F\u30D3\u30C3\u30AF\u30EA\u73A9\u5177\u3092\u4F5C\u3063\u3066\u307F\u305F\u3002\u300C\u5F7C/ \u5F7C\u5973\u300D\u306B\u30B3\u30A4\u30C4\u3092\u3051\u3057\u304B\u3051\u305F\u3089\u3001\u3069\u3093\u306A\u53CD\u5FDC\u3092\u3059\u308B\u3060\u308D\u3046\u304B\uFF1F"], [5, "\u4F7F\u3048\u305D\u3046\u306A\u3082\u306E\u304C\u306A\u3044\u304B\u63A2\u3057\u3066\u3044\u308B\u3068\u3001\u30AB\u30BF\u30F3\u3068\u7269\u97F3\u304C\u3057\u3066\u4F55\u304B\u304C\u843D\u3061\u305F\u3002\u62FE\u3044\u4E0A\u3052\u3066\u307F\u305F\u305D\u308C\u306F\u3001\u304B\u3064\u3066\u3053\u3053\u3067\u751F\u6D3B\u3057\u3066\u3044\u305F\u8AB0\u304B\u306E\u540D\u6B8B\uFF08\u5199\u771F\u3001\u5BB6\u5177\u3001\u73A9\u5177\u7B49\uFF09\u3060\u3063\u305F\u3002"], [6, "\u30C6\u30F3\u30C8\u306E\u4E2D\u3067\u591C\u3092\u904E\u3054\u3057\u3066\u3044\u308B\u3068\u3001\u3075\u3068\u5F7C/\u5F7C\u5973\u3068\u8A71\u3057\u305F\u304F\u3066\u305F\u307E\u3089\u306A\u3044\u6C17\u6301\u3061\u306B\u306A\u3063\u305F\u3002\u8A00\u3063\u3066\u3057\u307E\u3048\u3070\u3001\u591C\u306E\u9759\u3051\u3055\u306B\u5BC2\u3057\u3055\u3092\u899A\u3048\u3066\u3057\u307E\u3063\u305F\u306E\u3060\u3002"], [7, "\u3053\u3053\u307E\u3067\u306E\u914D\u9054\u306E\u8A18\u9332\u3092\u3064\u3051\u3066\u3044\u305F\u3089\u3001\u80CC\u5F8C\u304B\u3089\u8996\u7DDA\u3092\u611F\u3058\u308B\u2026\u2026\uFF01\u3000\u3082\u3057\u3084\u3001\u5F7C/\u5F7C\u5973\u306B\u8997\u304B\u308C\u3066\u3044\u308B\u2026\u2026\uFF01\uFF1F"], [8, "\u5468\u56F2\u3092\u63A2\u7D22\u3057\u3066\u3044\u308B\u3068\u3001\u541B\u4E00\u4EBA\u3067\u306F\u624B\u306E\u5C4A\u304B\u306A\u3044\u3068\u3053\u308D\u306B\u91D1\u5C5E\u88FD\u306E\u7BB1\u304B\u4F55\u304B\u304C\u3042\u308B\u3053\u3068\u306B\u6C17\u3065\u3044\u305F\u3002\u5F7C/\u5F7C\u5973\u306B\u624B\u4F1D\u3063\u3066\u3082\u3089\u3048\u3070\u3001\u53D6\u308C\u308B\u3060\u308D\u3046\u304B\u2026\u2026\uFF1F"], [9, "\u671D\u307E\u3067\u306F\u307E\u3060\u3057\u3070\u3089\u304F\u3042\u308B\u3068\u3044\u3046\u306E\u306B\u3001\u76EE\u304C\u899A\u3081\u3066\u3057\u307E\u3063\u305F\u3002\u4E8C\u5EA6\u5BDD\u3057\u3088\u3046\u306B\u3082\u5BDD\u4ED8\u3051\u305A\u306B\u5C45\u308B\u3068\u3001\u96A3\u3067\u3082\u305E\u3082\u305E\u3068\u52D5\u304F\u6C17\u914D\u304C\u3059\u308B\u3002\u5F7C/\u5F7C\u5973\u3082\u3001\u3069\u3046\u3084\u3089\u540C\u3058\u3089\u3057\u3044\u3002"], [10, "\u4ED6\u611B\u306E\u306A\u3044\u8A71\u3092\u3059\u308B\u3046\u3061\u306B\u3001\u541B\u306F\u5F7C/\u5F7C\u5973\u306B\u554F\u3044\u304B\u3051\u3066\u3044\u305F\u3002\u300C\u4F55\u6545\u3001\u30DD\u30B9\u30C8\u30DE\u30F3\u306B\u306A\u308D\u3046\u3068\u601D\u3063\u305F\u306E\u304B\u300D\u3000\u2026\u2026\u305D\u3046\u3044\u3048\u3070\u3001\u541B\u81EA\u8EAB\u306F\u3069\u3046\u3060\u3063\u305F\u308D\u3046\u304B\u3002"], [11, "\u4FDD\u5B58\u98DF\u306B\u3042\u308A\u3064\u3053\u3046\u3068\u3057\u305F\u305D\u306E\u6642\u3001\u541B\u306F\u6C17\u3065\u3044\u305F\u3002\u4E00\u5339\u306E\u30CD\u30BA\u30DF\u304C\u3001\u5F7C/\u5F7C\u5973\u306E\u8377\u7269\u306E\u4E2D\u306B\u6F5C\u308A\u8FBC\u3082\u3046\u3068\u3057\u3066\u3044\u308B\u3002\u5F7C/\u5F7C\u5973\u306F\u6C17\u3065\u3044\u3066\u3044\u306A\u3044\u304C\u3001\u3053\u306E\u307E\u307E\u3067\u306F\u98DF\u6599\u304C\u5371\u306A\u3044\uFF01"], [12, "\u30C6\u30F3\u30C8\u3092\u8A2D\u55B6\u3057\u3001\u843D\u3061\u7740\u3044\u305F\u9803\u306B\u3075\u3068\u6C17\u3065\u304F\u3002\u3000\u2026\u2026\u8EAB\u4F53\u304C\u71B1\u3044\u3002\u5C11\u3057\u3001\u3060\u308B\u3055\u3082\u3042\u308B\u3088\u3046\u306A\u6C17\u3082\u3059\u308B\u3002\u5927\u3057\u305F\u3053\u3068\u306F\u306A\u3044\u3068\u601D\u3046\u304C\u3001\u5F7C/\u5F7C\u5973\u306B\u76F8\u8AC7\u3057\u3066\u304A\u3044\u305F\u65B9\u304C\u3044\u3044\u3060\u308D\u3046\u304B\u3002"]];
      $b = self.$roll(2, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      tableText = self.$get_table_by_number(dice, table);
      text = "" + (name) + "(" + (diceText) + ") \uFF1E " + (dice) + "\uFF1A" + (tableText);
      return text;
    }, $Postman_get_free_situation_table$9.$$arity = 0), nil) && 'get_free_situation_table';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
