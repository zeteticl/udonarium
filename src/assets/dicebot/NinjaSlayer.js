<<<<<<< HEAD
/* Generated by Opal 0.11.4 */

(function(Opal) {

  function $rb_minus(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);

  }

  function $rb_divide(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);

  }

  function $rb_plus(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);

  }

  function $rb_times(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);

  }

  function $rb_lt(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);

  }

  function $rb_ge(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);

  }

  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;



  Opal.add_stubs(['$freeze', '$attr_reader', '$map', '$to_proc', '$join', '$clearPrefixes', '$!', '$empty?', '$prefixs', '$prefixes', '$class', '$warn', '$gameType', '$setPrefixes', '$attr_accessor', '$gameName', '$getHelpMessage', '$attr_writer', '$rand', '$check_suc', '$roll', '$marshalSignOfInequality', '$unlimitedRollDiceType', '$getD66Value', '$rollDiceAddingUp', '$parren_killer', '$debug', '$isGetOriginalMessage', '$getOriginalMessage', '$=~', '$prefixesPattern', '$last_match', '$removeDiceCommandMessage', '$rollDiceCommandCatched', '$nil?', '$!=', '$sub', '$rollDiceCommand', '$to_s', '$backtrace', '$get_table_by_nD6', '$get_table_by_nDx', '$getTableValue', '$[]', '$-', '$/', '$getD66', '$bcdice', '$get_table_by_number', '$+', '$*', '$<', '$==', '$getDiceListFromDiceText', '$collect', '$split', '$to_i', '$each', '$>=', '$kind_of?', '$lambda', '$call', '$select', '$public_methods', '$===', '$send', '$upcase', '$getTableInfoFromExtraTableText', '$get_table_by_nDx_extratable', '$get_table_by_d66', '$floor', '$%', '$get_table_by_d66_swap', '$raise', '$gsub', '$rollTableMessageDiceText', '$is_a?', '$size', '$inspect']);

  return (function($base, $super, $parent_nesting) {

    function $DiceBot(){};

    var self = $DiceBot = $klass($base, $super, 'DiceBot', $DiceBot);



    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DiceBot_setPrefixes_1, TMP_DiceBot_clearPrefixes_2, TMP_DiceBot_inherited_3, TMP_DiceBot_initialize_4, TMP_DiceBot_postSet_5, TMP_DiceBot_info_6, TMP_DiceBot_gameName_7, TMP_DiceBot_prefixes_8, TMP_DiceBot_setGameType_9, TMP_DiceBot_setSendMode_10, TMP_DiceBot_bcdice$eq_11, TMP_DiceBot_bcdice_12, TMP_DiceBot_rand_13, TMP_DiceBot_check_suc_14, TMP_DiceBot_roll_15, TMP_DiceBot_marshalSignOfInequality_16, TMP_DiceBot_unlimitedRollDiceType_17, TMP_DiceBot_setSortType_18, TMP_DiceBot_d66_19, TMP_DiceBot_rollDiceAddingUp_20, TMP_DiceBot_getHelpMessage_21, TMP_DiceBot_parren_killer_22, TMP_DiceBot_changeText_23, TMP_DiceBot_dice_command_24, TMP_DiceBot_isGetOriginalMessage_25, TMP_DiceBot_removeDiceCommandMessage_26, TMP_DiceBot_rollDiceCommandCatched_27, TMP_DiceBot_rollDiceCommand_28, TMP_DiceBot_setDiceText_29, TMP_DiceBot_setDiffText_30, TMP_DiceBot_dice_command_xRn_31, TMP_DiceBot_check_2D6_32, TMP_DiceBot_check_nD6_33, TMP_DiceBot_check_nD10_34, TMP_DiceBot_check_1D100_35, TMP_DiceBot_check_1D20_36, TMP_DiceBot_get_table_by_2d6_37, TMP_DiceBot_get_table_by_1d6_38, TMP_DiceBot_get_table_by_nD6_39, TMP_DiceBot_get_table_by_nDx_40, TMP_DiceBot_get_table_by_1d3_41, TMP_DiceBot_getD66_42, TMP_DiceBot_get_table_by_d66_swap_43, TMP_DiceBot_get_table_by_d66_44, TMP_DiceBot_getDiceRolledAdditionalText_45, TMP_DiceBot_getDiceRevision_46, TMP_DiceBot_changeDiceValueByDiceText_47, TMP_DiceBot_setRatingTable_48, TMP_DiceBot_isD9_49, TMP_DiceBot_getGrichText_50, TMP_DiceBot_check2dCritical_51, TMP_DiceBot_is2dCritical_52, TMP_DiceBot_should_reroll$q_53, TMP_DiceBot_getDiceList_54, TMP_DiceBot_getDiceListFromDiceText_56, TMP_DiceBot_get_table_by_number_58, TMP_DiceBot_getTableValue_60, TMP_DiceBot_analyzeDiceCommandResultMethod_63, TMP_DiceBot_get_table_by_nDx_extratable_64, TMP_DiceBot_getTableCommandResult_65, TMP_DiceBot_getTableInfoFromExtraTableText_67, TMP_DiceBot_roll_tables_68;



    def.rerollLimitCount = def.diceText = def.d66Type = nil;

    

    Opal.const_set($nesting[0], 'EMPTY_PREFIXES_PATTERN', /(^|\s)(S)?()(\s|$)/i.$freeze());

    (function(self, $parent_nesting) {

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);



      return self.$attr_reader("prefixes")

    })(Opal.get_singleton_class(self), $nesting);

    (function(self, $parent_nesting) {

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);



      return self.$attr_reader("prefixesPattern")

    })(Opal.get_singleton_class(self), $nesting);

    Opal.defs(self, '$setPrefixes', TMP_DiceBot_setPrefixes_1 = function $$setPrefixes(prefixes) {

      var self = this;



      

      self.prefixes = $send(prefixes, 'map', [], "freeze".$to_proc()).$freeze();

      self.prefixesPattern = new RegExp("" + "(^|\\s)(S)?(" + (prefixes.$join("|")) + ")(\\s|$)", 'i').$freeze();

      return self;

    }, TMP_DiceBot_setPrefixes_1.$$arity = 1);

    Opal.defs(self, '$clearPrefixes', TMP_DiceBot_clearPrefixes_2 = function $$clearPrefixes() {

      var self = this;



      

      self.prefixes = [].$freeze();

      self.prefixesPattern = Opal.const_get_relative($nesting, 'EMPTY_PREFIXES_PATTERN');

      return self;

    }, TMP_DiceBot_clearPrefixes_2.$$arity = 0);

    Opal.defs(self, '$inherited', TMP_DiceBot_inherited_3 = function $$inherited(subclass) {

      var self = this;



      return subclass.$clearPrefixes()

    }, TMP_DiceBot_inherited_3.$$arity = 1);

    self.$clearPrefixes();

    (Opal.class_variable_set($DiceBot, '@@bcdice', nil));

    (Opal.class_variable_set($DiceBot, '@@DEFAULT_SEND_MODE', 2));

    

    Opal.defn(self, '$initialize', TMP_DiceBot_initialize_4 = function $$initialize() {

      var $a, self = this;



      

      self.sendMode = (($a = $DiceBot.$$cvars['@@DEFAULT_SEND_MODE']) == null ? nil : $a);

      self.sortType = 0;

      self.sameDiceRerollCount = 0;

      self.sameDiceRerollType = 0;

      self.d66Type = 1;

      self.isPrintMaxDice = false;

      self.upplerRollThreshold = 0;

      self.unlimitedRollDiceType = 0;

      self.rerollNumber = 0;

      self.defaultSuccessTarget = "";

      self.rerollLimitCount = 10000;

      self.fractionType = "omit";

      self.gameType = "DiceBot";

      if ($truthy(($truthy($a = self.$prefixs()['$empty?']()['$!']()) ? self.$class().$prefixes()['$empty?']() : $a))) {

        

        self.$warn("" + (self.$gameType()) + ": #prefixs is deprecated. Please use .setPrefixes.");

        return self.$class().$setPrefixes(self.$prefixs());

        } else {

        return nil

      };

    }, TMP_DiceBot_initialize_4.$$arity = 0);

    self.$attr_accessor("rerollLimitCount");

    self.$attr_reader("sendMode", "sameDiceRerollCount", "sameDiceRerollType", "d66Type");

    self.$attr_reader("isPrintMaxDice", "upplerRollThreshold");

    self.$attr_reader("defaultSuccessTarget", "rerollNumber", "fractionType");

    

    Opal.defn(self, '$postSet', TMP_DiceBot_postSet_5 = function $$postSet() {

      var self = this;



      return nil

    }, TMP_DiceBot_postSet_5.$$arity = 0);

    

    Opal.defn(self, '$info', TMP_DiceBot_info_6 = function $$info() {

      var self = this;



      return $hash2(["name", "gameType", "prefixs", "info"], {"name": self.$gameName(), "gameType": self.$gameType(), "prefixs": self.$class().$prefixes(), "info": self.$getHelpMessage()})

    }, TMP_DiceBot_info_6.$$arity = 0);

    

    Opal.defn(self, '$gameName', TMP_DiceBot_gameName_7 = function $$gameName() {

      var self = this;



      return self.$gameType()

    }, TMP_DiceBot_gameName_7.$$arity = 0);

    

    Opal.defn(self, '$prefixes', TMP_DiceBot_prefixes_8 = function $$prefixes() {

      var self = this;



      return self.$class().$prefixes()

    }, TMP_DiceBot_prefixes_8.$$arity = 0);

    Opal.alias(self, "prefixs", "prefixes");

    self.$attr_reader("gameType");

    

    Opal.defn(self, '$setGameType', TMP_DiceBot_setGameType_9 = function $$setGameType(type) {

      var self = this;



      return (self.gameType = type)

    }, TMP_DiceBot_setGameType_9.$$arity = 1);

    

    Opal.defn(self, '$setSendMode', TMP_DiceBot_setSendMode_10 = function $$setSendMode(m) {

      var self = this;



      return (self.sendMode = m)

    }, TMP_DiceBot_setSendMode_10.$$arity = 1);

    self.$attr_writer("upplerRollThreshold");

    

    Opal.defn(self, '$bcdice=', TMP_DiceBot_bcdice$eq_11 = function(b) {

      var self = this;



      return (Opal.class_variable_set($DiceBot, '@@bcdice', b))

    }, TMP_DiceBot_bcdice$eq_11.$$arity = 1);

    

    Opal.defn(self, '$bcdice', TMP_DiceBot_bcdice_12 = function $$bcdice() {

      var $a, self = this;



      return (($a = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $a)

    }, TMP_DiceBot_bcdice_12.$$arity = 0);

    

    Opal.defn(self, '$rand', TMP_DiceBot_rand_13 = function $$rand(max) {

      var $a, self = this;



      return (($a = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $a).$rand(max)

    }, TMP_DiceBot_rand_13.$$arity = 1);

    

    Opal.defn(self, '$check_suc', TMP_DiceBot_check_suc_14 = function $$check_suc($a_rest) {

      var $b, self = this, params;



      var $args_len = arguments.length, $rest_len = $args_len - 0;

      if ($rest_len < 0) { $rest_len = 0; }

      params = new Array($rest_len);

      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {

        params[$arg_idx - 0] = arguments[$arg_idx];

      }

      return $send((($b = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $b), 'check_suc', Opal.to_a(params))

    }, TMP_DiceBot_check_suc_14.$$arity = -1);

    

    Opal.defn(self, '$roll', TMP_DiceBot_roll_15 = function $$roll($a_rest) {

      var $b, self = this, args;



      var $args_len = arguments.length, $rest_len = $args_len - 0;

      if ($rest_len < 0) { $rest_len = 0; }

      args = new Array($rest_len);

      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {

        args[$arg_idx - 0] = arguments[$arg_idx];

      }

      return $send((($b = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $b), 'roll', Opal.to_a(args))

    }, TMP_DiceBot_roll_15.$$arity = -1);

    

    Opal.defn(self, '$marshalSignOfInequality', TMP_DiceBot_marshalSignOfInequality_16 = function $$marshalSignOfInequality($a_rest) {

      var $b, self = this, args;



      var $args_len = arguments.length, $rest_len = $args_len - 0;

      if ($rest_len < 0) { $rest_len = 0; }

      args = new Array($rest_len);

      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {

        args[$arg_idx - 0] = arguments[$arg_idx];

      }

      return $send((($b = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $b), 'marshalSignOfInequality', Opal.to_a(args))

    }, TMP_DiceBot_marshalSignOfInequality_16.$$arity = -1);

    

    Opal.defn(self, '$unlimitedRollDiceType', TMP_DiceBot_unlimitedRollDiceType_17 = function $$unlimitedRollDiceType() {

      var $a, self = this;



      return (($a = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $a).$unlimitedRollDiceType()

    }, TMP_DiceBot_unlimitedRollDiceType_17.$$arity = 0);

    self.$attr_reader("sortType");

    

    Opal.defn(self, '$setSortType', TMP_DiceBot_setSortType_18 = function $$setSortType(s) {

      var self = this;



      return (self.sortType = s)

    }, TMP_DiceBot_setSortType_18.$$arity = 1);

    

    Opal.defn(self, '$d66', TMP_DiceBot_d66_19 = function $$d66($a_rest) {

      var $b, self = this, args;



      var $args_len = arguments.length, $rest_len = $args_len - 0;

      if ($rest_len < 0) { $rest_len = 0; }

      args = new Array($rest_len);

      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {

        args[$arg_idx - 0] = arguments[$arg_idx];

      }

      return $send((($b = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $b), 'getD66Value', Opal.to_a(args))

    }, TMP_DiceBot_d66_19.$$arity = -1);

    

    Opal.defn(self, '$rollDiceAddingUp', TMP_DiceBot_rollDiceAddingUp_20 = function $$rollDiceAddingUp($a_rest) {

      var $b, self = this, arg;



      var $args_len = arguments.length, $rest_len = $args_len - 0;

      if ($rest_len < 0) { $rest_len = 0; }

      arg = new Array($rest_len);

      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {

        arg[$arg_idx - 0] = arguments[$arg_idx];

      }

      return $send((($b = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $b), 'rollDiceAddingUp', Opal.to_a(arg))

    }, TMP_DiceBot_rollDiceAddingUp_20.$$arity = -1);

    

    Opal.defn(self, '$getHelpMessage', TMP_DiceBot_getHelpMessage_21 = function $$getHelpMessage() {

      var self = this;



      return ""

    }, TMP_DiceBot_getHelpMessage_21.$$arity = 0);

    

    Opal.defn(self, '$parren_killer', TMP_DiceBot_parren_killer_22 = function $$parren_killer(string) {

      var $a, self = this;



      return (($a = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $a).$parren_killer(string)

    }, TMP_DiceBot_parren_killer_22.$$arity = 1);

    

    Opal.defn(self, '$changeText', TMP_DiceBot_changeText_23 = function $$changeText(string) {

      var self = this;



      

      self.$debug("DiceBot.parren_killer_add called");

      return string;

    }, TMP_DiceBot_changeText_23.$$arity = 1);

    

    Opal.defn(self, '$dice_command', TMP_DiceBot_dice_command_24 = function $$dice_command(string, nick_e) {

      var $a, $b, self = this, secret_flg = nil, secretMarker = nil, command = nil, output_msg = nil;



      

      if ($truthy(self.$isGetOriginalMessage())) {

        string = (($a = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $a).$getOriginalMessage()};

      self.$debug("dice_command Begin string", string);

      secret_flg = false;

      if ($truthy(self.$class().$prefixesPattern()['$=~'](string))) {

        } else {

        

        self.$debug("not match in prefixes");

        return ["1", secret_flg];

      };

      secretMarker = Opal.const_get_relative($nesting, 'Regexp').$last_match(2);

      command = Opal.const_get_relative($nesting, 'Regexp').$last_match(3);

      command = self.$removeDiceCommandMessage(command);

      self.$debug("dicebot after command", command);

      self.$debug("match");

      $b = self.$rollDiceCommandCatched(command), $a = Opal.to_ary($b), (output_msg = ($a[0] == null ? nil : $a[0])), (secret_flg = ($a[1] == null ? nil : $a[1])), $b;

      if ($truthy(($truthy($a = output_msg['$nil?']()) ? $a : output_msg['$empty?']()))) {

        output_msg = "1"};

      secret_flg = ($truthy($a = secret_flg) ? $a : false);

      if ($truthy(output_msg['$!=']("1"))) {

        output_msg = "" + (nick_e) + ": " + (output_msg)};

      if ($truthy(secretMarker)) {

        if ($truthy(output_msg['$!=']("1"))) {

          secret_flg = true}};

      return [output_msg, secret_flg];

    }, TMP_DiceBot_dice_command_24.$$arity = 2);

    

    Opal.defn(self, '$isGetOriginalMessage', TMP_DiceBot_isGetOriginalMessage_25 = function $$isGetOriginalMessage() {

      var self = this;



      return false

    }, TMP_DiceBot_isGetOriginalMessage_25.$$arity = 0);

    

    Opal.defn(self, '$removeDiceCommandMessage', TMP_DiceBot_removeDiceCommandMessage_26 = function $$removeDiceCommandMessage(command) {

      var self = this;



      return command.$sub(/[\s　].+/, "")

    }, TMP_DiceBot_removeDiceCommandMessage_26.$$arity = 1);

    

    Opal.defn(self, '$rollDiceCommandCatched', TMP_DiceBot_rollDiceCommandCatched_27 = function $$rollDiceCommandCatched(command) {

      var $a, $b, self = this, result = nil, secret_flg = nil, e = nil;



      

      result = nil;

      

      try {

        

        self.$debug("call rollDiceCommand command", command);

        $b = self.$rollDiceCommand(command), $a = Opal.to_ary($b), (result = ($a[0] == null ? nil : $a[0])), (secret_flg = ($a[1] == null ? nil : $a[1])), $b;

      } catch ($err) {

        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {e = $err;

          try {

            self.$debug("executeCommand exception", e.$to_s(), e.$backtrace().$join("\n"))

          } finally { Opal.pop_exception() }

        } else { throw $err; }

      };;

      self.$debug("rollDiceCommand result", result);

      return [result, secret_flg];

    }, TMP_DiceBot_rollDiceCommandCatched_27.$$arity = 1);

    

    Opal.defn(self, '$rollDiceCommand', TMP_DiceBot_rollDiceCommand_28 = function $$rollDiceCommand(_command) {

      var self = this;



      return nil

    }, TMP_DiceBot_rollDiceCommand_28.$$arity = 1);

    

    Opal.defn(self, '$setDiceText', TMP_DiceBot_setDiceText_29 = function $$setDiceText(diceText) {

      var self = this;



      

      self.$debug("setDiceText diceText", diceText);

      return (self.diceText = diceText);

    }, TMP_DiceBot_setDiceText_29.$$arity = 1);

    

    Opal.defn(self, '$setDiffText', TMP_DiceBot_setDiffText_30 = function $$setDiffText(diffText) {

      var self = this;



      return (self.diffText = diffText)

    }, TMP_DiceBot_setDiffText_30.$$arity = 1);

    

    Opal.defn(self, '$dice_command_xRn', TMP_DiceBot_dice_command_xRn_31 = function $$dice_command_xRn(_string, _nick_e) {

      var self = this;



      return ""

    }, TMP_DiceBot_dice_command_xRn_31.$$arity = 2);

    

    Opal.defn(self, '$check_2D6', TMP_DiceBot_check_2D6_32 = function $$check_2D6(_total_n, _dice_n, _signOfInequality, _diff, _dice_cnt, _dice_max, _n1, _n_max) {

      var self = this;



      return ""

    }, TMP_DiceBot_check_2D6_32.$$arity = 8);

    

    Opal.defn(self, '$check_nD6', TMP_DiceBot_check_nD6_33 = function $$check_nD6(_total_n, _dice_n, _signOfInequality, _diff, _dice_cnt, _dice_max, _n1, _n_max) {

      var self = this;



      return ""

    }, TMP_DiceBot_check_nD6_33.$$arity = 8);

    

    Opal.defn(self, '$check_nD10', TMP_DiceBot_check_nD10_34 = function $$check_nD10(_total_n, _dice_n, _signOfInequality, _diff, _dice_cnt, _dice_max, _n1, _n_max) {

      var self = this;



      return ""

    }, TMP_DiceBot_check_nD10_34.$$arity = 8);

    

    Opal.defn(self, '$check_1D100', TMP_DiceBot_check_1D100_35 = function $$check_1D100(_total_n, _dice_n, _signOfInequality, _diff, _dice_cnt, _dice_max, _n1, _n_max) {

      var self = this;



      return ""

    }, TMP_DiceBot_check_1D100_35.$$arity = 8);

    

    Opal.defn(self, '$check_1D20', TMP_DiceBot_check_1D20_36 = function $$check_1D20(_total_n, _dice_n, _signOfInequality, _diff, _dice_cnt, _dice_max, _n1, _n_max) {

      var self = this;



      return ""

    }, TMP_DiceBot_check_1D20_36.$$arity = 8);

    

    Opal.defn(self, '$get_table_by_2d6', TMP_DiceBot_get_table_by_2d6_37 = function $$get_table_by_2d6(table) {

      var self = this;



      return self.$get_table_by_nD6(table, 2)

    }, TMP_DiceBot_get_table_by_2d6_37.$$arity = 1);

    

    Opal.defn(self, '$get_table_by_1d6', TMP_DiceBot_get_table_by_1d6_38 = function $$get_table_by_1d6(table) {

      var self = this;



      return self.$get_table_by_nD6(table, 1)

    }, TMP_DiceBot_get_table_by_1d6_38.$$arity = 1);

    

    Opal.defn(self, '$get_table_by_nD6', TMP_DiceBot_get_table_by_nD6_39 = function $$get_table_by_nD6(table, count) {

      var self = this;



      return self.$get_table_by_nDx(table, count, 6)

    }, TMP_DiceBot_get_table_by_nD6_39.$$arity = 2);

    

    Opal.defn(self, '$get_table_by_nDx', TMP_DiceBot_get_table_by_nDx_40 = function $$get_table_by_nDx(table, count, diceType) {

      var $a, $b, self = this, num = nil, text = nil;



      

      $b = self.$roll(count, diceType), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), $b;

      text = self.$getTableValue(table['$[]']($rb_minus(num, count)));

      if ($truthy(text['$nil?']())) {

        return ["1", 0]};

      return [text, num];

    }, TMP_DiceBot_get_table_by_nDx_40.$$arity = 3);

    

    Opal.defn(self, '$get_table_by_1d3', TMP_DiceBot_get_table_by_1d3_41 = function $$get_table_by_1d3(table) {

      var $a, $b, self = this, count = nil, num = nil, index = nil, text = nil;



      

      self.$debug("get_table_by_1d3");

      count = 1;

      $b = self.$roll(count, 6), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), $b;

      self.$debug("num", num);

      index = $rb_divide($rb_minus(num, 1), 2);

      self.$debug("index", index);

      text = table['$[]'](index);

      if ($truthy(text['$nil?']())) {

        return ["1", 0]};

      return [text, num];

    }, TMP_DiceBot_get_table_by_1d3_41.$$arity = 1);

    

    Opal.defn(self, '$getD66', TMP_DiceBot_getD66_42 = function $$getD66(isSwap) {

      var self = this;



      return self.$bcdice().$getD66(isSwap)

    }, TMP_DiceBot_getD66_42.$$arity = 1);

    

    Opal.defn(self, '$get_table_by_d66_swap', TMP_DiceBot_get_table_by_d66_swap_43 = function $$get_table_by_d66_swap(table) {

      var self = this, isSwap = nil, number = nil;



      

      isSwap = true;

      number = self.$bcdice().$getD66(isSwap);

      return [self.$get_table_by_number(number, table), number];

    }, TMP_DiceBot_get_table_by_d66_swap_43.$$arity = 1);

    

    Opal.defn(self, '$get_table_by_d66', TMP_DiceBot_get_table_by_d66_44 = function $$get_table_by_d66(table) {

      var $a, $b, self = this, dice1 = nil, dice2 = nil, num = nil, text = nil, indexText = nil;



      

      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice1 = ($a[0] == null ? nil : $a[0])), $b;

      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice2 = ($a[0] == null ? nil : $a[0])), $b;

      num = $rb_plus($rb_times($rb_minus(dice1, 1), 6), $rb_minus(dice2, 1));

      text = table['$[]'](num);

      indexText = "" + (dice1) + (dice2);

      if ($truthy(text['$nil?']())) {

        return ["1", indexText]};

      return [text, indexText];

    }, TMP_DiceBot_get_table_by_d66_44.$$arity = 1);

    

    Opal.defn(self, '$getDiceRolledAdditionalText', TMP_DiceBot_getDiceRolledAdditionalText_45 = function $$getDiceRolledAdditionalText(_n1, _n_max, _dice_max) {

      var self = this;



      return ""

    }, TMP_DiceBot_getDiceRolledAdditionalText_45.$$arity = 3);

    

    Opal.defn(self, '$getDiceRevision', TMP_DiceBot_getDiceRevision_46 = function $$getDiceRevision(_n_max, _dice_max, _total_n) {

      var self = this;



      return ["", 0]

    }, TMP_DiceBot_getDiceRevision_46.$$arity = 3);

    

    Opal.defn(self, '$changeDiceValueByDiceText', TMP_DiceBot_changeDiceValueByDiceText_47 = function $$changeDiceValueByDiceText(dice_now, _dice_str, _isCheckSuccess, _dice_max) {

      var self = this;



      return dice_now

    }, TMP_DiceBot_changeDiceValueByDiceText_47.$$arity = 4);

    

    Opal.defn(self, '$setRatingTable', TMP_DiceBot_setRatingTable_48 = function $$setRatingTable(_nick_e, _tnick, _channel_to_list) {

      var self = this;



      return "1"

    }, TMP_DiceBot_setRatingTable_48.$$arity = 3);

    

    Opal.defn(self, '$isD9', TMP_DiceBot_isD9_49 = function $$isD9() {

      var self = this;



      return false

    }, TMP_DiceBot_isD9_49.$$arity = 0);

    

    Opal.defn(self, '$getGrichText', TMP_DiceBot_getGrichText_50 = function $$getGrichText(_numberSpot1, _dice_cnt_total, _suc) {

      var self = this;



      return ""

    }, TMP_DiceBot_getGrichText_50.$$arity = 3);

    

    Opal.defn(self, '$check2dCritical', TMP_DiceBot_check2dCritical_51 = function $$check2dCritical(critical, dice_new, dice_arry, loop_count) {

      var self = this;



      return nil

    }, TMP_DiceBot_check2dCritical_51.$$arity = 4);

    

    Opal.defn(self, '$is2dCritical', TMP_DiceBot_is2dCritical_52 = function $$is2dCritical() {

      var self = this;



      return false

    }, TMP_DiceBot_is2dCritical_52.$$arity = 0);

    

    Opal.defn(self, '$should_reroll?', TMP_DiceBot_should_reroll$q_53 = function(loop_count) {

      var $a, self = this;



      return ($truthy($a = $rb_lt(loop_count, self.rerollLimitCount)) ? $a : self.rerollLimitCount['$=='](0))

    }, TMP_DiceBot_should_reroll$q_53.$$arity = 1);

    

    Opal.defn(self, '$getDiceList', TMP_DiceBot_getDiceList_54 = function $$getDiceList() {

      var self = this;



      return self.$getDiceListFromDiceText(self.diceText)

    }, TMP_DiceBot_getDiceList_54.$$arity = 0);

    

    Opal.defn(self, '$getDiceListFromDiceText', TMP_DiceBot_getDiceListFromDiceText_56 = function $$getDiceListFromDiceText(diceText) {

      var TMP_55, self = this, diceList = nil, diceString = nil;



      

      self.$debug("getDiceList diceText", diceText);

      diceList = [];

      if ($truthy(/\[([\d,]+)\]/['$=~'](diceText))) {

        diceText = Opal.const_get_relative($nesting, 'Regexp').$last_match(1)};

      if ($truthy(/([\d,]+)/['$=~'](diceText))) {

        } else {

        return diceList

      };

      diceString = Opal.const_get_relative($nesting, 'Regexp').$last_match(1);

      diceList = $send(diceString.$split(/,/), 'collect', [], (TMP_55 = function(i){var self = TMP_55.$$s || this;

if (i == null) i = nil;

      return i.$to_i()}, TMP_55.$$s = self, TMP_55.$$arity = 1, TMP_55));

      self.$debug("diceList", diceList);

      return diceList;

    }, TMP_DiceBot_getDiceListFromDiceText_56.$$arity = 1);

    

    Opal.defn(self, '$get_table_by_number', TMP_DiceBot_get_table_by_number_58 = function $$get_table_by_number(index, table, default$) {try {



      var TMP_57, self = this;



      if (default$ == null) {

        default$ = "1";

      }

      

      $send(table, 'each', [], (TMP_57 = function(item){var self = TMP_57.$$s || this, number = nil;

if (item == null) item = nil;

      

        number = item['$[]'](0);

        if ($truthy($rb_ge(number, index))) {

          Opal.ret(self.$getTableValue(item['$[]'](1)))

          } else {

          return nil

        };}, TMP_57.$$s = self, TMP_57.$$arity = 1, TMP_57));

      return self.$getTableValue(default$);

      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }

    }, TMP_DiceBot_get_table_by_number_58.$$arity = -3);

    

    Opal.defn(self, '$getTableValue', TMP_DiceBot_getTableValue_60 = function $$getTableValue(data) {try {



      var TMP_59, self = this, lambdaBlock = nil;



      

      if ($truthy(data['$kind_of?'](Opal.const_get_relative($nesting, 'Proc')))) {

        

        lambdaBlock = $send(self, 'lambda', [], (TMP_59 = function(){var self = TMP_59.$$s || this;



        Opal.ret(data.$call())}, TMP_59.$$s = self, TMP_59.$$arity = 0, TMP_59));

        return lambdaBlock.$call();};

      return data;

      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }

    }, TMP_DiceBot_getTableValue_60.$$arity = 1);

    

    Opal.defn(self, '$analyzeDiceCommandResultMethod', TMP_DiceBot_analyzeDiceCommandResultMethod_63 = function $$analyzeDiceCommandResultMethod(command) {try {



      var TMP_61, TMP_62, self = this, methodList = nil;



      

      methodList = $send(self.$public_methods(), 'select', [], (TMP_61 = function(method){var self = TMP_61.$$s || this;

if (method == null) method = nil;

      return /^get.+DiceCommandResult$/['$==='](method.$to_s())}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61));

      $send(methodList, 'each', [], (TMP_62 = function(method){var self = TMP_62.$$s || this, result = nil;

if (method == null) method = nil;

      

        result = self.$send(method, command);

        if ($truthy(result['$nil?']())) {

          return nil

          } else {

          Opal.ret(result)

        };}, TMP_62.$$s = self, TMP_62.$$arity = 1, TMP_62));

      return nil;

      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }

    }, TMP_DiceBot_analyzeDiceCommandResultMethod_63.$$arity = 1);

    

    Opal.defn(self, '$get_table_by_nDx_extratable', TMP_DiceBot_get_table_by_nDx_extratable_64 = function $$get_table_by_nDx_extratable(table, count, diceType) {

      var $a, $b, self = this, number = nil, diceText = nil, text = nil;



      

      $b = self.$roll(count, diceType), $a = Opal.to_ary($b), (number = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;

      text = self.$getTableValue(table['$[]']($rb_minus(number, count)));

      return [text, number, diceText];

    }, TMP_DiceBot_get_table_by_nDx_extratable_64.$$arity = 3);

    

    Opal.defn(self, '$getTableCommandResult', TMP_DiceBot_getTableCommandResult_65 = function $$getTableCommandResult(command, tables, isPrintDiceText) {

      var $a, $b, $c, $d, self = this, info = nil, name = nil, type = nil, table = nil, $case = nil, count = nil, diceType = nil, limit = nil, item = nil, value = nil, output = nil, diceText = nil, text = nil, number = nil;



      if (isPrintDiceText == null) {

        isPrintDiceText = true;

      }

      

      info = tables['$[]'](command.$upcase());

      if ($truthy(info['$nil?']())) {

        return nil};

      name = info['$[]']("name");

      type = info['$[]']("type").$upcase();

      table = info['$[]']("table");

      if ($truthy(($truthy($a = type['$==']("D66")) ? self.d66Type['$=='](2) : $a))) {

        type = "D66S"};

      $b = (function() {$case = type;

      if (/(\d+)D(\d+)/['$===']($case)) {

      count = Opal.const_get_relative($nesting, 'Regexp').$last_match(1).$to_i();

      diceType = Opal.const_get_relative($nesting, 'Regexp').$last_match(2).$to_i();

      limit = $rb_minus($rb_times(diceType, count), $rb_minus(count, 1));

      table = self.$getTableInfoFromExtraTableText(table, limit);

      return self.$get_table_by_nDx_extratable(table, count, diceType);}

      else if ("D66"['$===']($case) || "D66N"['$===']($case)) {

      table = self.$getTableInfoFromExtraTableText(table, 36);

      $d = self.$get_table_by_d66(table), $c = Opal.to_ary($d), (item = ($c[0] == null ? nil : $c[0])), (value = ($c[1] == null ? nil : $c[1])), $d;

      value = value.$to_i();

      output = item['$[]'](1);

      diceText = $rb_plus($rb_plus($rb_divide(value, 10).$floor().$to_s(), ","), value['$%'](10).$to_s());

      return [output, value, diceText];}

      else if ("D66S"['$===']($case)) {

      table = self.$getTableInfoFromExtraTableText(table, 21);

      $d = self.$get_table_by_d66_swap(table), $c = Opal.to_ary($d), (output = ($c[0] == null ? nil : $c[0])), (value = ($c[1] == null ? nil : $c[1])), $d;

      value = value.$to_i();

      diceText = $rb_plus($rb_plus($rb_divide(value, 10).$floor().$to_s(), ","), value['$%'](10).$to_s());

      return [output, value, diceText];}

      else {return self.$raise("" + "invalid dice Type " + (command))}})(), $a = Opal.to_ary($b), (text = ($a[0] == null ? nil : $a[0])), (number = ($a[1] == null ? nil : $a[1])), (diceText = ($a[2] == null ? nil : $a[2])), $b;

      text = text.$gsub("\\n", "\n");

      text = (($a = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $a).$rollTableMessageDiceText(text);

      if ($truthy(text['$nil?']())) {

        return nil};

      if ($truthy(($truthy($a = isPrintDiceText) ? diceText['$nil?']()['$!']() : $a))) {

        return "" + (name) + "(" + (number) + "[" + (diceText) + "]) ＞ " + (text)};

      return "" + (name) + "(" + (number) + ") ＞ " + (text);

    }, TMP_DiceBot_getTableCommandResult_65.$$arity = -3);

    

    Opal.defn(self, '$getTableInfoFromExtraTableText', TMP_DiceBot_getTableInfoFromExtraTableText_67 = function $$getTableInfoFromExtraTableText(text, count) {

      var TMP_66, self = this, newTable = nil;



      if (count == null) {

        count = nil;

      }

      

      if ($truthy(text['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {

        text = text.$split(/\n/)};

      newTable = $send(text, 'map', [], (TMP_66 = function(item){var self = TMP_66.$$s || this, $a;

if (item == null) item = nil;

      if ($truthy(($truthy($a = item['$is_a?'](Opal.const_get_relative($nesting, 'String'))) ? /^(\d+):(.*)/['$==='](item) : $a))) {

          return [Opal.const_get_relative($nesting, 'Regexp').$last_match(1).$to_i(), Opal.const_get_relative($nesting, 'Regexp').$last_match(2)]

          } else {

          return item

        }}, TMP_66.$$s = self, TMP_66.$$arity = 1, TMP_66));

      if ($truthy(count['$nil?']())) {

      } else if ($truthy(newTable.$size()['$!='](count))) {

        self.$raise("" + "invalid table size:" + (newTable.$size()) + "\n" + (newTable.$inspect()))};

      return newTable;

    }, TMP_DiceBot_getTableInfoFromExtraTableText_67.$$arity = -2);

    return (Opal.defn(self, '$roll_tables', TMP_DiceBot_roll_tables_68 = function $$roll_tables(command, tables) {

      var self = this, table = nil;



      

      table = tables['$[]'](command.$upcase());

      if ($truthy(table)) {

        } else {

        return nil

      };

      return table.$roll(self.$bcdice());

    }, TMP_DiceBot_roll_tables_68.$$arity = 2), nil) && 'roll_tables';

  })($nesting[0], null, $nesting)

})(Opal);



/* Generated by Opal 0.11.4 */

(function(Opal) {

  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;



  Opal.add_stubs(['$exit']);

  return Opal.const_get_relative($nesting, 'Kernel').$exit()

})(Opal);

Opal.loaded(["diceBot/DiceBot"]);
/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$setPrefixes', '$freeze', '$new', '$match', '$bRollCommand', '$[]', '$integerValueOfDifficulty', '$debug', '$parse', '$===', '$executeEV', '$executeAT', '$executeEL', '$executeSB', '$private', '$parseEV', '$last_match', '$parseAT', '$parseEL', '$to_i', '$num', '$difficulty', '$sub', '$bdice', '$bcdice', '$targetValue', '$raise', '$>', '$map', '$split', '$to_proc', '$length', '$select', '$==', '$>=', '$+', '$get_table_by_1d6', '$fetch', '$upcase']);
  
  self.$require("diceBot/DiceBot");
  return (function($base, $super, $parent_nesting) {
    function $NinjaSlayer(){};
    var self = $NinjaSlayer = $klass($base, $super, 'NinjaSlayer', $NinjaSlayer);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NinjaSlayer_initialize_1, TMP_NinjaSlayer_gameName_2, TMP_NinjaSlayer_gameType_3, TMP_NinjaSlayer_getHelpMessage_4, TMP_NinjaSlayer_changeText_5, TMP_NinjaSlayer_rollDiceCommand_6, TMP_NinjaSlayer_parse_7, TMP_NinjaSlayer_parseEV_8, TMP_NinjaSlayer_parseAT_9, TMP_NinjaSlayer_parseEL_10, TMP_NinjaSlayer_executeEV_11, TMP_NinjaSlayer_executeAT_13, TMP_NinjaSlayer_executeEL_16, TMP_NinjaSlayer_executeSB_17, TMP_NinjaSlayer_integerValueOfDifficulty_18, TMP_NinjaSlayer_bRollCommand_19;

    
    self.$setPrefixes(["NJ\\d+.*", "EV\\d+.*", "AT\\d+.*", "EL\\d+.*", "SB"]);
    
    Opal.defn(self, '$initialize', TMP_NinjaSlayer_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_NinjaSlayer_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_NinjaSlayer_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_NinjaSlayer_initialize_1, false), $zuper, $iter);
      return (self.defaultSuccessTarget = ">=4");
    }, TMP_NinjaSlayer_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_NinjaSlayer_gameName_2 = function $$gameName() {
      var self = this;

      return "ニンジャスレイヤーTRPG"
    }, TMP_NinjaSlayer_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_NinjaSlayer_gameType_3 = function $$gameType() {
      var self = this;

      return "NinjaSlayer"
    }, TMP_NinjaSlayer_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_NinjaSlayer_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "・通常判定　NJ\n" + "　NJx[y] or NJx@y or NJx\n" + "　x=判定ダイス y=難易度 省略時はNORMAL(4)\n" + "　例:NJ4@H 難易度HARD、判定ダイス4で判定\n" + "・回避判定　EV\n" + "　EVx[y]/z or EVx@y/z or EVx/z or EVx[y] or EVx@y or EVx\n" + "　x=判定ダイス y=難易度 z=攻撃側の成功数(省略可) 難易度を省略時はNORMAL(4)\n" + "　攻撃側の成功数を指定した場合、カウンターカラテ発生時には表示\n" + "　例:EV5/3 難易度NORMAL(省略時)、判定ダイス5、攻撃側の成功数3で判定\n" + "・近接攻撃　AT\n" + "　ATx[y] or ATx@y or ATx\n" + "　x=判定ダイス y=難易度 省略時はNORMAL(4) サツバツ！発生時には表示\n" + "　例:AT6[H] 難易度HARD,判定ダイス5で近接攻撃の判定\n" + "・サツバツ判定　SB\n" + "・電子戦　EL\n" + "　ELx[y] or ELx@y or ELx\n" + "　x=判定ダイス y=難易度 省略時はNORMAL(4)\n" + "　例:EL6[H] 難易度HARD,判定ダイス5で電子戦の判定\n" + "\n" + "・難易度\n" + "　KIDS=K,EASY=E,NORMAL=N,HARD=H,ULTRA HARD=UH 数字にも対応\n"
    }, TMP_NinjaSlayer_getHelpMessage_4.$$arity = 0);
    Opal.const_set($nesting[0], 'DIFFICULTY_VALUE_RE', /UH|[2-6KENH]/i.$freeze());
    Opal.const_set($nesting[0], 'DIFFICULTY_RE', new RegExp("" + "\\[(" + (Opal.const_get_relative($nesting, 'DIFFICULTY_VALUE_RE')) + ")\\]|@(" + (Opal.const_get_relative($nesting, 'DIFFICULTY_VALUE_RE')) + ")", 'i').$freeze());
    Opal.const_set($nesting[0], 'NJ_RE', /^NJ(\d+)(?:\[(UH|[2-6KENH])\]|@(UH|[2-6KENH]))?$/i.$freeze());
    Opal.const_set($nesting[0], 'EV_RE', /^EV(\d+)(?:\[(UH|[2-6KENH])\]|@(UH|[2-6KENH]))?(?:\/(\d+))?$/i.$freeze());
    Opal.const_set($nesting[0], 'AT_RE', /^AT(\d+)(?:\[(UH|[2-6KENH])\]|@(UH|[2-6KENH]))?$/i.$freeze());
    Opal.const_set($nesting[0], 'EL_RE', /^EL(\d+)(?:\[(UH|[2-6KENH])\]|@(UH|[2-6KENH]))?$/i.$freeze());
    Opal.const_set($nesting[0], 'B_ROLL_RESULT_HEAD_RE', /^[^(]+/.$freeze());
    Opal.const_set($nesting[0], 'EV', Opal.const_get_relative($nesting, 'Struct').$new("num", "difficulty", "targetValue"));
    Opal.const_set($nesting[0], 'AT', Opal.const_get_relative($nesting, 'Struct').$new("num", "difficulty"));
    Opal.const_set($nesting[0], 'EL', Opal.const_get_relative($nesting, 'Struct').$new("num", "difficulty"));
    Opal.const_set($nesting[0], 'DIFFICULTY_SYMBOL_TO_INTEGER', $hash2(["K", "E", "N", "H", "UH"], {"K": 2, "E": 3, "N": 4, "H": 5, "UH": 6}).$freeze());
    
    Opal.defn(self, '$changeText', TMP_NinjaSlayer_changeText_5 = function $$changeText(str) {
      var $a, self = this, m = nil;

      
      m = Opal.const_get_relative($nesting, 'NJ_RE').$match(str);
      if ($truthy(m)) {
        } else {
        return str
      };
      return self.$bRollCommand(m['$[]'](1), self.$integerValueOfDifficulty(($truthy($a = m['$[]'](2)) ? $a : m['$[]'](3))));
    }, TMP_NinjaSlayer_changeText_5.$$arity = 1);
    
    Opal.defn(self, '$rollDiceCommand', TMP_NinjaSlayer_rollDiceCommand_6 = function $$rollDiceCommand(command) {
      var self = this, $case = nil, node = nil;

      
      self.$debug("rollDiceCommand begin string", command);
      return (function() {$case = (node = self.$parse(command));
      if (Opal.const_get_relative($nesting, 'EV')['$===']($case)) {return self.$executeEV(node)}
      else if (Opal.const_get_relative($nesting, 'AT')['$===']($case)) {return self.$executeAT(node)}
      else if (Opal.const_get_relative($nesting, 'EL')['$===']($case)) {return self.$executeEL(node)}
      else if ("SB"['$===']($case)) {return self.$executeSB()}
      else {return nil}})();
    }, TMP_NinjaSlayer_rollDiceCommand_6.$$arity = 1);
    self.$private();
    
    Opal.defn(self, '$parse', TMP_NinjaSlayer_parse_7 = function $$parse(command) {
      var self = this, $case = nil;

      return (function() {$case = command;
      if (Opal.const_get_relative($nesting, 'EV_RE')['$===']($case)) {return self.$parseEV(Opal.const_get_relative($nesting, 'Regexp').$last_match())}
      else if (Opal.const_get_relative($nesting, 'AT_RE')['$===']($case)) {return self.$parseAT(Opal.const_get_relative($nesting, 'Regexp').$last_match())}
      else if (Opal.const_get_relative($nesting, 'EL_RE')['$===']($case)) {return self.$parseEL(Opal.const_get_relative($nesting, 'Regexp').$last_match())}
      else if ("SB"['$===']($case)) {return "SB"}
      else {return nil}})()
    }, TMP_NinjaSlayer_parse_7.$$arity = 1);
    
    Opal.defn(self, '$parseEV', TMP_NinjaSlayer_parseEV_8 = function $$parseEV(m) {
      var $a, self = this, num = nil, difficulty = nil, targetValue = nil;

      
      num = m['$[]'](1).$to_i();
      difficulty = self.$integerValueOfDifficulty(($truthy($a = m['$[]'](2)) ? $a : m['$[]'](3)));
      targetValue = ($truthy($a = m['$[]'](4)) ? m['$[]'](4).$to_i() : $a);
      return Opal.const_get_relative($nesting, 'EV').$new(num, difficulty, targetValue);
    }, TMP_NinjaSlayer_parseEV_8.$$arity = 1);
    
    Opal.defn(self, '$parseAT', TMP_NinjaSlayer_parseAT_9 = function $$parseAT(m) {
      var $a, self = this, num = nil, difficulty = nil;

      
      num = m['$[]'](1).$to_i();
      difficulty = self.$integerValueOfDifficulty(($truthy($a = m['$[]'](2)) ? $a : m['$[]'](3)));
      return Opal.const_get_relative($nesting, 'AT').$new(num, difficulty);
    }, TMP_NinjaSlayer_parseAT_9.$$arity = 1);
    
    Opal.defn(self, '$parseEL', TMP_NinjaSlayer_parseEL_10 = function $$parseEL(m) {
      var $a, self = this, num = nil, difficulty = nil;

      
      num = m['$[]'](1).$to_i();
      difficulty = self.$integerValueOfDifficulty(($truthy($a = m['$[]'](2)) ? $a : m['$[]'](3)));
      return Opal.const_get_relative($nesting, 'EL').$new(num, difficulty);
    }, TMP_NinjaSlayer_parseEL_10.$$arity = 1);
    
    Opal.defn(self, '$executeEV', TMP_NinjaSlayer_executeEV_11 = function $$executeEV(ev) {
      var self = this, command = nil, rollResult = nil, m = nil, numOfSuccesses = nil;

      
      command = self.$bRollCommand(ev.$num(), ev.$difficulty());
      rollResult = self.$bcdice().$bdice(command).$sub(Opal.const_get_relative($nesting, 'B_ROLL_RESULT_HEAD_RE'), "");
      if ($truthy(ev.$targetValue())) {
        } else {
        return rollResult
      };
      m = /成功数(\d+)/.$match(rollResult);
      if ($truthy(m)) {
        } else {
        self.$raise("成功数が見つかりません")
      };
      numOfSuccesses = m['$[]'](1).$to_i();
      if ($truthy($rb_gt(numOfSuccesses, ev.$targetValue()))) {
        return "" + (rollResult) + " ＞ カウンターカラテ!!"};
      return rollResult;
    }, TMP_NinjaSlayer_executeEV_11.$$arity = 1);
    
    Opal.defn(self, '$executeAT', TMP_NinjaSlayer_executeAT_13 = function $$executeAT(at) {
      var TMP_12, self = this, command = nil, rollResult = nil, m = nil, values = nil, numOfMaxValues = nil;

      
      command = self.$bRollCommand(at.$num(), at.$difficulty());
      rollResult = self.$bcdice().$bdice(command).$sub(Opal.const_get_relative($nesting, 'B_ROLL_RESULT_HEAD_RE'), "");
      m = /＞ (\d+(?:,\d+)*)/.$match(rollResult);
      values = $send(m['$[]'](1).$split(","), 'map', [], "to_i".$to_proc());
      numOfMaxValues = $send(values, 'select', [], (TMP_12 = function(v){var self = TMP_12.$$s || this;
if (v == null) v = nil;
      return v['$=='](6)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12)).$length();
      return (function() {if ($truthy($rb_ge(numOfMaxValues, 2))) {
        return "" + (rollResult) + " ＞ サツバツ!!"
        } else {
        return rollResult
      }; return nil; })();
    }, TMP_NinjaSlayer_executeAT_13.$$arity = 1);
    
    Opal.defn(self, '$executeEL', TMP_NinjaSlayer_executeEL_16 = function $$executeEL(el) {
      var TMP_14, TMP_15, self = this, command = nil, rollResult = nil, m = nil, values = nil, numOfMaxValues = nil, sumOfTrueValues = nil;

      
      command = self.$bRollCommand(el.$num(), el.$difficulty());
      rollResult = self.$bcdice().$bdice(command).$sub(Opal.const_get_relative($nesting, 'B_ROLL_RESULT_HEAD_RE'), "");
      m = /＞ (\d+(?:,\d+)*)/.$match(rollResult);
      values = $send(m['$[]'](1).$split(","), 'map', [], "to_i".$to_proc());
      numOfMaxValues = $send(values, 'select', [], (TMP_14 = function(v){var self = TMP_14.$$s || this;
if (v == null) v = nil;
      return v['$=='](6)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14)).$length();
      sumOfTrueValues = $send(values, 'select', [], (TMP_15 = function(v){var self = TMP_15.$$s || this;
if (v == null) v = nil;
      return $rb_ge(v, el.$difficulty())}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15)).$length();
      return (function() {if ($truthy($rb_ge(numOfMaxValues, 1))) {
        return "" + (rollResult) + " + " + (numOfMaxValues) + " ＞ " + ($rb_plus(sumOfTrueValues, numOfMaxValues))
        } else {
        return rollResult
      }; return nil; })();
    }, TMP_NinjaSlayer_executeEL_16.$$arity = 1);
    
    Opal.defn(self, '$executeSB', TMP_NinjaSlayer_executeSB_17 = function $$executeSB() {
      var $a, $b, self = this, table_name = nil, table = nil, info = nil, number = nil, text = nil;

      
      table_name = "サツバツ表";
      table = ["「死ねーッ！」腹部に強烈な一撃！　敵はくの字に折れ曲がり、ワイヤーアクションめいて吹っ飛んだ！：本来のダメージ＋１ダメージを与える。敵は後方の壁または障害物に向かって、何マスでもまっすぐ弾き飛ばされる（他のキャラのいるマスは通過する）。壁または障害物に接触した時点で、敵はさらに１ダメージを受ける。敵はこの激突ダメージに対して改めて『回避判定』を行っても良い。", "「イヤーッ！」頭部への痛烈なカラテ！　眼球破壊もしくは激しい脳震盪が敵を襲う！：本来のダメージを与える。さらに敵の【ニューロン】と【ワザマエ】がそれぞれ１ずつ減少する（これによる最低値は１）。残虐ボーナスにより【万札】がD３発生。この攻撃を【カルマ：善】のキャラに対して行ってしまった場合、【DKK】がD３上昇する。", "「苦しみ抜いて死ぬがいい」急所を情け容赦なく破壊！：本来のダメージ＋１ダメージを与える。耐え難い苦痛により、敵は【精神力】が–２され、【ニューロン】が１減少する（これによる最低値は１）。残虐ボーナスにより【万札】がD３発生。この攻撃を【カルマ：善】のキャラに対して行ってしまった場合、【DKK】がD３上昇する。", "「逃げられるものなら逃げてみよ」敵の脚を粉砕！：本来のダメージを与える。さらに敵の【脚力】がD３減少する（最低値は１）。残虐ボーナスにより【万札】がD３発生。この攻撃を【カルマ：善】のキャラに対して行ってしまった場合、【DKK】がD３上昇する。", "「これで手も足も出まい！」敵の両腕を切り飛ばした！　鮮血がスプリンクラーめいて噴き出す！：本来のダメージ＋１ダメージを与える。さらに敵の【ワザマエ】と【カラテ】がそれぞれ２減少する（最低値は１）。残虐ボーナスにより【万札】がD３発生。この攻撃を【カルマ：善】のキャラに対して行ってしまった場合、【DKK】がD３上昇する。", "「イイイヤアアアアーーーーッ！」ヤリめいたチョップが敵の胸を貫通！　さらに心臓を掴み取り、握りつぶした！　ナムアミダブツ！：敵は残り【体力】に関係なく即死する。残虐ボーナスにより【万札】がD６発生。この攻撃を【カルマ：善】のキャラに対して行ってしまった場合、【DKK】がD６上昇する。"];
      $b = self.$get_table_by_1d6(table), $a = Opal.to_ary($b), (info = ($a[0] == null ? nil : $a[0])), (number = ($a[1] == null ? nil : $a[1])), $b;
      text = "" + (table_name) + "(" + (number) + ") ＞ " + (info);
      return text;
    }, TMP_NinjaSlayer_executeSB_17.$$arity = 0);
    
    Opal.defn(self, '$integerValueOfDifficulty', TMP_NinjaSlayer_integerValueOfDifficulty_18 = function $$integerValueOfDifficulty(s) {
      var self = this;

      
      if ($truthy(s)) {
        } else {
        return 4
      };
      if ($truthy(/^[2-6]$/.$match(s))) {
        return s.$to_i()};
      return Opal.const_get_relative($nesting, 'DIFFICULTY_SYMBOL_TO_INTEGER').$fetch(s.$upcase());
    }, TMP_NinjaSlayer_integerValueOfDifficulty_18.$$arity = 1);
    return (Opal.defn(self, '$bRollCommand', TMP_NinjaSlayer_bRollCommand_19 = function $$bRollCommand(num, difficulty) {
      var self = this;

      return "" + (num) + "B6>=" + (difficulty)
    }, TMP_NinjaSlayer_bRollCommand_19.$$arity = 2), nil) && 'bRollCommand';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting);
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
=======
/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$freeze', '$attr_reader', '$map', '$to_proc', '$join', '$private', '$clearPrefixes', '$!', '$empty?', '$prefixs', '$prefixes', '$class', '$warn', '$id', '$setPrefixes', '$attr_accessor', '$name', '$sort_key', '$help_message', '$attr_writer', '$rand', '$roll', '$marshalSignOfInequality', '$unlimitedRollDiceType', '$getD66Value', '$parren_killer', '$debug', '$isGetOriginalMessage', '$getOriginalMessage', '$=~', '$prefixesPattern', '$last_match', '$removeDiceCommandMessage', '$rollDiceCommandCatched', '$nil?', '$!=', '$sub', '$rollDiceCommand', '$to_s', '$backtrace', '$size', '$===', '$check_1D100', '$check_1D20', '$check_2D6', '$check_nD10', '$check_nD6', '$check_nDx', '$is_a?', '$==', '$send', '$get_table_by_nD6', '$get_table_by_nDx', '$getTableValue', '$[]', '$-', '$/', '$getD66', '$bcdice', '$get_table_by_number', '$+', '$*', '$<', '$each', '$>=', '$kind_of?', '$lambda', '$call', '$select', '$public_methods', '$upcase', '$to_i', '$getTableInfoFromExtraTableText', '$get_table_by_nDx_extratable', '$get_table_by_d66', '$floor', '$%', '$get_table_by_d66_swap', '$raise', '$gsub', '$rollTableMessageDiceText', '$split', '$inspect']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'DiceBot');

    var $nesting = [self].concat($parent_nesting), $DiceBot_initialize$4, $DiceBot_postSet$5, $DiceBot_info$6, $DiceBot_id$7, $DiceBot_gameType$8, $DiceBot_name$9, $DiceBot_gameName$10, $DiceBot_sort_key$11, $DiceBot_help_message$12, $DiceBot_getHelpMessage$13, $DiceBot_prefixes$14, $DiceBot_setSendMode$15, $DiceBot_bcdice$eq$16, $DiceBot_bcdice$17, $DiceBot_rand$18, $DiceBot_roll$19, $DiceBot_marshalSignOfInequality$20, $DiceBot_unlimitedRollDiceType$21, $DiceBot_setSortType$22, $DiceBot_d66$23, $DiceBot_parren_killer$24, $DiceBot_changeText$25, $DiceBot_dice_command$26, $DiceBot_isGetOriginalMessage$27, $DiceBot_removeDiceCommandMessage$28, $DiceBot_rollDiceCommandCatched$29, $DiceBot_rollDiceCommand$30, $DiceBot_dice_command_xRn$31, $DiceBot_check_result$32, $DiceBot_check_nDx$33, $DiceBot_check_1D100$34, $DiceBot_check_1D20$35, $DiceBot_check_nD10$36, $DiceBot_check_2D6$37, $DiceBot_check_nD6$38, $DiceBot_get_table_by_2d6$39, $DiceBot_get_table_by_1d6$40, $DiceBot_get_table_by_nD6$41, $DiceBot_get_table_by_nDx$42, $DiceBot_get_table_by_1d3$43, $DiceBot_getD66$44, $DiceBot_get_table_by_d66_swap$45, $DiceBot_get_table_by_d66$46, $DiceBot_getDiceRolledAdditionalText$47, $DiceBot_getDiceRevision$48, $DiceBot_isD9$49, $DiceBot_getGrichText$50, $DiceBot_check2dCritical$51, $DiceBot_is2dCritical$52, $DiceBot_should_reroll$ques$53, $DiceBot_get_table_by_number$54, $DiceBot_getTableValue$56, $DiceBot_analyzeDiceCommandResultMethod$58, $DiceBot_get_table_by_nDx_extratable$61, $DiceBot_getTableCommandResult$62, $DiceBot_getTableInfoFromExtraTableText$63, $DiceBot_roll_tables$65;

    self.$$prototype.rerollLimitCount = self.$$prototype.d66Type = nil;
    
    Opal.const_set($nesting[0], 'EMPTY_PREFIXES_PATTERN', /(^|\s)(S)?()(\s|$)/i.$freeze());
    Opal.const_set($nesting[0], 'ID', "DiceBot");
    Opal.const_set($nesting[0], 'NAME', "DiceBot");
    Opal.const_set($nesting[0], 'SORT_KEY', "*\u305F\u3044\u3059\u307B\u3064\u3068");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "");
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $setPrefixes$1, $clearPrefixes$2, $inherited$3;

      
      self.$attr_reader("prefixes");
      self.$attr_reader("prefixesPattern");
      
      Opal.def(self, '$setPrefixes', $setPrefixes$1 = function $$setPrefixes(prefixes) {
        var self = this;

        
        self.prefixes = $send(prefixes, 'map', [], "freeze".$to_proc()).$freeze();
        self.prefixesPattern = new RegExp("" + "(^|\\s)(S)?(" + (prefixes.$join("|")) + ")(\\s|$)", 'i').$freeze();
        return self;
      }, $setPrefixes$1.$$arity = 1);
      
      Opal.def(self, '$clearPrefixes', $clearPrefixes$2 = function $$clearPrefixes() {
        var self = this;

        
        self.prefixes = [].$freeze();
        self.prefixesPattern = $$($nesting, 'EMPTY_PREFIXES_PATTERN');
        return self;
      }, $clearPrefixes$2.$$arity = 0);
      self.$private();
      return (Opal.def(self, '$inherited', $inherited$3 = function $$inherited(subclass) {
        var self = this;

        return subclass.$clearPrefixes()
      }, $inherited$3.$$arity = 1), nil) && 'inherited';
    })(Opal.get_singleton_class(self), $nesting);
    self.$clearPrefixes();
    (Opal.class_variable_set($nesting[0], '@@bcdice', nil));
    Opal.const_set($nesting[0], 'DEFAULT_SEND_MODE', 2);
    
    Opal.def(self, '$initialize', $DiceBot_initialize$4 = function $$initialize() {
      var $a, self = this;

      
      self.sendMode = $$($nesting, 'DEFAULT_SEND_MODE');
      self.sortType = 0;
      self.sameDiceRerollCount = 0;
      self.sameDiceRerollType = 0;
      self.d66Type = 1;
      self.isPrintMaxDice = false;
      self.upplerRollThreshold = 0;
      self.unlimitedRollDiceType = 0;
      self.rerollNumber = 0;
      self.defaultSuccessTarget = "";
      self.rerollLimitCount = 10000;
      self.fractionType = "omit";
      if ($truthy(($truthy($a = self.$prefixs()['$empty?']()['$!']()) ? self.$class().$prefixes()['$empty?']() : $a))) {
        
        self.$warn("" + (self.$id()) + ": #prefixs is deprecated. Please use .setPrefixes.");
        return self.$class().$setPrefixes(self.$prefixs());
      } else {
        return nil
      };
    }, $DiceBot_initialize$4.$$arity = 0);
    self.$attr_accessor("rerollLimitCount");
    self.$attr_reader("sendMode", "sameDiceRerollCount", "sameDiceRerollType", "d66Type");
    self.$attr_reader("isPrintMaxDice", "upplerRollThreshold");
    self.$attr_reader("defaultSuccessTarget", "rerollNumber", "fractionType");
    
    Opal.def(self, '$postSet', $DiceBot_postSet$5 = function $$postSet() {
      var self = this;

      return nil
    }, $DiceBot_postSet$5.$$arity = 0);
    
    Opal.def(self, '$info', $DiceBot_info$6 = function $$info() {
      var self = this;

      return $hash2(["gameType", "name", "sortKey", "prefixs", "info"], {"gameType": self.$id(), "name": self.$name(), "sortKey": self.$sort_key(), "prefixs": self.$class().$prefixes(), "info": self.$help_message()})
    }, $DiceBot_info$6.$$arity = 0);
    
    Opal.def(self, '$id', $DiceBot_id$7 = function $$id() {
      var self = this;

      return $$$(self.$class(), 'ID')
    }, $DiceBot_id$7.$$arity = 0);
    
    Opal.def(self, '$gameType', $DiceBot_gameType$8 = function $$gameType() {
      var self = this;

      
      self.$warn("" + (self.$id()) + ": #gameType is deprecated. Please use #id.");
      return self.$id();
    }, $DiceBot_gameType$8.$$arity = 0);
    
    Opal.def(self, '$name', $DiceBot_name$9 = function $$name() {
      var self = this;

      return $$$(self.$class(), 'NAME')
    }, $DiceBot_name$9.$$arity = 0);
    
    Opal.def(self, '$gameName', $DiceBot_gameName$10 = function $$gameName() {
      var self = this;

      
      self.$warn("" + (self.$id()) + ": #gameName is deprecated. Please use #name.");
      return self.$name();
    }, $DiceBot_gameName$10.$$arity = 0);
    
    Opal.def(self, '$sort_key', $DiceBot_sort_key$11 = function $$sort_key() {
      var self = this;

      return $$$(self.$class(), 'SORT_KEY')
    }, $DiceBot_sort_key$11.$$arity = 0);
    
    Opal.def(self, '$help_message', $DiceBot_help_message$12 = function $$help_message() {
      var self = this;

      return $$$(self.$class(), 'HELP_MESSAGE')
    }, $DiceBot_help_message$12.$$arity = 0);
    
    Opal.def(self, '$getHelpMessage', $DiceBot_getHelpMessage$13 = function $$getHelpMessage() {
      var self = this;

      
      self.$warn("" + (self.$id()) + ": #getHelpMessage is deprecated. Please use #help_message.");
      return self.$help_message();
    }, $DiceBot_getHelpMessage$13.$$arity = 0);
    
    Opal.def(self, '$prefixes', $DiceBot_prefixes$14 = function $$prefixes() {
      var self = this;

      return self.$class().$prefixes()
    }, $DiceBot_prefixes$14.$$arity = 0);
    Opal.alias(self, "prefixs", "prefixes");
    
    Opal.def(self, '$setSendMode', $DiceBot_setSendMode$15 = function $$setSendMode(m) {
      var self = this;

      return (self.sendMode = m)
    }, $DiceBot_setSendMode$15.$$arity = 1);
    self.$attr_writer("upplerRollThreshold");
    
    Opal.def(self, '$bcdice=', $DiceBot_bcdice$eq$16 = function(b) {
      var self = this;

      return (Opal.class_variable_set($nesting[0], '@@bcdice', b))
    }, $DiceBot_bcdice$eq$16.$$arity = 1);
    
    Opal.def(self, '$bcdice', $DiceBot_bcdice$17 = function $$bcdice() {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a)
    }, $DiceBot_bcdice$17.$$arity = 0);
    
    Opal.def(self, '$rand', $DiceBot_rand$18 = function $$rand(max) {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$rand(max)
    }, $DiceBot_rand$18.$$arity = 1);
    
    Opal.def(self, '$roll', $DiceBot_roll$19 = function $$roll($a) {
      var $post_args, args, $b, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send((($b = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $b), 'roll', Opal.to_a(args));
    }, $DiceBot_roll$19.$$arity = -1);
    
    Opal.def(self, '$marshalSignOfInequality', $DiceBot_marshalSignOfInequality$20 = function $$marshalSignOfInequality($a) {
      var $post_args, args, $b, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send((($b = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $b), 'marshalSignOfInequality', Opal.to_a(args));
    }, $DiceBot_marshalSignOfInequality$20.$$arity = -1);
    
    Opal.def(self, '$unlimitedRollDiceType', $DiceBot_unlimitedRollDiceType$21 = function $$unlimitedRollDiceType() {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$unlimitedRollDiceType()
    }, $DiceBot_unlimitedRollDiceType$21.$$arity = 0);
    self.$attr_reader("sortType");
    
    Opal.def(self, '$setSortType', $DiceBot_setSortType$22 = function $$setSortType(s) {
      var self = this;

      return (self.sortType = s)
    }, $DiceBot_setSortType$22.$$arity = 1);
    
    Opal.def(self, '$d66', $DiceBot_d66$23 = function $$d66($a) {
      var $post_args, args, $b, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send((($b = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $b), 'getD66Value', Opal.to_a(args));
    }, $DiceBot_d66$23.$$arity = -1);
    
    Opal.def(self, '$parren_killer', $DiceBot_parren_killer$24 = function $$parren_killer(string) {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$parren_killer(string)
    }, $DiceBot_parren_killer$24.$$arity = 1);
    
    Opal.def(self, '$changeText', $DiceBot_changeText$25 = function $$changeText(string) {
      var self = this;

      
      self.$debug("DiceBot.parren_killer_add called");
      return string;
    }, $DiceBot_changeText$25.$$arity = 1);
    
    Opal.def(self, '$dice_command', $DiceBot_dice_command$26 = function $$dice_command(string, nick_e) {
      var $a, $b, self = this, secret_flg = nil, secretMarker = nil, command = nil, output_msg = nil;

      
      if ($truthy(self.$isGetOriginalMessage())) {
        string = (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$getOriginalMessage()};
      self.$debug("dice_command Begin string", string);
      secret_flg = false;
      if ($truthy(self.$class().$prefixesPattern()['$=~'](string))) {
      } else {
        
        self.$debug("not match in prefixes");
        return ["1", secret_flg];
      };
      secretMarker = $$($nesting, 'Regexp').$last_match(2);
      command = $$($nesting, 'Regexp').$last_match(3);
      command = self.$removeDiceCommandMessage(command);
      self.$debug("dicebot after command", command);
      self.$debug("match");
      $b = self.$rollDiceCommandCatched(command), $a = Opal.to_ary($b), (output_msg = ($a[0] == null ? nil : $a[0])), (secret_flg = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(($truthy($a = output_msg['$nil?']()) ? $a : output_msg['$empty?']()))) {
        output_msg = "1"};
      secret_flg = ($truthy($a = secret_flg) ? $a : false);
      if ($truthy(output_msg['$!=']("1"))) {
        output_msg = "" + (nick_e) + ": " + (output_msg)};
      if ($truthy(secretMarker)) {
        if ($truthy(output_msg['$!=']("1"))) {
          secret_flg = true}};
      return [output_msg, secret_flg];
    }, $DiceBot_dice_command$26.$$arity = 2);
    
    Opal.def(self, '$isGetOriginalMessage', $DiceBot_isGetOriginalMessage$27 = function $$isGetOriginalMessage() {
      var self = this;

      return false
    }, $DiceBot_isGetOriginalMessage$27.$$arity = 0);
    
    Opal.def(self, '$removeDiceCommandMessage', $DiceBot_removeDiceCommandMessage$28 = function $$removeDiceCommandMessage(command) {
      var self = this;

      return command.$sub(/[\s\u3000].+/, "")
    }, $DiceBot_removeDiceCommandMessage$28.$$arity = 1);
    
    Opal.def(self, '$rollDiceCommandCatched', $DiceBot_rollDiceCommandCatched$29 = function $$rollDiceCommandCatched(command) {
      var $a, $b, self = this, result = nil, secret_flg = nil, e = nil;

      
      result = nil;
      
      try {
        
        self.$debug("call rollDiceCommand command", command);
        $b = self.$rollDiceCommand(command), $a = Opal.to_ary($b), (result = ($a[0] == null ? nil : $a[0])), (secret_flg = ($a[1] == null ? nil : $a[1])), $b;
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {e = $err;
          try {
            self.$debug("executeCommand exception", e.$to_s(), e.$backtrace().$join("\n"))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      self.$debug("rollDiceCommand result", result);
      return [result, secret_flg];
    }, $DiceBot_rollDiceCommandCatched$29.$$arity = 1);
    
    Opal.def(self, '$rollDiceCommand', $DiceBot_rollDiceCommand$30 = function $$rollDiceCommand(_command) {
      var self = this;

      return nil
    }, $DiceBot_rollDiceCommand$30.$$arity = 1);
    
    Opal.def(self, '$dice_command_xRn', $DiceBot_dice_command_xRn$31 = function $$dice_command_xRn(_string, _nick_e) {
      var self = this;

      return ""
    }, $DiceBot_dice_command_xRn$31.$$arity = 2);
    
    Opal.def(self, '$check_result', $DiceBot_check_result$32 = function $$check_result(total, dice_total, dice_list, sides, cmp_op, target) {
      var $a, self = this, ret = nil, $case = nil;

      
      ret = (function() {$case = [dice_list.$size(), sides];
      if ([1, 100]['$===']($case)) {return self.$check_1D100(total, dice_total, cmp_op, target)}
      else if ([1, 20]['$===']($case)) {return self.$check_1D20(total, dice_total, cmp_op, target)}
      else if ([2, 6]['$===']($case)) {return self.$check_2D6(total, dice_total, dice_list, cmp_op, target)}
      else { return nil }})();
      if ($truthy(($truthy($a = ret['$nil?']()) ? $a : ret['$empty?']()))) {
      } else {
        return ret
      };
      ret = (function() {$case = sides;
      if ((10)['$===']($case)) {return self.$check_nD10(total, dice_total, dice_list, cmp_op, target)}
      else if ((6)['$===']($case)) {return self.$check_nD6(total, dice_total, dice_list, cmp_op, target)}
      else { return nil }})();
      if ($truthy(($truthy($a = ret['$nil?']()) ? $a : ret['$empty?']()))) {
      } else {
        return ret
      };
      return self.$check_nDx(total, cmp_op, target);
    }, $DiceBot_check_result$32.$$arity = 6);
    
    Opal.def(self, '$check_nDx', $DiceBot_check_nDx$33 = function $$check_nDx(total, cmp_op, target) {
      var self = this, success = nil;

      
      if ($truthy(target['$is_a?']($$($nesting, 'String')))) {
        return " \uFF1E \u5931\u6557"};
      success = (function() {if (cmp_op['$==']("!=")) {
        return total['$!='](target)
      } else {
        return total.$send(cmp_op, target)
      }; return nil; })();
      if ($truthy(success)) {
        return " \uFF1E \u6210\u529F"
      } else {
        return " \uFF1E \u5931\u6557"
      };
    }, $DiceBot_check_nDx$33.$$arity = 3);
    
    Opal.def(self, '$check_1D100', $DiceBot_check_1D100$34 = function $$check_1D100(total, dice_total, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_1D100$34.$$arity = 4);
    
    Opal.def(self, '$check_1D20', $DiceBot_check_1D20$35 = function $$check_1D20(total, dice_total, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_1D20$35.$$arity = 4);
    
    Opal.def(self, '$check_nD10', $DiceBot_check_nD10$36 = function $$check_nD10(total, dice_total, dice_list, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_nD10$36.$$arity = 5);
    
    Opal.def(self, '$check_2D6', $DiceBot_check_2D6$37 = function $$check_2D6(total, dice_total, dice_list, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_2D6$37.$$arity = 5);
    
    Opal.def(self, '$check_nD6', $DiceBot_check_nD6$38 = function $$check_nD6(total, dice_total, dice_list, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_nD6$38.$$arity = 5);
    
    Opal.def(self, '$get_table_by_2d6', $DiceBot_get_table_by_2d6$39 = function $$get_table_by_2d6(table) {
      var self = this;

      return self.$get_table_by_nD6(table, 2)
    }, $DiceBot_get_table_by_2d6$39.$$arity = 1);
    
    Opal.def(self, '$get_table_by_1d6', $DiceBot_get_table_by_1d6$40 = function $$get_table_by_1d6(table) {
      var self = this;

      return self.$get_table_by_nD6(table, 1)
    }, $DiceBot_get_table_by_1d6$40.$$arity = 1);
    
    Opal.def(self, '$get_table_by_nD6', $DiceBot_get_table_by_nD6$41 = function $$get_table_by_nD6(table, count) {
      var self = this;

      return self.$get_table_by_nDx(table, count, 6)
    }, $DiceBot_get_table_by_nD6$41.$$arity = 2);
    
    Opal.def(self, '$get_table_by_nDx', $DiceBot_get_table_by_nDx$42 = function $$get_table_by_nDx(table, count, diceType) {
      var $a, $b, self = this, num = nil, text = nil;

      
      $b = self.$roll(count, diceType), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), $b;
      text = self.$getTableValue(table['$[]']($rb_minus(num, count)));
      if ($truthy(text['$nil?']())) {
        return ["1", 0]};
      return [text, num];
    }, $DiceBot_get_table_by_nDx$42.$$arity = 3);
    
    Opal.def(self, '$get_table_by_1d3', $DiceBot_get_table_by_1d3$43 = function $$get_table_by_1d3(table) {
      var $a, $b, self = this, count = nil, num = nil, index = nil, text = nil;

      
      self.$debug("get_table_by_1d3");
      count = 1;
      $b = self.$roll(count, 6), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), $b;
      self.$debug("num", num);
      index = $rb_divide($rb_minus(num, 1), 2);
      self.$debug("index", index);
      text = table['$[]'](index);
      if ($truthy(text['$nil?']())) {
        return ["1", 0]};
      return [text, num];
    }, $DiceBot_get_table_by_1d3$43.$$arity = 1);
    
    Opal.def(self, '$getD66', $DiceBot_getD66$44 = function $$getD66(isSwap) {
      var self = this;

      return self.$bcdice().$getD66(isSwap)
    }, $DiceBot_getD66$44.$$arity = 1);
    
    Opal.def(self, '$get_table_by_d66_swap', $DiceBot_get_table_by_d66_swap$45 = function $$get_table_by_d66_swap(table) {
      var self = this, isSwap = nil, number = nil;

      
      isSwap = true;
      number = self.$bcdice().$getD66(isSwap);
      return [self.$get_table_by_number(number, table), number];
    }, $DiceBot_get_table_by_d66_swap$45.$$arity = 1);
    
    Opal.def(self, '$get_table_by_d66', $DiceBot_get_table_by_d66$46 = function $$get_table_by_d66(table) {
      var $a, $b, self = this, dice1 = nil, dice2 = nil, num = nil, text = nil, indexText = nil;

      
      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice1 = ($a[0] == null ? nil : $a[0])), $b;
      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice2 = ($a[0] == null ? nil : $a[0])), $b;
      num = $rb_plus($rb_times($rb_minus(dice1, 1), 6), $rb_minus(dice2, 1));
      text = table['$[]'](num);
      indexText = "" + (dice1) + (dice2);
      if ($truthy(text['$nil?']())) {
        return ["1", indexText]};
      return [text, indexText];
    }, $DiceBot_get_table_by_d66$46.$$arity = 1);
    
    Opal.def(self, '$getDiceRolledAdditionalText', $DiceBot_getDiceRolledAdditionalText$47 = function $$getDiceRolledAdditionalText(_n1, _n_max, _dice_max) {
      var self = this;

      return ""
    }, $DiceBot_getDiceRolledAdditionalText$47.$$arity = 3);
    
    Opal.def(self, '$getDiceRevision', $DiceBot_getDiceRevision$48 = function $$getDiceRevision(_n_max, _dice_max, _total_n) {
      var self = this;

      return ["", 0]
    }, $DiceBot_getDiceRevision$48.$$arity = 3);
    
    Opal.def(self, '$isD9', $DiceBot_isD9$49 = function $$isD9() {
      var self = this;

      return false
    }, $DiceBot_isD9$49.$$arity = 0);
    
    Opal.def(self, '$getGrichText', $DiceBot_getGrichText$50 = function $$getGrichText(_numberSpot1, _dice_cnt_total, _suc) {
      var self = this;

      return ""
    }, $DiceBot_getGrichText$50.$$arity = 3);
    
    Opal.def(self, '$check2dCritical', $DiceBot_check2dCritical$51 = function $$check2dCritical(critical, dice_new, dice_arry, loop_count) {
      var self = this;

      return nil
    }, $DiceBot_check2dCritical$51.$$arity = 4);
    
    Opal.def(self, '$is2dCritical', $DiceBot_is2dCritical$52 = function $$is2dCritical() {
      var self = this;

      return false
    }, $DiceBot_is2dCritical$52.$$arity = 0);
    
    Opal.def(self, '$should_reroll?', $DiceBot_should_reroll$ques$53 = function(loop_count) {
      var $a, self = this;

      return ($truthy($a = $rb_lt(loop_count, self.rerollLimitCount)) ? $a : self.rerollLimitCount['$=='](0))
    }, $DiceBot_should_reroll$ques$53.$$arity = 1);
    
    Opal.def(self, '$get_table_by_number', $DiceBot_get_table_by_number$54 = function $$get_table_by_number(index, table, default$) {try {

      var $$55, self = this;

      
      
      if (default$ == null) {
        default$ = "1";
      };
      $send(table, 'each', [], ($$55 = function(item){var self = $$55.$$s || this, number = nil;

      
        
        if (item == null) {
          item = nil;
        };
        number = item['$[]'](0);
        if ($truthy($rb_ge(number, index))) {
          Opal.ret(self.$getTableValue(item['$[]'](1)))
        } else {
          return nil
        };}, $$55.$$s = self, $$55.$$arity = 1, $$55));
      return self.$getTableValue(default$);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $DiceBot_get_table_by_number$54.$$arity = -3);
    
    Opal.def(self, '$getTableValue', $DiceBot_getTableValue$56 = function $$getTableValue(data) {try {

      var $$57, self = this, lambdaBlock = nil;

      
      if ($truthy(data['$kind_of?']($$($nesting, 'Proc')))) {
        
        lambdaBlock = $send(self, 'lambda', [], ($$57 = function(){var self = $$57.$$s || this;

        Opal.ret(data.$call())}, $$57.$$s = self, $$57.$$arity = 0, $$57));
        return lambdaBlock.$call();};
      return data;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $DiceBot_getTableValue$56.$$arity = 1);
    
    Opal.def(self, '$analyzeDiceCommandResultMethod', $DiceBot_analyzeDiceCommandResultMethod$58 = function $$analyzeDiceCommandResultMethod(command) {try {

      var $$59, $$60, self = this, methodList = nil;

      
      methodList = $send(self.$public_methods(), 'select', [], ($$59 = function(method){var self = $$59.$$s || this;

      
        
        if (method == null) {
          method = nil;
        };
        return /^get.+DiceCommandResult$/['$==='](method.$to_s());}, $$59.$$s = self, $$59.$$arity = 1, $$59));
      $send(methodList, 'each', [], ($$60 = function(method){var self = $$60.$$s || this, result = nil;

      
        
        if (method == null) {
          method = nil;
        };
        result = self.$send(method, command);
        if ($truthy(result['$nil?']())) {
          return nil
        } else {
          Opal.ret(result)
        };}, $$60.$$s = self, $$60.$$arity = 1, $$60));
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $DiceBot_analyzeDiceCommandResultMethod$58.$$arity = 1);
    
    Opal.def(self, '$get_table_by_nDx_extratable', $DiceBot_get_table_by_nDx_extratable$61 = function $$get_table_by_nDx_extratable(table, count, diceType) {
      var $a, $b, self = this, number = nil, diceText = nil, text = nil;

      
      $b = self.$roll(count, diceType), $a = Opal.to_ary($b), (number = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      text = self.$getTableValue(table['$[]']($rb_minus(number, count)));
      return [text, number, diceText];
    }, $DiceBot_get_table_by_nDx_extratable$61.$$arity = 3);
    
    Opal.def(self, '$getTableCommandResult', $DiceBot_getTableCommandResult$62 = function $$getTableCommandResult(command, tables, isPrintDiceText) {
      var $a, $b, $c, $d, self = this, info = nil, name = nil, type = nil, table = nil, $case = nil, count = nil, diceType = nil, limit = nil, item = nil, value = nil, output = nil, diceText = nil, text = nil, number = nil;

      
      
      if (isPrintDiceText == null) {
        isPrintDiceText = true;
      };
      info = tables['$[]'](command.$upcase());
      if ($truthy(info['$nil?']())) {
        return nil};
      name = info['$[]']("name");
      type = info['$[]']("type").$upcase();
      table = info['$[]']("table");
      if ($truthy(($truthy($a = type['$==']("D66")) ? self.d66Type['$=='](2) : $a))) {
        type = "D66S"};
      $b = (function() {$case = type;
      if (/(\d+)D(\d+)/['$===']($case)) {
      count = $$($nesting, 'Regexp').$last_match(1).$to_i();
      diceType = $$($nesting, 'Regexp').$last_match(2).$to_i();
      limit = $rb_minus($rb_times(diceType, count), $rb_minus(count, 1));
      table = self.$getTableInfoFromExtraTableText(table, limit);
      return self.$get_table_by_nDx_extratable(table, count, diceType);}
      else if ("D66"['$===']($case) || "D66N"['$===']($case)) {
      table = self.$getTableInfoFromExtraTableText(table, 36);
      $d = self.$get_table_by_d66(table), $c = Opal.to_ary($d), (item = ($c[0] == null ? nil : $c[0])), (value = ($c[1] == null ? nil : $c[1])), $d;
      value = value.$to_i();
      output = item['$[]'](1);
      diceText = $rb_plus($rb_plus($rb_divide(value, 10).$floor().$to_s(), ","), value['$%'](10).$to_s());
      return [output, value, diceText];}
      else if ("D66S"['$===']($case)) {
      table = self.$getTableInfoFromExtraTableText(table, 21);
      $d = self.$get_table_by_d66_swap(table), $c = Opal.to_ary($d), (output = ($c[0] == null ? nil : $c[0])), (value = ($c[1] == null ? nil : $c[1])), $d;
      value = value.$to_i();
      diceText = $rb_plus($rb_plus($rb_divide(value, 10).$floor().$to_s(), ","), value['$%'](10).$to_s());
      return [output, value, diceText];}
      else {return self.$raise("" + "invalid dice Type " + (command))}})(), $a = Opal.to_ary($b), (text = ($a[0] == null ? nil : $a[0])), (number = ($a[1] == null ? nil : $a[1])), (diceText = ($a[2] == null ? nil : $a[2])), $b;
      text = text.$gsub("\\n", "\n");
      text = (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$rollTableMessageDiceText(text);
      if ($truthy(text['$nil?']())) {
        return nil};
      if ($truthy(($truthy($a = isPrintDiceText) ? diceText['$nil?']()['$!']() : $a))) {
        return "" + (name) + "(" + (number) + "[" + (diceText) + "]) \uFF1E " + (text)};
      return "" + (name) + "(" + (number) + ") \uFF1E " + (text);
    }, $DiceBot_getTableCommandResult$62.$$arity = -3);
    
    Opal.def(self, '$getTableInfoFromExtraTableText', $DiceBot_getTableInfoFromExtraTableText$63 = function $$getTableInfoFromExtraTableText(text, count) {
      var $$64, self = this, newTable = nil;

      
      
      if (count == null) {
        count = nil;
      };
      if ($truthy(text['$is_a?']($$($nesting, 'String')))) {
        text = text.$split(/\n/)};
      newTable = $send(text, 'map', [], ($$64 = function(item){var self = $$64.$$s || this, $a;

      
        
        if (item == null) {
          item = nil;
        };
        if ($truthy(($truthy($a = item['$is_a?']($$($nesting, 'String'))) ? /^(\d+):(.*)/['$==='](item) : $a))) {
          return [$$($nesting, 'Regexp').$last_match(1).$to_i(), $$($nesting, 'Regexp').$last_match(2)]
        } else {
          return item
        };}, $$64.$$s = self, $$64.$$arity = 1, $$64));
      if ($truthy(count['$nil?']())) {
      } else if ($truthy(newTable.$size()['$!='](count))) {
        self.$raise("" + "invalid table size:" + (newTable.$size()) + "\n" + (newTable.$inspect()))};
      return newTable;
    }, $DiceBot_getTableInfoFromExtraTableText$63.$$arity = -2);
    return (Opal.def(self, '$roll_tables', $DiceBot_roll_tables$65 = function $$roll_tables(command, tables) {
      var self = this, table = nil;

      
      table = tables['$[]'](command.$upcase());
      if ($truthy(table)) {
      } else {
        return nil
      };
      return table.$roll(self.$bcdice()).$to_s();
    }, $DiceBot_roll_tables$65.$$arity = 2), nil) && 'roll_tables';
  })($nesting[0], null, $nesting)
})(Opal);
Opal.loaded(["diceBot/DiceBot.js"]);
/* Generated by Opal 1.0.3 */
Opal.modules["utils/table"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$freeze', '$match', '$raise', '$to_i', '$[]', '$roll', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Table');

    var $nesting = [self].concat($parent_nesting), $Table_initialize$1, $Table_roll$2;

    self.$$prototype.times = self.$$prototype.sides = self.$$prototype.name = self.$$prototype.items = nil;
    
    
    Opal.def(self, '$initialize', $Table_initialize$1 = function $$initialize(name, type, items) {
      var self = this, m = nil;

      
      self.name = name;
      self.items = items.$freeze();
      m = /(\d+)D(\d+)/i.$match(type);
      if ($truthy(m)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "Unexpected table type: " + (type))
      };
      self.times = m['$[]'](1).$to_i();
      return (self.sides = m['$[]'](2).$to_i());
    }, $Table_initialize$1.$$arity = 3);
    return (Opal.def(self, '$roll', $Table_roll$2 = function $$roll(bcdice) {
      var $a, $b, self = this, value = nil, index = nil;

      
      $b = bcdice.$roll(self.times, self.sides), $a = Opal.to_ary($b), (value = ($a[0] == null ? nil : $a[0])), $b;
      index = $rb_minus(value, self.times);
      return "" + (self.name) + "(" + (value) + ") \uFF1E " + (self.items['$[]'](index));
    }, $Table_roll$2.$$arity = 1), nil) && 'roll';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$setPrefixes', '$freeze', '$new', '$match', '$bRollCommand', '$[]', '$integerValueOfDifficulty', '$debug', '$roll', '$bcdice', '$parse', '$===', '$executeEV', '$executeAT', '$executeEL', '$private', '$parseEV', '$last_match', '$parseAT', '$parseEL', '$to_i', '$num', '$difficulty', '$sub', '$bdice', '$targetValue', '$raise', '$>', '$map', '$split', '$to_proc', '$length', '$select', '$==', '$>=', '$+', '$fetch', '$upcase', '$keys']);
  
  self.$require("diceBot/DiceBot");
  self.$require("utils/table");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NinjaSlayer');

    var $nesting = [self].concat($parent_nesting), $NinjaSlayer_initialize$1, $NinjaSlayer_changeText$2, $NinjaSlayer_rollDiceCommand$3, $NinjaSlayer_parse$4, $NinjaSlayer_parseEV$5, $NinjaSlayer_parseAT$6, $NinjaSlayer_parseEL$7, $NinjaSlayer_executeEV$8, $NinjaSlayer_executeAT$9, $NinjaSlayer_executeEL$11, $NinjaSlayer_integerValueOfDifficulty$14, $NinjaSlayer_bRollCommand$15;

    
    Opal.const_set($nesting[0], 'ID', "NinjaSlayer");
    Opal.const_set($nesting[0], 'NAME', "\u30CB\u30F3\u30B8\u30E3\u30B9\u30EC\u30A4\u30E4\u30FCTRPG");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u306B\u3093\u3057\u3084\u3059\u308C\u3044\u3084\u3042RPG");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u30FB\u901A\u5E38\u5224\u5B9A\u3000NJ\n" + "\u3000NJx[y] or NJx@y or NJx\n" + "\u3000x=\u5224\u5B9A\u30C0\u30A4\u30B9 y=\u96E3\u6613\u5EA6 \u7701\u7565\u6642\u306FNORMAL(4)\n" + "\u3000\u4F8B:NJ4@H \u96E3\u6613\u5EA6HARD\u3001\u5224\u5B9A\u30C0\u30A4\u30B94\u3067\u5224\u5B9A\n" + "\u30FB\u56DE\u907F\u5224\u5B9A\u3000EV\n" + "\u3000EVx[y]/z or EVx@y/z or EVx/z or EVx[y] or EVx@y or EVx\n" + "\u3000x=\u5224\u5B9A\u30C0\u30A4\u30B9 y=\u96E3\u6613\u5EA6 z=\u653B\u6483\u5074\u306E\u6210\u529F\u6570(\u7701\u7565\u53EF) \u96E3\u6613\u5EA6\u3092\u7701\u7565\u6642\u306FNORMAL(4)\n" + "\u3000\u653B\u6483\u5074\u306E\u6210\u529F\u6570\u3092\u6307\u5B9A\u3057\u305F\u5834\u5408\u3001\u30AB\u30A6\u30F3\u30BF\u30FC\u30AB\u30E9\u30C6\u767A\u751F\u6642\u306B\u306F\u8868\u793A\n" + "\u3000\u4F8B:EV5/3 \u96E3\u6613\u5EA6NORMAL(\u7701\u7565\u6642)\u3001\u5224\u5B9A\u30C0\u30A4\u30B95\u3001\u653B\u6483\u5074\u306E\u6210\u529F\u65703\u3067\u5224\u5B9A\n" + "\u30FB\u8FD1\u63A5\u653B\u6483\u3000AT\n" + "\u3000ATx[y] or ATx@y or ATx\n" + "\u3000x=\u5224\u5B9A\u30C0\u30A4\u30B9 y=\u96E3\u6613\u5EA6 \u7701\u7565\u6642\u306FNORMAL(4) \u30B5\u30C4\u30D0\u30C4\uFF01\u767A\u751F\u6642\u306B\u306F\u8868\u793A\n" + "\u3000\u4F8B:AT6[H] \u96E3\u6613\u5EA6HARD,\u5224\u5B9A\u30C0\u30A4\u30B95\u3067\u8FD1\u63A5\u653B\u6483\u306E\u5224\u5B9A\n" + "\u30FB\u30B5\u30C4\u30D0\u30C4\u5224\u5B9A\u3000SB\n" + "\u30FB\u96FB\u5B50\u6226\u3000EL\n" + "\u3000ELx[y] or ELx@y or ELx\n" + "\u3000x=\u5224\u5B9A\u30C0\u30A4\u30B9 y=\u96E3\u6613\u5EA6 \u7701\u7565\u6642\u306FNORMAL(4)\n" + "\u3000\u4F8B:EL6[H] \u96E3\u6613\u5EA6HARD,\u5224\u5B9A\u30C0\u30A4\u30B95\u3067\u96FB\u5B50\u6226\u306E\u5224\u5B9A\n" + "\n" + "\u30FB\u96E3\u6613\u5EA6\n" + "\u3000KIDS=K,EASY=E,NORMAL=N,HARD=H,ULTRA HARD=UH \u6570\u5B57\u306B\u3082\u5BFE\u5FDC\n");
    self.$setPrefixes(["NJ\\d+.*", "EV\\d+.*", "AT\\d+.*", "EL\\d+.*", "SB"]);
    
    Opal.def(self, '$initialize', $NinjaSlayer_initialize$1 = function $$initialize() {
      var $iter = $NinjaSlayer_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $NinjaSlayer_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $NinjaSlayer_initialize$1, false), $zuper, $iter);
      return (self.defaultSuccessTarget = ">=4");
    }, $NinjaSlayer_initialize$1.$$arity = 0);
    Opal.const_set($nesting[0], 'DIFFICULTY_VALUE_RE', /UH|[2-6KENH]/i.$freeze());
    Opal.const_set($nesting[0], 'DIFFICULTY_RE', new RegExp("" + "\\[(" + ($$($nesting, 'DIFFICULTY_VALUE_RE')) + ")\\]|@(" + ($$($nesting, 'DIFFICULTY_VALUE_RE')) + ")", 'i').$freeze());
    Opal.const_set($nesting[0], 'NJ_RE', /^(S)?NJ(\d+)(?:\[(UH|[2-6KENH])\]|@(UH|[2-6KENH]))?$/i.$freeze());
    Opal.const_set($nesting[0], 'EV_RE', /^EV(\d+)(?:\[(UH|[2-6KENH])\]|@(UH|[2-6KENH]))?(?:\/(\d+))?$/i.$freeze());
    Opal.const_set($nesting[0], 'AT_RE', /^AT(\d+)(?:\[(UH|[2-6KENH])\]|@(UH|[2-6KENH]))?$/i.$freeze());
    Opal.const_set($nesting[0], 'EL_RE', /^EL(\d+)(?:\[(UH|[2-6KENH])\]|@(UH|[2-6KENH]))?$/i.$freeze());
    Opal.const_set($nesting[0], 'B_ROLL_RESULT_HEAD_RE', /^[^(]+/.$freeze());
    Opal.const_set($nesting[0], 'EV', $$($nesting, 'Struct').$new("num", "difficulty", "targetValue"));
    Opal.const_set($nesting[0], 'AT', $$($nesting, 'Struct').$new("num", "difficulty"));
    Opal.const_set($nesting[0], 'EL', $$($nesting, 'Struct').$new("num", "difficulty"));
    Opal.const_set($nesting[0], 'DIFFICULTY_SYMBOL_TO_INTEGER', $hash2(["K", "E", "N", "H", "UH"], {"K": 2, "E": 3, "N": 4, "H": 5, "UH": 6}).$freeze());
    
    Opal.def(self, '$changeText', $NinjaSlayer_changeText$2 = function $$changeText(str) {
      var $a, self = this, m = nil, b_roll = nil;

      
      m = $$($nesting, 'NJ_RE').$match(str);
      if ($truthy(m)) {
      } else {
        return str
      };
      b_roll = self.$bRollCommand(m['$[]'](2), self.$integerValueOfDifficulty(($truthy($a = m['$[]'](3)) ? $a : m['$[]'](4))));
      return "" + (m['$[]'](1)) + (b_roll);
    }, $NinjaSlayer_changeText$2.$$arity = 1);
    
    Opal.def(self, '$rollDiceCommand', $NinjaSlayer_rollDiceCommand$3 = function $$rollDiceCommand(command) {
      var self = this, table = nil, $case = nil, node = nil;

      
      self.$debug("rollDiceCommand begin string", command);
      if ($truthy((table = $$($nesting, 'TABLES')['$[]'](command)))) {
        return table.$roll(self.$bcdice())};
      return (function() {$case = (node = self.$parse(command));
      if ($$($nesting, 'EV')['$===']($case)) {return self.$executeEV(node)}
      else if ($$($nesting, 'AT')['$===']($case)) {return self.$executeAT(node)}
      else if ($$($nesting, 'EL')['$===']($case)) {return self.$executeEL(node)}
      else {return nil}})();
    }, $NinjaSlayer_rollDiceCommand$3.$$arity = 1);
    self.$private();
    
    Opal.def(self, '$parse', $NinjaSlayer_parse$4 = function $$parse(command) {
      var self = this, $case = nil;

      return (function() {$case = command;
      if ($$($nesting, 'EV_RE')['$===']($case)) {return self.$parseEV($$($nesting, 'Regexp').$last_match())}
      else if ($$($nesting, 'AT_RE')['$===']($case)) {return self.$parseAT($$($nesting, 'Regexp').$last_match())}
      else if ($$($nesting, 'EL_RE')['$===']($case)) {return self.$parseEL($$($nesting, 'Regexp').$last_match())}
      else {return nil}})()
    }, $NinjaSlayer_parse$4.$$arity = 1);
    
    Opal.def(self, '$parseEV', $NinjaSlayer_parseEV$5 = function $$parseEV(m) {
      var $a, self = this, num = nil, difficulty = nil, targetValue = nil;

      
      num = m['$[]'](1).$to_i();
      difficulty = self.$integerValueOfDifficulty(($truthy($a = m['$[]'](2)) ? $a : m['$[]'](3)));
      targetValue = ($truthy($a = m['$[]'](4)) ? m['$[]'](4).$to_i() : $a);
      return $$($nesting, 'EV').$new(num, difficulty, targetValue);
    }, $NinjaSlayer_parseEV$5.$$arity = 1);
    
    Opal.def(self, '$parseAT', $NinjaSlayer_parseAT$6 = function $$parseAT(m) {
      var $a, self = this, num = nil, difficulty = nil;

      
      num = m['$[]'](1).$to_i();
      difficulty = self.$integerValueOfDifficulty(($truthy($a = m['$[]'](2)) ? $a : m['$[]'](3)));
      return $$($nesting, 'AT').$new(num, difficulty);
    }, $NinjaSlayer_parseAT$6.$$arity = 1);
    
    Opal.def(self, '$parseEL', $NinjaSlayer_parseEL$7 = function $$parseEL(m) {
      var $a, self = this, num = nil, difficulty = nil;

      
      num = m['$[]'](1).$to_i();
      difficulty = self.$integerValueOfDifficulty(($truthy($a = m['$[]'](2)) ? $a : m['$[]'](3)));
      return $$($nesting, 'EL').$new(num, difficulty);
    }, $NinjaSlayer_parseEL$7.$$arity = 1);
    
    Opal.def(self, '$executeEV', $NinjaSlayer_executeEV$8 = function $$executeEV(ev) {
      var self = this, command = nil, rollResult = nil, m = nil, numOfSuccesses = nil;

      
      command = self.$bRollCommand(ev.$num(), ev.$difficulty());
      rollResult = self.$bcdice().$bdice(command).$sub($$($nesting, 'B_ROLL_RESULT_HEAD_RE'), "");
      if ($truthy(ev.$targetValue())) {
      } else {
        return rollResult
      };
      m = /\u6210\u529F\u6570(\d+)/.$match(rollResult);
      if ($truthy(m)) {
      } else {
        self.$raise("\u6210\u529F\u6570\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093")
      };
      numOfSuccesses = m['$[]'](1).$to_i();
      if ($truthy($rb_gt(numOfSuccesses, ev.$targetValue()))) {
        return "" + (rollResult) + " \uFF1E \u30AB\u30A6\u30F3\u30BF\u30FC\u30AB\u30E9\u30C6!!"};
      return rollResult;
    }, $NinjaSlayer_executeEV$8.$$arity = 1);
    
    Opal.def(self, '$executeAT', $NinjaSlayer_executeAT$9 = function $$executeAT(at) {
      var $$10, self = this, command = nil, rollResult = nil, m = nil, values = nil, numOfMaxValues = nil;

      
      command = self.$bRollCommand(at.$num(), at.$difficulty());
      rollResult = self.$bcdice().$bdice(command).$sub($$($nesting, 'B_ROLL_RESULT_HEAD_RE'), "");
      m = /\uFF1E (\d+(?:,\d+)*)/.$match(rollResult);
      values = $send(m['$[]'](1).$split(","), 'map', [], "to_i".$to_proc());
      numOfMaxValues = $send(values, 'select', [], ($$10 = function(v){var self = $$10.$$s || this;

      
        
        if (v == null) {
          v = nil;
        };
        return v['$=='](6);}, $$10.$$s = self, $$10.$$arity = 1, $$10)).$length();
      return (function() {if ($truthy($rb_ge(numOfMaxValues, 2))) {
        return "" + (rollResult) + " \uFF1E \u30B5\u30C4\u30D0\u30C4!!"
      } else {
        return rollResult
      }; return nil; })();
    }, $NinjaSlayer_executeAT$9.$$arity = 1);
    
    Opal.def(self, '$executeEL', $NinjaSlayer_executeEL$11 = function $$executeEL(el) {
      var $$12, $$13, self = this, command = nil, rollResult = nil, m = nil, values = nil, numOfMaxValues = nil, sumOfTrueValues = nil;

      
      command = self.$bRollCommand(el.$num(), el.$difficulty());
      rollResult = self.$bcdice().$bdice(command).$sub($$($nesting, 'B_ROLL_RESULT_HEAD_RE'), "");
      m = /\uFF1E (\d+(?:,\d+)*)/.$match(rollResult);
      values = $send(m['$[]'](1).$split(","), 'map', [], "to_i".$to_proc());
      numOfMaxValues = $send(values, 'select', [], ($$12 = function(v){var self = $$12.$$s || this;

      
        
        if (v == null) {
          v = nil;
        };
        return v['$=='](6);}, $$12.$$s = self, $$12.$$arity = 1, $$12)).$length();
      sumOfTrueValues = $send(values, 'select', [], ($$13 = function(v){var self = $$13.$$s || this;

      
        
        if (v == null) {
          v = nil;
        };
        return $rb_ge(v, el.$difficulty());}, $$13.$$s = self, $$13.$$arity = 1, $$13)).$length();
      return (function() {if ($truthy($rb_ge(numOfMaxValues, 1))) {
        return "" + (rollResult) + " + " + (numOfMaxValues) + " \uFF1E " + ($rb_plus(sumOfTrueValues, numOfMaxValues))
      } else {
        return rollResult
      }; return nil; })();
    }, $NinjaSlayer_executeEL$11.$$arity = 1);
    
    Opal.def(self, '$integerValueOfDifficulty', $NinjaSlayer_integerValueOfDifficulty$14 = function $$integerValueOfDifficulty(s) {
      var self = this;

      
      if ($truthy(s)) {
      } else {
        return 4
      };
      if ($truthy(/^[2-6]$/.$match(s))) {
        return s.$to_i()};
      return $$($nesting, 'DIFFICULTY_SYMBOL_TO_INTEGER').$fetch(s.$upcase());
    }, $NinjaSlayer_integerValueOfDifficulty$14.$$arity = 1);
    
    Opal.def(self, '$bRollCommand', $NinjaSlayer_bRollCommand$15 = function $$bRollCommand(num, difficulty) {
      var self = this;

      return "" + (num) + "B6>=" + (difficulty)
    }, $NinjaSlayer_bRollCommand$15.$$arity = 2);
    Opal.const_set($nesting[0], 'SATSUBATSU_TABLE', ["\u300C\u6B7B\u306D\u30FC\u30C3\uFF01\u300D\u8179\u90E8\u306B\u5F37\u70C8\u306A\u4E00\u6483\uFF01\u3000\u6575\u306F\u304F\u306E\u5B57\u306B\u6298\u308C\u66F2\u304C\u308A\u3001\u30EF\u30A4\u30E4\u30FC\u30A2\u30AF\u30B7\u30E7\u30F3\u3081\u3044\u3066\u5439\u3063\u98DB\u3093\u3060\uFF01\uFF1A\u672C\u6765\u306E\u30C0\u30E1\u30FC\u30B8+1\u30C0\u30E1\u30FC\u30B8\u3092\u4E0E\u3048\u308B\u3002\u6575\u306F\u5F8C\u65B9\u306E\u58C1\u307E\u305F\u306F\u969C\u5BB3\u7269\u306B\u5411\u304B\u3063\u3066\u3001\u4F55\u30DE\u30B9\u3067\u3082\u307E\u3063\u3059\u3050\u5F3E\u304D\u98DB\u3070\u3055\u308C\u308B\uFF08\u4ED6\u306E\u30AD\u30E3\u30E9\u306E\u3044\u308B\u30DE\u30B9\u306F\u901A\u904E\u3059\u308B\uFF09\u3002\u58C1\u307E\u305F\u306F\u969C\u5BB3\u7269\u306B\u63A5\u89E6\u3057\u305F\u6642\u70B9\u3067\u3001\u6575\u306F\u3055\u3089\u306B1\u30C0\u30E1\u30FC\u30B8\u3092\u53D7\u3051\u308B\u3002\u6575\u306F\u3053\u306E\u6FC0\u7A81\u30C0\u30E1\u30FC\u30B8\u306B\u5BFE\u3057\u3066\u6539\u3081\u3066\u300E\u56DE\u907F\u5224\u5B9A\u300F\u3092\u884C\u3063\u3066\u3082\u826F\u3044\u3002", "\u300C\u30A4\u30E4\u30FC\u30C3\uFF01\u300D\u982D\u90E8\u3078\u306E\u75DB\u70C8\u306A\u30AB\u30E9\u30C6\uFF01\u3000\u773C\u7403\u7834\u58CA\u3082\u3057\u304F\u306F\u6FC0\u3057\u3044\u8133\u9707\u76EA\u304C\u6575\u3092\u8972\u3046\uFF01\uFF1A\u672C\u6765\u306E\u30C0\u30E1\u30FC\u30B8\u3092\u4E0E\u3048\u308B\u3002\u3055\u3089\u306B\u6575\u306E\u3010\u30CB\u30E5\u30FC\u30ED\u30F3\u3011\u3068\u3010\u30EF\u30B6\u30DE\u30A8\u3011\u304C\u305D\u308C\u305E\u308C1\u305A\u3064\u6E1B\u5C11\u3059\u308B\uFF08\u3053\u308C\u306B\u3088\u308B\u6700\u4F4E\u5024\u306F1\uFF09\u3002\u6B8B\u8650\u30DC\u30FC\u30CA\u30B9\u306B\u3088\u308A\u3010\u4E07\u672D\u3011\u304CD3\u767A\u751F\u3002\u3053\u306E\u653B\u6483\u3092\u3010\u30AB\u30EB\u30DE\uFF1A\u5584\u3011\u306E\u30AD\u30E3\u30E9\u306B\u5BFE\u3057\u3066\u884C\u3063\u3066\u3057\u307E\u3063\u305F\u5834\u5408\u3001\u3010DKK\u3011\u304CD3\u4E0A\u6607\u3059\u308B\u3002", "\u300C\u82E6\u3057\u307F\u629C\u3044\u3066\u6B7B\u306C\u304C\u3044\u3044\u300D\u6025\u6240\u3092\u60C5\u3051\u5BB9\u8D66\u306A\u304F\u7834\u58CA\uFF01\uFF1A\u672C\u6765\u306E\u30C0\u30E1\u30FC\u30B8+1\u30C0\u30E1\u30FC\u30B8\u3092\u4E0E\u3048\u308B\u3002\u8010\u3048\u96E3\u3044\u82E6\u75DB\u306B\u3088\u308A\u3001\u6575\u306F\u3010\u7CBE\u795E\u529B\u3011\u304C-2\u3055\u308C\u3001\u3010\u30CB\u30E5\u30FC\u30ED\u30F3\u3011\u304C1\u6E1B\u5C11\u3059\u308B\uFF08\u3053\u308C\u306B\u3088\u308B\u6700\u4F4E\u5024\u306F1\uFF09\u3002\u6B8B\u8650\u30DC\u30FC\u30CA\u30B9\u306B\u3088\u308A\u3010\u4E07\u672D\u3011\u304CD3\u767A\u751F\u3002\u3053\u306E\u653B\u6483\u3092\u3010\u30AB\u30EB\u30DE\uFF1A\u5584\u3011\u306E\u30AD\u30E3\u30E9\u306B\u5BFE\u3057\u3066\u884C\u3063\u3066\u3057\u307E\u3063\u305F\u5834\u5408\u3001\u3010DKK\u3011\u304CD3\u4E0A\u6607\u3059\u308B\u3002", "\u300C\u9003\u3052\u3089\u308C\u308B\u3082\u306E\u306A\u3089\u9003\u3052\u3066\u307F\u3088\u300D\u6575\u306E\u811A\u3092\u7C89\u7815\uFF01\uFF1A\u672C\u6765\u306E\u30C0\u30E1\u30FC\u30B8\u3092\u4E0E\u3048\u308B\u3002\u3055\u3089\u306B\u6575\u306E\u3010\u811A\u529B\u3011\u304CD3\u6E1B\u5C11\u3059\u308B\uFF08\u6700\u4F4E\u5024\u306F1\uFF09\u3002\u6B8B\u8650\u30DC\u30FC\u30CA\u30B9\u306B\u3088\u308A\u3010\u4E07\u672D\u3011\u304CD3\u767A\u751F\u3002\u3053\u306E\u653B\u6483\u3092\u3010\u30AB\u30EB\u30DE\uFF1A\u5584\u3011\u306E\u30AD\u30E3\u30E9\u306B\u5BFE\u3057\u3066\u884C\u3063\u3066\u3057\u307E\u3063\u305F\u5834\u5408\u3001\u3010DKK\u3011\u304CD3\u4E0A\u6607\u3059\u308B\u3002", "\u300C\u3053\u308C\u3067\u624B\u3082\u8DB3\u3082\u51FA\u307E\u3044\uFF01\u300D\u6575\u306E\u4E21\u8155\u3092\u5207\u308A\u98DB\u3070\u3057\u305F\uFF01\u3000\u9BAE\u8840\u304C\u30B9\u30D7\u30EA\u30F3\u30AF\u30E9\u30FC\u3081\u3044\u3066\u5674\u304D\u51FA\u3059\uFF01\uFF1A\u672C\u6765\u306E\u30C0\u30E1\u30FC\u30B8+1\u30C0\u30E1\u30FC\u30B8\u3092\u4E0E\u3048\u308B\u3002\u3055\u3089\u306B\u6575\u306E\u3010\u30EF\u30B6\u30DE\u30A8\u3011\u3068\u3010\u30AB\u30E9\u30C6\u3011\u304C\u305D\u308C\u305E\u308C2\u6E1B\u5C11\u3059\u308B\uFF08\u6700\u4F4E\u5024\u306F1\uFF09\u3002\u6B8B\u8650\u30DC\u30FC\u30CA\u30B9\u306B\u3088\u308A\u3010\u4E07\u672D\u3011\u304CD3\u767A\u751F\u3002\u3053\u306E\u653B\u6483\u3092\u3010\u30AB\u30EB\u30DE\uFF1A\u5584\u3011\u306E\u30AD\u30E3\u30E9\u306B\u5BFE\u3057\u3066\u884C\u3063\u3066\u3057\u307E\u3063\u305F\u5834\u5408\u3001\u3010DKK\u3011\u304CD3\u4E0A\u6607\u3059\u308B\u3002", "\u300C\u30A4\u30A4\u30A4\u30E4\u30A2\u30A2\u30A2\u30A2\u30FC\u30FC\u30FC\u30FC\u30C3\uFF01\u300D\u30E4\u30EA\u3081\u3044\u305F\u30C1\u30E7\u30C3\u30D7\u304C\u6575\u306E\u80F8\u3092\u8CAB\u901A\uFF01\u3000\u3055\u3089\u306B\u5FC3\u81D3\u3092\u63B4\u307F\u53D6\u308A\u3001\u63E1\u308A\u3064\u3076\u3057\u305F\uFF01\u3000\u30CA\u30E0\u30A2\u30DF\u30C0\u30D6\u30C4\uFF01\uFF1A\u6575\u306F\u6B8B\u308A\u3010\u4F53\u529B\u3011\u306B\u95A2\u4FC2\u306A\u304F\u5373\u6B7B\u3059\u308B\u3002\u6B8B\u8650\u30DC\u30FC\u30CA\u30B9\u306B\u3088\u308A\u3010\u4E07\u672D\u3011\u304CD6\u767A\u751F\u3002\u3053\u306E\u653B\u6483\u3092\u3010\u30AB\u30EB\u30DE\uFF1A\u5584\u3011\u306E\u30AD\u30E3\u30E9\u306B\u5BFE\u3057\u3066\u884C\u3063\u3066\u3057\u307E\u3063\u305F\u5834\u5408\u3001\u3010DKK\u3011\u304CD6\u4E0A\u6607\u3059\u308B\u3002"].$freeze());
    Opal.const_set($nesting[0], 'TABLES', $hash2(["SB"], {"SB": $$($nesting, 'Table').$new("\u30B5\u30C4\u30D0\u30C4\u8868", "1D6", $$($nesting, 'SATSUBATSU_TABLE'))}).$freeze());
    return self.$setPrefixes($rb_plus(["NJ\\d+.*", "EV\\d+.*", "AT\\d+.*", "EL\\d+.*"], $$($nesting, 'TABLES').$keys()));
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting);
})(Opal);
>>>>>>> 0dfe93a1d368ac1ad3ef24167156b31a70848848
