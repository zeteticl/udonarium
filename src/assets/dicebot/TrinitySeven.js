/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$setPrefixes', '$debug', '$=~', '$get_NAME_table', '$get_NAMEtwo_table', '$+', '$to_i', '$last_match', '$rollHit', '$rollDamage', '$roll', '$getHitRollResult', '$>=', '$<=', '$<', '$getRollDamageCritialText', '$empty?', '$join', '$>', '$to_s', '$==', '$collect', '$split', '$sort!', '$clone', '$times', '$shift', '$push', '$pop', '$nil?', '$*', '$**', '$each', '$get_table_by_number']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'TrinitySeven');

    var $nesting = [self].concat($parent_nesting), $TrinitySeven_rollDiceCommand$1, $TrinitySeven_rollHit$2, $TrinitySeven_getHitRollResult$3, $TrinitySeven_rollDamage$4, $TrinitySeven_getRollDamageCritialText$5, $TrinitySeven_check_1D100$9, $TrinitySeven_get_NAME_table$10, $TrinitySeven_get_NAMEtwo_table$11;

    
    Opal.const_set($nesting[0], 'ID', "TrinitySeven");
    Opal.const_set($nesting[0], 'NAME', "\u30C8\u30EA\u30CB\u30C6\u30A3\u30BB\u30D6\u30F3RPG");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u3068\u308A\u306B\u3066\u3044\u305B\u3075\u3093RPG");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u304C\u5909\u52D5\u3057\u305F\u547D\u4E2D\u53CA\u3073\u30017\u306E\u51FA\u76EE\u304C\u3042\u308B\u5834\u5408\u306E\u30C0\u30E1\u30FC\u30B8\u8A08\u7B97\u304C\u884C\u306A\u3048\u307E\u3059\u3002\n" + "\u306A\u304A\u3001\u901A\u5E38\u306E\u5224\u5B9A\u3068\u3057\u3066\u3082\u5229\u7528\u3067\u304D\u307E\u3059\u3002\n" + "\n" + "\u30FB\u767A\u52D5/\u547D\u4E2D\u3000\uFF3BTR(\u00B1c*)<=(x\uFF09\u00B1\uFF08y*\uFF09\u53C8\u306F TR<=(x\uFF09\u306A\u3069\uFF3D*\u306F\u5FC5\u9808\u3067\u306F\u306A\u3044\u9805\u76EE\u3067\u3059\u3002\n" + "\"TR(\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u306E\u4FEE\u6B63\u5024*)\uFF1C\uFF1D(\u767A\u52D5/\u547D\u4E2D)\u00B1(\u767A\u52D5/\u547D\u4E2D\u306E\u4FEE\u6B63\u5024*)\"\n" + "\u52A0\u7B97\u6E1B\u7B97\u306E\u307F\u4FEE\u6B63\u5024\u3082\u4ED8\u3051\u3089\u308C\u307E\u3059\u3002 \uFF3B\u4FEE\u6B63\u5024\uFF3D\u306F\u5FC5\u9808\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002\n" + "\u4F8B\uFF09TR<=50\tTR\uFF1C\uFF1D60\uFF0B20\tTR7\uFF1C\uFF1D40\tTR-7\uFF1C\uFF1D80\tTR\uFF0B10\uFF1C\uFF1D80\uFF0B20\n" + "\n" + "\u30FB\u30C0\u30E1\u30FC\u30B8\u8A08\u7B97\u3000\uFF3B\uFF08x)DM(c*)\u00B1(y*\uFF09\u53C8\u306F\uFF08x)DM(c*)\u53C8\u306F\uFF08x)DM\u00B1(y*\uFF09\uFF3D*\u306F\u5FC5\u9808\u3067\u306F\u306A\u3044\u9805\u76EE\u3067\u3059\u3002\n" + "\"(\u30C0\u30A4\u30B9\u6570)DM(7\u306E\u51FA\u76EE\u306E\u6570*)\uFF0B(\u4FEE\u6B63*)\"\n" + "\u52A0\u7B97\u6E1B\u7B97\u306E\u307F\u4FEE\u6B63\u5024\u3082\u4ED8\u3051\u3089\u308C\u307E\u3059\u3002 \uFF3B7\u306E\u51FA\u76EE\u306E\u6570\uFF3D\u304A\u3088\u3073\uFF3B\u4FEE\u6B63\u5024\uFF3D\u306F\u5FC5\u9808\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002\n" + "\u4F8B\uFF096DM2+1\t5DM2\t4DM\t\t3DM+3\n" + "\u5F8C\u304B\u30897\u306E\u51FA\u76EE\u306B\u5909\u66F4\u3059\u308B\u5834\u5408\u306FC(7*6\uFF0B5)\u306E\u3088\u3046\u306B\u5165\u529B\u3057\u3066\u8A08\u7B97\u3057\u3066\u304F\u3060\u3055\u3044\u3002\n" + "\n" + "\u30FB\u540D\u524D\u8868\u3000[TRNAME]\n" + "\u540D\u5B57\u3068\u540D\u524D\u3092\u51FA\u3057\u307E\u3059\u3002PC\u3084\u7A81\u7136\u73FE\u308C\u305FNPC\u306E\u540D\u4ED8\u3051\u306B\u3069\u3046\u305E\u3002\n" + "\n");
    self.$setPrefixes(["(\\d+)DM\\d+(\\+|\\-)?\\d*", "(\\d+)DM(\\+|\\-)?\\d*", "TR(\\d+)<=(\\d+)(\\+|\\-)?\\d*", "TR<=(\\d+)(\\+|\\-)?\\d*", "TR(\\+|\\-)?(\\d+)<=(\\d+)(\\+|\\-)?\\d*", "TRNAME"]);
    
    Opal.def(self, '$rollDiceCommand', $TrinitySeven_rollDiceCommand$1 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, firstName = nil, secondName = nil, critical = nil, target = nil, modify = nil, diceCount = nil;

      
      self.$debug("rollDiceCommand command", command);
      if ($truthy(/TRNAME/['$=~'](command))) {
        
        $b = self.$get_NAME_table(), $a = Opal.to_ary($b), (firstName = ($a[0] == null ? nil : $a[0])), $b;
        $b = self.$get_NAMEtwo_table(), $a = Opal.to_ary($b), (secondName = ($a[0] == null ? nil : $a[0])), $b;
        return "" + (firstName) + " , " + (secondName);};
      if ($truthy(/^TR([\+\-\d]*)<=([\d]*)([\+\-\d]*)/['$=~'](command))) {
        
        critical = $rb_plus($$($nesting, 'Regexp').$last_match(1).$to_i(), 7);
        target = $$($nesting, 'Regexp').$last_match(2).$to_i();
        modify = $$($nesting, 'Regexp').$last_match(3).$to_i();
        return self.$rollHit(command, critical, target, modify);};
      critical = 0;
      if ($truthy(/([\d]*)DM([\d]*)([\+\-\d]*)/['$=~'](command))) {
        
        diceCount = $$($nesting, 'Regexp').$last_match(1).$to_i();
        critical = $$($nesting, 'Regexp').$last_match(2).$to_i();
        modify = $$($nesting, 'Regexp').$last_match(3).$to_i();
        return self.$rollDamage(command, diceCount, critical, modify);};
      return "";
    }, $TrinitySeven_rollDiceCommand$1.$$arity = 1);
    
    Opal.def(self, '$rollHit', $TrinitySeven_rollHit$2 = function $$rollHit(command, critical, target, modify) {
      var $a, $b, self = this, total = nil, diceText = nil, result = nil, text = nil;

      
      target = $rb_plus(target, modify);
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (total = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      result = self.$getHitRollResult(total, target, critical);
      text = "" + "(" + (command) + ") \uFF1E " + (total) + "[" + (diceText) + "] \uFF1E " + (result);
      self.$debug("rollDiceCommand result text", text);
      return text;
    }, $TrinitySeven_rollHit$2.$$arity = 4);
    
    Opal.def(self, '$getHitRollResult', $TrinitySeven_getHitRollResult$3 = function $$getHitRollResult(total, target, critical) {
      var self = this;

      
      if ($truthy($rb_ge(total, 96))) {
        return "\u30D5\u30A1\u30F3\u30D6\u30EB"};
      if ($truthy($rb_le(total, critical))) {
        return "\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB"};
      if ($truthy($rb_le(total, target))) {
        return "\u6210\u529F"};
      return "\u5931\u6557";
    }, $TrinitySeven_getHitRollResult$3.$$arity = 3);
    
    Opal.def(self, '$rollDamage', $TrinitySeven_rollDamage$4 = function $$rollDamage(command, diceCount, critical, modify) {
      var $a, $b, self = this, total = nil, diceText = nil, additionalListText = nil, additionalList = nil, modifyText = nil, text = nil;

      
      if ($truthy($rb_lt(diceCount, critical))) {
        return ""};
      $b = self.$roll(diceCount, 6), $a = Opal.to_ary($b), (total = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      additionalListText = "";
      $b = self.$getRollDamageCritialText(diceCount, critical, total, diceText, modify), $a = Opal.to_ary($b), (total = ($a[0] == null ? nil : $a[0])), (additionalList = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(additionalList['$empty?']())) {
      } else {
        additionalListText = "" + "\u2192[" + (additionalList.$join(",")) + "]"
      };
      modifyText = "";
      if ($truthy($rb_gt(modify, 0))) {
        modifyText = "" + "+" + (modify)};
      if ($truthy($rb_lt(modify, 0))) {
        modifyText = modify.$to_s()};
      text = "" + "(" + (command) + ") [" + (diceText) + "]" + (additionalListText) + (modifyText) + " \uFF1E " + (total);
      return text;
    }, $TrinitySeven_rollDamage$4.$$arity = 4);
    
    Opal.def(self, '$getRollDamageCritialText', $TrinitySeven_getRollDamageCritialText$5 = function $$getRollDamageCritialText(diceCount, critical, total, diceText, modify) {
      var $$6, $$7, $$8, self = this, diceList = nil, restDice = nil, max = nil;

      
      diceList = [];
      if (critical['$=='](0)) {
        
        total = $rb_plus(total, modify);
        return [total, diceList];};
      diceList = $send(diceText.$split(/,/), 'collect', [], ($$6 = function(i){var self = $$6.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i.$to_i();}, $$6.$$s = self, $$6.$$arity = 1, $$6));
      diceList['$sort!']();
      restDice = diceList.$clone();
      if ($truthy($rb_gt(critical, diceCount))) {
        critical = diceCount};
      $send(critical, 'times', [], ($$7 = function(){var self = $$7.$$s || this;

      
        restDice.$shift();
        diceList.$shift();
        return diceList.$push(7);}, $$7.$$s = self, $$7.$$arity = 0, $$7));
      max = restDice.$pop();
      if ($truthy(max['$nil?']())) {
        max = 1};
      total = $rb_plus($rb_times(max, (7)['$**'](critical)), modify);
      $send(restDice, 'each', [], ($$8 = function(i){var self = $$8.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return (total = $rb_plus(total, i));}, $$8.$$s = self, $$8.$$arity = 1, $$8));
      return [total, diceList];
    }, $TrinitySeven_getRollDamageCritialText$5.$$arity = 5);
    
    Opal.def(self, '$check_1D100', $TrinitySeven_check_1D100$9 = function $$check_1D100(_total, dice_total, _cmp_op, _target) {
      var self = this;

      if ($truthy($rb_ge(dice_total, 96))) {
        return " \uFF1E \u30D5\u30A1\u30F3\u30D6\u30EB"
      } else if ($truthy($rb_le(dice_total, 7))) {
        return " \uFF1E \u30AF\u30EA\u30C6\u30A3\u30AB\u30EB"
      } else {
        return nil
      }
    }, $TrinitySeven_check_1D100$9.$$arity = 4);
    
    Opal.def(self, '$get_NAME_table', $TrinitySeven_get_NAME_table$10 = function $$get_NAME_table() {
      var $a, $b, self = this, table = nil, dice_now = nil;

      
      table = [[1, "\u6625\u65E5"], [2, "\u6D45\u898B"], [3, "\u98A8\u9593"], [4, "\u795E\u7121\u6708"], [5, "\u5009\u7530"], [6, "\u4E0D\u52D5"], [7, "\u5C71\u5948"], [8, "\u30B7\u30E3\u30EB\u30ED\u30C3\u30AF"], [9, "\u9727\u96A0"], [10, "\u679C\u5FC3"], [11, "\u4ECA\u4E95"], [12, "\u9577\u702C"], [13, "\u660E\u667A"], [14, "\u98A8\u796D"], [15, "\u5FD7\u8CAB"], [16, "\u4E00\u6587\u5B57"], [17, "\u6708\u591C\u91CE"], [18, "\u685C\u7530\u9580"], [19, "\u679C\u702C"], [20, "\u4E5D\u5341\u4E5D"], [21, "\u901F\u6C34"], [22, "\u7247\u6850"], [23, "\u8449\u6708"], [24, "\u30A6\u30A3\u30F3\u30B6\u30FC"], [25, "\u6642\u96E8\u91CC"], [26, "\u795E\u57CE"], [27, "\u6C34\u969B"], [28, "\u4E00\u30CE\u6C5F"], [29, "\u4EC1\u85E4"], [30, "\u5317\u5343\u4F4F"], [31, "\u897F\u6751"], [32, "\u8ACF\u8A2A"], [33, "\u85E4\u5BAE"], [34, "\u5FA1\u4EE3"], [35, "\u6A58"], [36, "\u9727\u751F"], [37, "\u767D\u77F3"], [38, "\u690E\u540D"], [39, "\u7DBE\u5C0F\u8DEF"], [40, "\u4E8C\u6761"], [41, "\u5149\u660E\u5BFA"], [42, "\u6625\u79CB"], [43, "\u96EA\u898B"], [44, "\u5200\u6761\u9662"], [45, "\u30E9\u30F3\u30AB\u30B9\u30BF\u30FC"], [46, "\u30CF\u30AF\u30A2"], [47, "\u30A8\u30EB\u30BF\u30CB\u30A2"], [48, "\u30CF\u30FC\u30CD\u30B9"], [49, "\u30A2\u30A6\u30B0\u30B9\u30C8\u30A5\u30B9"], [50, "\u690E\u540D\u753A"], [51, "\u9375\u5B88"], [52, "\u831C\u30F6\u5D0E"], [53, "\u93AE\u5BAE"], [54, "\u7F8E\u67F3"], [55, "\u9396\u3005\u585A"], [56, "\u6AFB\u30CE\u675C"], [57, "\u93E1\u30F6\u5B88"], [58, "\u8F1D\u4E95"], [59, "\u5357\u967D"], [60, "\u96EA\u4E43\u57CE"], [61, "\u516D\u89D2\u5C4B"], [62, "\u9234\u3005"], [63, "\u6771\u4E09\u6761"], [64, "\u6731\u96C0\u9662"], [65, "\u9752\u9F8D\u9662"], [66, "\u767D\u864E\u9662"], [67, "\u7384\u6B66\u9662"], [68, "\u9E92\u9E9F\u9662"], [69, "\u30EA\u30FC\u30B7\u30E5\u30BF\u30C3\u30C8"], [70, "\u30B5\u30F3\u30AF\u30C1\u30E5\u30A2\u30EA"], [71, "\u516D\u5B9F"], [72, "\u9808\u85E4"], [73, "\u30DF\u30EC\u30CB\u30A2\u30E0"], [74, "\u4E03\u91CC"], [75, "\u4E09\u679D"], [76, "\u516B\u6BBF"], [77, "\u85E4\u91CC"], [78, "\u4E45\u5B9D"], [79, "\u6771"], [80, "\u8D64\u897F"], [81, "\u795E\u30F6\u5D0E"], [82, "\u30B0\u30E9\u30F3\u30B7\u30A2"], [83, "\u30C0\u30FC\u30AF\u30D6\u30FC\u30EC\u30FC\u30C9"], [84, "\u5929\u5149\u5BFA"], [85, "\u6708\u898B\u91CC"], [86, "\u7483\u5BAE"], [87, "\u85E4\u898B\u6FA4"], [88, "\u8D64\u8056"], [89, "\u59EB\u5BAE"], [90, "\u83EF\u30CE\u5BAE"], [91, "\u5929\u624D"], [92, "\u9054\u4EBA"], [93, "\u8CE2\u8005"], [94, "\u75BE\u98A8"], [95, "\u6D77\u306E"], [96, "\u6700\u5F37"], [97, "\u51F6\u5668"], [98, "\u707C\u71B1"], [99, "\u4EBA\u9593\u5175\u5668"], [100, "\u9B54\u738B"]];
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (dice_now = ($a[0] == null ? nil : $a[0])), $b;
      return self.$get_table_by_number(dice_now, table);
    }, $TrinitySeven_get_NAME_table$10.$$arity = 0);
    return (Opal.def(self, '$get_NAMEtwo_table', $TrinitySeven_get_NAMEtwo_table$11 = function $$get_NAMEtwo_table() {
      var $a, $b, self = this, table = nil, dice_now = nil;

      
      table = [[1, "\u30A2\u30E9\u30BF/\u8056"], [2, "\u30A2\u30D3\u30A3\u30B9/\u30EA\u30EA\u30B9"], [3, "\u30EB\u30FC\u30B0/\u30EC\u30F4\u30A3"], [4, "\u30E9\u30B9\u30C8/\u30A2\u30EA\u30F3"], [5, "\u30BD\u30E9/\u30E6\u30A4"], [6, "\u30A4\u30FC\u30EA\u30A2\u30B9/\u30A2\u30AD\u30AA"], [7, "\u30A2\u30AB\u30FC\u30B7\u30E3/\u30DF\u30E9"], [8, "\u30A2\u30EA\u30A8\u30B9/\u30EA\u30FC\u30BC\u30ED\u30C3\u30C6"], [9, "\u30E0\u30E9\u30B5\u30E1/\u30B7\u30E3\u30EB\u30E0"], [10, "\u9F8D\u8CB4/\u7ADC\u59EB"], [11, "\u82F1\u6A39/\u6625\u83DC"], [12, "\u6E96\u4E00/\u6E4A"], [13, "\u6025\u53F8\u90CE/\u5149\u7406"], [14, "\u5915\u4E5F/\u611B\u5948"], [15, "\u6674\u5F66/\u30A2\u30AD"], [16, "\u75BE\u98A8/\u30E4\u30B7\u30ED"], [17, "\u30AB\u30AC\u30EA/\u706F\u82B1"], [18, "\u6B21\u90CE/\u512A\u90FD"], [19, "\u6625\u592A\u90CE/\u9759\u7406"], [20, "\u30B8\u30F3/\u6642\u96E8"], [21, "\u30A4\u30AA\u30EA/\u4F0A\u7E54"], [22, "\u30E6\u30A6\u30D2/\u512A\u59EB"], [23, "\u30B5\u30C4\u30AD/\u7FE0\u540D"], [24, "\u30B7\u30E5\u30E9\u30A4/\u30B5\u30AF\u30E9"], [25, "\u30DF\u30CA\u30C5\u30AD/\u59EB\u4E43"], [26, "\u30AB\u30A8\u30C7/\u512A\u6A39\u83DC"], [27, "\u30CF\u30EB/\u30D5\u30E6"], [28, "\u30AA\uFF44\u30FC\u30EB/\u745E\u6C5F"], [29, "\u30CB\u30C8\u30A5\u30EC\u30B9\u30C8/\u30AD\u30EA\u30AB"], [30, "\u30B9\u30AB\u30FC/\u7DBE\u702C"], [31, "\u771F\u590F/\u5C0F\u590F"], [32, "\u5149\u4E00/\u306E\u306E\u304B"], [33, "\u5F69/\u7FE0"], [34, "\u30C8\u30A6\u30AB/\u67CA\u82B1"], [35, "\u547D/\u30DF\u30B3\u30C8"], [36, "\u53F8/\u3064\u304B\u3055"], [37, "\u3086\u3068\u308A/\u306A\u3054\u307F"], [38, "\u51AC\u5F66/\u89B3\u6708"], [39, "\u30AB\u30EC\u30F3/\u83EF\u604B"], [40, "\u6E05\u6B21\u90CE/\u4E9C\u77E2"], [41, "\u30B5\u30FC\u30C9/\u5922\u5B50"], [42, "\u30DC\u30C3\u30AF\u30B9/\u8A69\u5B50"], [43, "\u30D8\u30EA\u30AA\u30B9/\u30AB\u30A8\u30C7"], [44, "\u30B2\u30FC\u30C8/\u4EAC\u9999"], [45, "\u30AA\u30F3\u30EA\u30FC/\u30D1\u30C8\u30EA\u30B7\u30A2"], [46, "\u30B6\u30C3\u30CF\u30FC\u30AF/\u30A2\u30FC\u30EA"], [47, "\u30E9\u30B9\u30BF\u30D0\u30F3/\u30E9\u30B9\u30C6\u30A3"], [48, "\u685C\u82B1/\u71C1\u6F84"], [49, "\u8A08\u90FD/\u30EA\u30F4\u30A3\u30A2"], [50, "\u30AB\u30EB\u30F4\u30A1\u30EA\u30AA/\u9999\u591C"], [51, "\u60A0\u4EBA/\u591C\u3005\u5B50"], [52, "\u592A\u5B50/\u7FBD\u83DC"], [53, "\u5915\u7ACB/\u5915\u51EA"], [54, "\u30A2\u30EB\u30D5/\u611B\u7F8E"], [55, "\u30D5\u30A1\u30ED\u30B9/\u706F\u5229"], [56, "\u30B9\u30D7\u30FC\u30C8\u30CB\u30AF/\u8A69\u59EB"], [57, "\u30A2\u30FC\u30CD\u30B9\u30C8/\u7D2F"], [58, "\u30CA\u30A4\u30F3/\u30AB\u30B0\u30E4"], [59, "\u30AF\u30EA\u30A2/\u30D2\u30DE\u30EF\u30EA"], [60, "\u30A6\u30A9\u30FC\u30AB\u30FC/\u30AA\u30EA\u30D3\u30A2"], [61, "\u30C0\u30FC\u30AF/\u30AF\u30AA\u30F3"], [62, "\u30A6\u30A7\u30A4\u30F4/\u51DB"], [63, "\u30EB\u30FC\u30F3/\u30DE\u30EA\u30A8"], [64, "\u30A8\u30F3\u30AE/\u30BB\u30A4\u30AE"], [65, "\u30B7\u30E9\u30CC\u30A4/\u30DF\u30E9\u30A4"], [66, "\u30D6\u30E9\u30A4\u30F3/\u30AD\u30BA\u30CA"], [67, "\u30AF\u30ED\u30A6/\u30AB\u30CA\u30BF"], [68, "\u30B9\u30EC\u30A4\u30E4\u30FC/\u30D2\u30AB\u30EB"], [69, "\u30EC\u30B9/\u30DF\u30EA\u30A2\u30EA\u30A2"], [70, "\u30DF\u30D5\u30E6/\u30B5\u30EA\u30A8\u30EB"], [71, "\u9CF4\u592E/\u97F3\u592E"], [72, "\u30E2\u30F3\u30B8/\u7406\u4E9C"], [73, "\u30D1\u30EB\u30C7\u30E2\u30F3\u30C8\u30A5\u30E0/\u30B9\u30CA\u30AA"], [74, "\u30DF\u30B7\u30A7\u30EB/\u8A69\u7A42"], [75, "\u30D5\u30EC\u30F3\u30BA/\u30B5\u30F3"], [76, "\u30B5\u30C8\u30EA/\u8B58"], [77, "\u30ED\u30FC\u30C9/\u552F\u82B1"], [78, "\u30AF\u30ED\u30CE\u30B9/\u4E45\u5B9D"], [79, "\u30D5\u30A3\u30E9\u30C7\u30EB\u30D5\u30A3\u30A2/\u51AC\u6D77"], [80, "\u30C6\u30A3\u30F3\u30C0\u30ED\u30B9/\u7F8E\u661F"], [81, "\u52C7\u5F25/\u30E6\u30FC\u30EA\u30B9"], [82, "\u30A8\u30A4\u30C8/\u30A2\u30F3\u30B8\u30A7\u30E9"], [83, "\u30B5\u30BF\u30F3/\u30EB\u30B7\u30A8\u30EB"], [84, "\u30A8\u30FC\u30B9/\u5C0F\u6CE2"], [85, "\u30BB\u30FC\u30B8/\u80E1\u8776"], [86, "\u5FCD/\u5343\u4E4B"], [87, "\u91CD\u543E/\u30AD\u30EA\u30B3"], [88, "\u30DE\u30A4\u30B1\u30EB/\u30DF\u30DB\u30B7"], [89, "\u30AB\u30BA\u30DE/\u9DB4\u9999"], [90, "\u30E4\u30DE\u30C8/\u30A8\u30EA\u30B7\u30A8\u30EB"], [91, "\u6B74\u53F2\u4E0A\u306E\u4EBA\u7269\u306E\u540D\u524D\uFF08\u4FE1\u9577\u3001\u30B8\u30E3\u30F3\u30CC\u306A\u3069\uFF09"], [92, "\u30B9\u30DD\u30FC\u30C4\u9078\u624B\u306E\u540D\u524D\uFF08\u30D9\u30C3\u30AB\u30E0\u3001\u6C99\u4FDD\u91CC\u306A\u3069\uFF09"], [93, "\u5B66\u8005\u306E\u540D\u524D\uFF08\u30BD\u30AF\u30E9\u30C6\u30B9\u3001\u30A8\u30EC\u30CA\u306A\u3069\uFF09"], [94, "\u30A2\u30A4\u30C9\u30EB\u306E\u540D\u524D\uFF08\u30BF\u30AF\u30E4\u3001\u8056\u5B50\u306A\u3069\uFF09"], [95, "\u571F\u5730\u3001\u56FD\u3001\u753A\u306E\u540D\u524D\uFF08\u30A4\u30F3\u30B0\u30E9\u30F3\u30C9\u3001\u30EF\u30B7\u30F3\u30C8\u30F3\u306A\u3069\uFF09"], [96, "\u30E2\u30F3\u30B9\u30BF\u30FC\u306E\u540D\u524D\uFF08\u30C9\u30E9\u30B4\u30F3\u3001\u30E9\u30DF\u30A2\u306A\u3069\uFF09"], [97, "\u6B66\u5668\u9632\u5177\u306E\u540D\u524D\uFF08\u30BD\u30FC\u30C9\u3001\u30E1\u30A4\u30EB\u306A\u3069\uFF09"], [98, "\u81EA\u7136\u73FE\u8C61\u306E\u540D\u524D\uFF08\u30AB\u30B6\u30F3\u30CF\u30EA\u30B1\u30FC\u30F3\u306A\u3069\uFF09"], [99, "\u6A5F\u68B0\u306E\u540D\u524D\uFF08\u6D17\u6FEF\u6A5F\u3001\u30C6\u30EC\u30D3\u306A\u3069\uFF09"], [100, "\u76EE\u306B\u3064\u3044\u305F\u7269\u306E\u540D\u524D\uFF08\u30B7\u30E3\u30FC\u30DA\u30F3\u3001\u30E1\u30AC\u30CD\u306A\u3069\uFF09"]];
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (dice_now = ($a[0] == null ? nil : $a[0])), $b;
      return self.$get_table_by_number(dice_now, table);
    }, $TrinitySeven_get_NAMEtwo_table$11.$$arity = 0), nil) && 'get_NAMEtwo_table';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
