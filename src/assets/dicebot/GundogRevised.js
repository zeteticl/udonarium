/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$>=', '$<=', '$floor', '$/', '$-', '$*', '$+']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Gundog');

    var $nesting = [self].concat($parent_nesting), $Gundog_check_1D100$1, $Gundog_isD9$2;

    
    Opal.const_set($nesting[0], 'ID', "Gundog");
    Opal.const_set($nesting[0], 'NAME', "\u30AC\u30F3\u30C9\u30C3\u30B0");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u304B\u3093\u3068\u3064\u304F");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u5931\u6557\u3001\u6210\u529F\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u3068\u30ED\u30FC\u30EB\u306E\u9054\u6210\u5024\u306E\u81EA\u52D5\u5224\u5B9A\u3092\u884C\u3044\u307E\u3059\u3002\n" + "nD9\u30ED\u30FC\u30EB\u3082\u5BFE\u5FDC\u3002\n");
    
    Opal.def(self, '$check_1D100', $Gundog_check_1D100$1 = function $$check_1D100(total, _dice_total, cmp_op, target) {
      var self = this, dig10 = nil, dig1 = nil;

      
      if (cmp_op['$==']("<=")) {
      } else {
        return ""
      };
      if ($truthy($rb_ge(total, 100))) {
        return " \uFF1E \u30D5\u30A1\u30F3\u30D6\u30EB"
      } else if ($truthy($rb_le(total, 1))) {
        return " \uFF1E \u7D76\u5BFE\u6210\u529F(\u9054\u6210\u50241+SL)"
      } else if ($truthy($rb_le(total, target))) {
        
        dig10 = $rb_divide(total, 10).$floor();
        dig1 = $rb_minus(total, $rb_times(dig10, 10));
        if ($truthy($rb_ge(dig10, 10))) {
          dig10 = 0};
        if ($truthy($rb_ge(dig1, 10))) {
          dig1 = 0};
        if ($truthy($rb_le(dig1, 0))) {
          return " \uFF1E \u30AF\u30EA\u30C6\u30A3\u30AB\u30EB(\u9054\u6210\u502420+SL)"
        } else {
          return "" + " \uFF1E \u6210\u529F(\u9054\u6210\u5024" + ($rb_plus(dig10, dig1)) + "+SL)"
        };
      } else {
        return " \uFF1E \u5931\u6557"
      };
    }, $Gundog_check_1D100$1.$$arity = 4);
    return (Opal.def(self, '$isD9', $Gundog_isD9$2 = function $$isD9() {
      var self = this;

      return true
    }, $Gundog_isD9$2.$$arity = 0), nil) && 'isD9';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
Opal.loaded(["diceBot/Gundog.js"]);
/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$setPrefixes', '$==', '$>=', '$<=', '$floor', '$/', '$-', '$*', '$+', '$upcase', '$=~', '$last_match', '$to_i', '$parren_killer', '$getDamageTypeAndTable', '$getFumbleTypeAndTable', '$empty?', '$roll', '$collect', '$split', '$each', '$<', '$>', '$[]', '$===']);
  
  self.$require("diceBot/Gundog");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'GundogRevised');

    var $nesting = [self].concat($parent_nesting), $GundogRevised_check_1D100$1, $GundogRevised_isD9$2, $GundogRevised_rollDiceCommand$3, $GundogRevised_getDamageTypeAndTable$6, $GundogRevised_getFumbleTypeAndTable$7;

    
    Opal.const_set($nesting[0], 'ID', "GundogRevised");
    Opal.const_set($nesting[0], 'NAME', "\u30AC\u30F3\u30C9\u30C3\u30B0\u30FB\u30EA\u30F4\u30A1\u30A4\u30BA\u30C9");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u304B\u3093\u3068\u3064\u304F\u308A\u3046\u3042\u3044\u3059\u3068");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u5931\u6557\u3001\u6210\u529F\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u3068\u30ED\u30FC\u30EB\u306E\u9054\u6210\u5024\u306E\u81EA\u52D5\u5224\u5B9A\u3092\u884C\u3044\u307E\u3059\u3002\n" + "nD9\u30ED\u30FC\u30EB\u3082\u5BFE\u5FDC\u3002\n" + "\u30FB\u30C0\u30E1\u30FC\u30B8\u30DA\u30CA\u30EB\u30C6\u30A3\u8868\u3000\u3000(\uFF5EDPTx) (x:\u4FEE\u6B63)\n" + "\u3000\u5C04\u6483(SDPT)\u3001\u683C\u95D8(MDPT)\u3001\u8ECA\u4E21(VDPT)\u3001\u6C4E\u7528(GDPT)\u306E\u5404\u8868\u3092\u5F15\u304F\u3053\u3068\u304C\u51FA\u6765\u307E\u3059\u3002\n" + "\u3000\u4FEE\u6B63\u3092\u5F8C\u308D\u306B\u66F8\u304F\u3053\u3068\u3082\u51FA\u6765\u307E\u3059\u3002\n" + "\u30FB\u30D5\u30A1\u30F3\u30D6\u30EB\u8868\u3000\u3000\u3000\u3000\u3000\u3000(\uFF5EFTx)  (x:\u4FEE\u6B63)\n" + "\u3000\u5C04\u6483(SFT)\u3001\u683C\u95D8(MFT)\u3001\u6295\u64F2(TFT)\u306E\u5404\u8868\u3092\u5F15\u304F\u3053\u3068\u304C\u51FA\u6765\u307E\u3059\u3002\n" + "\u3000\u4FEE\u6B63\u3092\u5F8C\u308D\u306B\u66F8\u304F\u3053\u3068\u3082\u51FA\u6765\u307E\u3059\u3002\n");
    self.$setPrefixes(["(.DPT|.FT)(\\+|\\-)?\\d*"]);
    
    Opal.def(self, '$check_1D100', $GundogRevised_check_1D100$1 = function $$check_1D100(total, _dice_total, cmp_op, target) {
      var self = this, dig10 = nil, dig1 = nil;

      
      if (cmp_op['$==']("<=")) {
      } else {
        return ""
      };
      if ($truthy($rb_ge(total, 100))) {
        return " \uFF1E \u30D5\u30A1\u30F3\u30D6\u30EB"
      } else if ($truthy($rb_le(total, 1))) {
        return " \uFF1E \u30D9\u30A2\u30EA\u30FC(\u9054\u6210\u50241+SL)"
      } else if ($truthy($rb_le(total, target))) {
        
        dig10 = $rb_divide(total, 10).$floor();
        dig1 = $rb_minus(total, $rb_times(dig10, 10));
        if ($truthy($rb_ge(dig10, 10))) {
          dig10 = 0};
        if ($truthy($rb_ge(dig1, 10))) {
          dig1 = 0};
        if ($truthy($rb_le(dig1, 0))) {
          return " \uFF1E \u30AF\u30EA\u30C6\u30A3\u30AB\u30EB(\u9054\u6210\u502420+SL)"
        } else {
          return "" + " \uFF1E \u6210\u529F(\u9054\u6210\u5024" + ($rb_plus(dig10, dig1)) + "+SL)"
        };
      } else {
        return " \uFF1E \u5931\u6557"
      };
    }, $GundogRevised_check_1D100$1.$$arity = 4);
    
    Opal.def(self, '$isD9', $GundogRevised_isD9$2 = function $$isD9() {
      var self = this;

      return true
    }, $GundogRevised_isD9$2.$$arity = 0);
    
    Opal.def(self, '$rollDiceCommand', $GundogRevised_rollDiceCommand$3 = function $$rollDiceCommand(command) {
      var $a, $b, $$4, $$5, self = this, string = nil, table = nil, ttype = nil, type = nil, dice = nil, mod = nil, head = nil, diceText = nil, diceArray = nil, diceOriginalText = nil, output = nil;

      
      string = command.$upcase();
      table = [];
      ttype = "";
      type = "";
      dice = 0;
      mod = 0;
      if ($truthy(/(\w)DPT([\+\-\d]*)/i['$=~'](string))) {
        
        ttype = "\u30C0\u30E1\u30FC\u30B8\u30DA\u30CA\u30EB\u30C6\u30A3\u30FC";
        head = $$($nesting, 'Regexp').$last_match(1);
        if ($truthy($$($nesting, 'Regexp').$last_match(2))) {
          mod = self.$parren_killer("" + "(0" + ($$($nesting, 'Regexp').$last_match(2)) + ")").$to_i()};
        $b = self.$getDamageTypeAndTable(head), $a = Opal.to_ary($b), (type = ($a[0] == null ? nil : $a[0])), (table = ($a[1] == null ? nil : $a[1])), $b;};
      if ($truthy(/(\w)FT([\+\-\d]*)/i['$=~'](string))) {
        
        ttype = "\u30D5\u30A1\u30F3\u30D6\u30EB";
        head = $$($nesting, 'Regexp').$last_match(1);
        if ($truthy($$($nesting, 'Regexp').$last_match(2))) {
          mod = self.$parren_killer("" + "(0" + ($$($nesting, 'Regexp').$last_match(2)) + ")").$to_i()};
        $b = self.$getFumbleTypeAndTable(head), $a = Opal.to_ary($b), (type = ($a[0] == null ? nil : $a[0])), (table = ($a[1] == null ? nil : $a[1])), $b;};
      if ($truthy(type['$empty?']())) {
        return "1"};
      $b = self.$roll(2, 10), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      dice = mod;
      diceArray = $send(diceText.$split(/,/), 'collect', [], ($$4 = function(i){var self = $$4.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i.$to_i();}, $$4.$$s = self, $$4.$$arity = 1, $$4));
      $send(diceArray, 'each', [], ($$5 = function(i){var self = $$5.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        if ($truthy($rb_lt(i, 10))) {
          return (dice = $rb_plus(dice, i))
        } else {
          return nil
        };}, $$5.$$s = self, $$5.$$arity = 1, $$5));
      diceOriginalText = dice;
      if ($truthy($rb_lt(dice, 0))) {
        dice = 0};
      if ($truthy($rb_gt(dice, 18))) {
        dice = 18};
      output = "" + (type) + (ttype) + "\u8868[" + (diceOriginalText) + "] \uFF1E " + (table['$[]'](dice));
      return output;
    }, $GundogRevised_rollDiceCommand$3.$$arity = 1);
    
    Opal.def(self, '$getDamageTypeAndTable', $GundogRevised_getDamageTypeAndTable$6 = function $$getDamageTypeAndTable(head) {
      var $a, $b, self = this, $case = nil, type = nil, table = nil;

      
      $case = head;
      if ("S"['$===']($case)) {
      type = "\u5C04\u6483";
      table = ["\u5BFE\u8C61\u306F[\u6B7B\u4EA1]", "[\u8FFD\u52A0D]4D6/[\u51FA\u8840]2D6/[\u91CD\u50B7]-40\uFF05/[\u6726\u6727\u5224\u5B9A]15", "[\u8FFD\u52A0D]3D6/[\u51FA\u8840]2D6/[\u91CD\u50B7]-30\uFF05/[\u6726\u6727\u5224\u5B9A]14", "[\u8FFD\u52A0D]3D6/[\u51FA\u8840]2D6/[\u91CD\u50B7]-30\uFF05/[\u6726\u6727\u5224\u5B9A]13", "[\u8FFD\u52A0D]3D6/[\u51FA\u8840]1D6/[\u91CD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]12", "[\u8FFD\u52A0D]2D6/[\u51FA\u8840]1D6/[\u91CD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]11", "[\u8FFD\u52A0D]2D6/[\u8EFD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]11", "[\u8FFD\u52A0D]2D6/[\u8EFD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]10", "[\u8FFD\u52A0D]2D6/[\u8EFD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]8", "[\u8FFD\u52A0D]2D6/[\u8EFD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]6", "[\u8FFD\u52A0D]2D6/[\u8EFD\u50B7]-10\uFF05/[\u6726\u6727\u5224\u5B9A]4", "[\u8FFD\u52A0D]2D6/[\u8EFD\u50B7]-20\uFF05", "[\u8FFD\u52A0D]1D6/[\u8EFD\u50B7]-20\uFF05", "[\u8FFD\u52A0D]1D6/[\u8EFD\u50B7]-10\uFF05", "[\u30B7\u30E7\u30C3\u30AF]-20\uFF05", "[\u30B7\u30E7\u30C3\u30AF]-10\uFF05", "[\u4E0D\u5B89\u5B9A]", "\u624B\u306B\u6301\u3063\u305F\u6B66\u5668\u3092\u843D\u3068\u3059\u3002\u8907\u6570\u3042\u308B\u5834\u5408\u306F\u30E9\u30F3\u30C0\u30E0", "\u30DA\u30CA\u30EB\u30C6\u30A3\u30FC\u7121\u3057"];}
      else if ("M"['$===']($case)) {
      type = "\u683C\u95D8";
      table = ["\u5BFE\u8C61\u306F[\u6B7B\u4EA1]", "[\u8FFD\u52A0D]4D6/[\u51FA\u8840]2D6/[\u91CD\u50B7]-40\uFF05/[\u6726\u6727\u5224\u5B9A]15", "[\u8FFD\u52A0D]3D6/[\u51FA\u8840]2D6/[\u91CD\u50B7]-30\uFF05/[\u6726\u6727\u5224\u5B9A]14", "[\u8FFD\u52A0D]3D6/[\u51FA\u8840]1D6/[\u91CD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]14/[\u4E0D\u5B89\u5B9A]", "[\u8FFD\u52A0D]2D6/[\u51FA\u8840]1D6/[\u91CD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]14", "[\u8FFD\u52A0D]2D6/[\u91CD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]12/[\u4E0D\u5B89\u5B9A]", "[\u8FFD\u52A0D]2D6/[\u8EFD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]11", "[\u8FFD\u52A0D]2D6/[\u8EFD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]10", "[\u8FFD\u52A0D]2D6/[\u8EFD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]8", "[\u8FFD\u52A0D]2D6/[\u8EFD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]6", "[\u8FFD\u52A0D]1D6/[\u8EFD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]6", "[\u8FFD\u52A0D]1D6/[\u8EFD\u50B7]-10\uFF05/[\u6726\u6727\u5224\u5B9A]6", "[\u8FFD\u52A0D]1D6/[\u8EFD\u50B7]-10\uFF05/[\u4E0D\u5B89\u5B9A]", "[\u8FFD\u52A0D]1D6/[\u8EFD\u50B7]-10\uFF05", "[\u30B7\u30E7\u30C3\u30AF]-20\uFF05", "[\u30B7\u30E7\u30C3\u30AF]-10\uFF05", "[\u4E0D\u5B89\u5B9A]", "\u624B\u306B\u6301\u3063\u305F\u6B66\u5668\u3092\u843D\u3068\u3059\u3002\u8907\u6570\u3042\u308B\u5834\u5408\u306F\u30E9\u30F3\u30C0\u30E0", "\u30DA\u30CA\u30EB\u30C6\u30A3\u30FC\u7121\u3057"];}
      else if ("V"['$===']($case)) {
      type = "\u8ECA\u4E21";
      table = ["[\u30AF\u30E9\u30C3\u30B7\u30E5]\u3059\u308B\u3002[\u30C1\u30A7\u30A4\u30B9]\u304B\u3089\u9664\u5916", "[\u8ECA\u4E21D]4D6/[\u4E57\u54E1D]3D6/[\u64CD\u4F5C\u6027]-40%/[\u30B9\u30D4\u30F3\u5224\u5B9A]", "[\u8ECA\u4E21D]3D6/[\u4E57\u54E1D]3D6/[\u64CD\u4F5C\u6027]-30%/[\u30B9\u30D4\u30F3\u5224\u5B9A]", "[\u4E57\u54E1D]3D6/[\u64CD\u4F5C\u6027]-20%/[\u30B9\u30D4\u30F3\u5224\u5B9A]", "[\u4E57\u54E1D]3D6/[\u64CD\u4F5C\u6027]-20%/[\u30B9\u30D4\u30F3\u5224\u5B9A]", "[\u4E57\u54E1D]3D6/[\u64CD\u4F5C\u6027]-10%/[\u30B9\u30D4\u30F3\u5224\u5B9A]", "[\u4E57\u54E1D]3D6/[\u64CD\u4F5C\u6027]-10%/[\u30B9\u30D4\u30F3\u5224\u5B9A]", "[\u4E57\u54E1D]2D6/[\u30B9\u30D4\u30FC\u30C9]-2/[\u30B9\u30D4\u30F3\u5224\u5B9A]", "[\u4E57\u54E1D]2D6/[\u30B9\u30D4\u30FC\u30C9]-2/[\u30B9\u30D4\u30F3\u5224\u5B9A]", "[\u4E57\u54E1D]2D6/[\u64CD\u7E26\u5224\u5B9A]-20%/[\u30B9\u30D4\u30F3\u5224\u5B9A]", "[\u4E57\u54E1D]2D6/[\u64CD\u7E26\u5224\u5B9A]-20%/[\u30B9\u30D4\u30F3\u5224\u5B9A]", "[\u4E57\u54E1D]2D6/[\u64CD\u7E26\u5224\u5B9A]-20%", "[\u4E57\u54E1D]2D6/[\u64CD\u7E26\u5224\u5B9A]-20%", "[\u4E57\u54E1D]1D6/[\u64CD\u7E26\u5224\u5B9A]-20%", "[\u4E57\u54E1D]1D6/[\u64CD\u7E26\u5224\u5B9A]-10%", "\u653B\u6483\u304C\u4E57\u54E1\u3092\u304B\u3059\u3081\u308B\u3002\u30E9\u30F3\u30C0\u30E0\u306A\u4E57\u54E11\u4EBA\u306B[\u30B7\u30E7\u30C3\u30AF]-20\uFF05", "\u653B\u6483\u304C\u4E57\u54E1\u306B\u5F53\u305F\u308A\u304B\u3051\u308B\u3002\u30E9\u30F3\u30C0\u30E0\u306A\u4E57\u54E11\u4EBA\u306B[\u30B7\u30E7\u30C3\u30AF]-10\uFF05", "\u8ECA\u4E21\u304C\u86C7\u884C\u3002\u4E57\u54E1\u5168\u54E1\u306F\u3008\u904B\u52D5\u3009\u5224\u5B9A\u3002\u5931\u6557\u3067[\u4E0D\u5B89\u5B9A]", "\u30DA\u30CA\u30EB\u30C6\u30A3\u30FC\u7121\u3057"];}
      else if ("G"['$===']($case)) {
      type = "\u6C4E\u7528";
      table = ["\u5BFE\u8C61\u306F[\u6B7B\u4EA1]", "[\u8FFD\u52A0D]4D6/[\u51FA\u8840]2D6/[\u91CD\u50B7]-40\uFF05/[\u6726\u6727\u5224\u5B9A]15", "[\u8FFD\u52A0D]3D6/[\u51FA\u8840]2D6/[\u91CD\u50B7]-30\uFF05/[\u6726\u6727\u5224\u5B9A]14", "[\u8FFD\u52A0D]2D6/[\u51FA\u8840]1D6/[\u91CD\u50B7]-30\uFF05/[\u6726\u6727\u5224\u5B9A]13/[\u4E0D\u5B89\u5B9A]", "[\u8FFD\u52A0D]2D6/[\u51FA\u8840]1D6/[\u91CD\u50B7]-30\uFF05/[\u6726\u6727\u5224\u5B9A]12", "[\u8FFD\u52A0D]2D6/[\u91CD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]12/[\u4E0D\u5B89\u5B9A]", "[\u8FFD\u52A0D]1D6/[\u91CD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]11", "[\u8FFD\u52A0D]1D6/[\u8EFD\u50B7]-30\uFF05/[\u6726\u6727\u5224\u5B9A]10", "[\u8FFD\u52A0D]1D6/[\u8EFD\u50B7]-30\uFF05/[\u6726\u6727\u5224\u5B9A]8", "[\u8FFD\u52A0D]1D6/[\u8EFD\u50B7]-30\uFF05/[\u6726\u6727\u5224\u5B9A]6", "[\u8FFD\u52A0D]1D6/[\u8EFD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]6", "[\u8EFD\u50B7]-20\uFF05/[\u6726\u6727\u5224\u5B9A]6", "[\u8EFD\u50B7]-20\uFF05/[\u4E0D\u5B89\u5B9A]", "[\u8EFD\u50B7]-20\uFF05", "[\u8EFD\u50B7]-10\uFF05", "[\u30B7\u30E7\u30C3\u30AF]-20\uFF05", "[\u30B7\u30E7\u30C3\u30AF]-10\uFF05", "[\u4E0D\u5B89\u5B9A]", "\u30DA\u30CA\u30EB\u30C6\u30A3\u30FC\u7121\u3057"];}
      else {
      head = "S";
      $b = self.$getDamageTypeAndTable(head), $a = Opal.to_ary($b), (type = ($a[0] == null ? nil : $a[0])), (table = ($a[1] == null ? nil : $a[1])), $b;};
      return [type, table];
    }, $GundogRevised_getDamageTypeAndTable$6.$$arity = 1);
    return (Opal.def(self, '$getFumbleTypeAndTable', $GundogRevised_getFumbleTypeAndTable$7 = function $$getFumbleTypeAndTable(head) {
      var $a, $b, self = this, $case = nil, type = nil, table = nil;

      
      $case = head;
      if ("S"['$===']($case)) {
      type = "\u5C04\u6483";
      table = ["\u9283\u5668\u304C\u66B4\u767A\u3001\u81EA\u5206\u306B\u547D\u4E2D\u3002[\u8CAB\u901AD]\u3002\u6B66\u88C5\u55AA\u5931", "\u9283\u5668\u304C\u66B4\u767A\u3001\u81EA\u5206\u306B\u547D\u4E2D\u3002[\u975E\u8CAB\u901AD]\u3002\u6B66\u88C5\u55AA\u5931", "\u8AA4\u5C04\u3002\u5C04\u7DDA\u306B\u6700\u3082\u8FD1\u3044\u5473\u65B9\u306B\u547D\u4E2D\u3002[\u8CAB\u901AD]", "\u8AA4\u5C04\u3002\u5C04\u7DDA\u306B\u6700\u3082\u8FD1\u3044\u5473\u65B9\u306B\u547D\u4E2D\u3002[\u975E\u8CAB\u901AD]", "\u9283\u5668\u304C\u5B8C\u5168\u306B\u6545\u969C\u3002\u76F4\u305B\u306A\u3044", "\u6545\u969C\u300230\u5206\u304B\u3051\u3066\u3008\u30E1\u30AB\u30CB\u30C3\u30AF\u3009\u5224\u5B9A\u306B\u6210\u529F\u3059\u308B\u307E\u3067\u4F7F\u7528\u4E0D\u53EF\u3002", "\u6545\u969C\u3002\u3008\u30E1\u30AB\u30CB\u30C3\u30AF\u3009-20\uFF05\u306E\u5224\u5B9A\u306B\u6210\u529F\u3059\u308B\u307E\u3067\u4F7F\u7528\u4E0D\u53EF\u3002", "\u6545\u969C\u3002\u3008\u30E1\u30AB\u30CB\u30C3\u30AF\u3009\u5224\u5B9A\u306B\u6210\u529F\u3059\u308B\u307E\u3067\u5C04\u6483\u4E0D\u53EF", "\u4F5C\u52D5\u4E0D\u826F\u3002[\u30A2\u30A4\u30C6\u30E0\u4F7F\u7528]\u30922\u56DE\u884C\u3063\u3066\u4FEE\u7406\u3059\u308B\u307E\u3067\u5C04\u6483\u4E0D\u53EF", "\u4F5C\u52D5\u4E0D\u826F\u3002[\u30A2\u30A4\u30C6\u30E0\u4F7F\u7528]\u3092\u884C\u3063\u3066\u4FEE\u7406\u3059\u308B\u307E\u3067\u5C04\u6483\u4E0D\u53EF", "\u8DB3\u304C\u3082\u3064\u308C\u3066\u5012\u308C\u308B\u3002[\u8EE2\u5012]", "\u7121\u7406\u306A\u5C04\u6483\u59FF\u52E2\u3067\u8155\u3092\u75DB\u3081\u308B\u3002[\u8EFD\u50B7]-20\uFF05", "\u7121\u7406\u306A\u5C04\u6483\u59FF\u52E2\u3067\u3069\u3053\u304B\u306E\u7B4B\u3092\u75DB\u3081\u308B\u3002[\u8EFD\u50B7]-10\uFF05", "\u6B66\u88C5\u3092\u843D\u3068\u3059\u3002\u30B9\u30EA\u30F3\u30B0\uFF08\u80A9\u3072\u3082\uFF09\u3082\u5207\u308C\u308B", "\u6B66\u88C5\u3092\u843D\u3068\u3059\u3002\u30B9\u30EA\u30F3\u30B0\uFF08\u80A9\u3072\u3082\uFF09\u304C\u3042\u308C\u3070\u843D\u3068\u3055\u306A\u3044", "\u6392\u83A2\u3055\u308C\u305F\u85AC\u83A2\u304C\u670D\u306E\u4E2D\u306B\u3002[\u30B7\u30E7\u30C3\u30AF]-20\uFF05", "\u6392\u83A2\u3055\u308C\u305F\u85AC\u83A2\u304C\u9854\u306B\u5F53\u305F\u308B\u3002[\u30B7\u30E7\u30C3\u30AF]-10\uFF05", "\u85AC\u83A2\u3092\u8E0F\u3093\u3067\u614B\u52E2\u3092\u5D29\u3059\u3002[\u4E0D\u5B89\u5B9A]", "\u30DA\u30CA\u30EB\u30C6\u30A3\u30FC\u7121\u3057"];}
      else if ("M"['$===']($case)) {
      type = "\u683C\u95D8";
      table = ["\u81EA\u5206\u306B\u547D\u4E2D\u3002[\u8CAB\u901AD]", "\u81EA\u5206\u306B\u547D\u4E2D\u3002[\u975E\u8CAB\u901AD]", "\u6700\u3082\u8FD1\u3044\u5473\u65B9\uFF08\u5C04\u7A0B\u5185\u306B\u3044\u306A\u3051\u308C\u3070\u81EA\u5206\uFF09\u306B[\u8CAB\u901AD]", "\u6700\u3082\u8FD1\u3044\u5473\u65B9\uFF08\u5C04\u7A0B\u5185\u306B\u3044\u306A\u3051\u308C\u3070\u81EA\u5206\uFF09\u306B[\u975E\u8CAB\u901AD]", "\u982D\u3092\u5F37\u304F\u6253\u3061\u3064\u3051\u308B\u3002[\u6726\u6727]", "\u6B66\u88C5\u304C\u58CA\u308C\u308B\u3002\u76F4\u305B\u306A\u3044\u3002[\u683C\u95D8\u30BF\u30A4\u30D7]\u306A\u3089[\u91CD\u50B7]-20\uFF05", "\u6B66\u88C5\u304C\u3059\u3063\u307D\u629C\u3051\u308B\u3002\u30B0\u30EC\u30CD\u30FC\u30C9\u306E\u8AA4\u5DEE\u3067\u843D\u4E0B\u5148\u3092\u6C7A\u5B9A", "\u6B66\u88C5\u304C\u640D\u50B7\u300230\u5206\u304B\u3051\u3066\u3008\u624B\u5148\u3009\u5224\u5B9A\u306B\u6210\u529F\u3059\u308B\u307E\u3067\u4F7F\u7528\u4E0D\u53EF\u3002[\u683C\u95D8\u30BF\u30A4\u30D7]\u306A\u3089[\u91CD\u50B7]-10\uFF05", "\u6B66\u88C5\u304C\u30AC\u30BF\u3064\u304F\u3002\u3008\u624B\u5148\u3009\u5224\u5B9A\uFF08[\u683C\u95D8\u30BF\u30A4\u30D7]\u306A\u3089\u3008\u5F37\u976D\u3009\uFF09\u306B\u6210\u529F\u3059\u308B\u307E\u3067\u4F7F\u7528\u4E0D\u53EF\u3002", "\u6B66\u88C5\u306B\u9055\u548C\u611F\u3002[\u30A2\u30A4\u30C6\u30E0\u4F7F\u7528]\u3092\u884C\u3063\u3066\u8ABF\u6574\u3059\u308B\u307E\u3067\u3001\u547D\u4E2D\u7387-20\uFF05", "\u8DB3\u304C\u3082\u3064\u308C\u308B\u3002[\u8EE2\u5012]", "\u8DB3\u304C\u3064\u308B\u30022[\u30E9\u30A6\u30F3\u30C9]\u306E\u9593\u3001\u79FB\u52D5\u8DDD\u96E21/2", "\u7121\u7406\u306A\u4F53\u52E2\u3067\u8155\uFF08\u3042\u308B\u3044\u306F\u811A\uFF09\u3092\u75DB\u3081\u308B\u3002[\u8EFD\u50B7]-20\uFF05", "\u7121\u7406\u306A\u4F53\u52E2\u3067\u3069\u3053\u304B\u306E\u7B4B\u3092\u75DB\u3081\u308B\u3002[\u8EFD\u50B7]-10\uFF05", "\u6B66\u88C5\u3092\u843D\u3068\u3059", "\u6B66\u88C5\u3067\u81EA\u5206\u304C\u8CA0\u50B7\u3002[\u30B7\u30E7\u30C3\u30AF]-20\uFF05", "\u6B66\u88C5\u306E\u6271\u3044\u3092\u9593\u9055\u3048\u308B\u3002[\u30B7\u30E7\u30C3\u30AF]-10\uFF05", "\u653B\u6483\u3092\u907F\u3051\u3089\u308C\u3066\u4F53\u52E2\u3092\u5D29\u3059\u3002[\u4E0D\u5B89\u5B9A]", "\u30DA\u30CA\u30EB\u30C6\u30A3\u30FC\u7121\u3057"];}
      else if ("T"['$===']($case)) {
      type = "\u6295\u64F2";
      table = ["\u52E2\u3044\u3092\u3064\u3051\u3059\u304E\u3066\u8EE2\u5012\u3057\u3001\u982D\u3092\u6253\u3064\u3002[\u6C17\u7D76]", "\u81EA\u5206\u306B\u547D\u4E2D\u3002\uFF08\u624B\u69B4\u5F3E\u306A\u3089\u81EA\u5206\u306E\u8DB3\u5143\u306B\u843D\u3061\u308B\uFF09[\u8CAB\u901AD]", "\u81EA\u5206\u306B\u547D\u4E2D\u3002\uFF08\u624B\u69B4\u5F3E\u306A\u3089\u81EA\u5206\u306E\u8DB3\u5143\u306B\u843D\u3061\u308B\uFF09[\u975E\u8CAB\u901AD]", "\u66B4\u6295\u3002\u5C04\u7DDA\u306B\u6700\u3082\u8FD1\u3044\u5473\u65B9\u306B\u547D\u4E2D\u3002[\u8CAB\u901AD]\u3002\u624B\u69B4\u5F3E\u306A\u3089\u65B0\u305F\u306A\u4E2D\u5FC3\u70B9\u304B\u3089\u3055\u3089\u306B\u8AA4\u5DEE\u304C\u751F\u3058\u308B", "\u66B4\u6295\u3002\u5C04\u7DDA\u306B\u6700\u3082\u8FD1\u3044\u5473\u65B9\u306B\u547D\u4E2D\u3002[\u975E\u8CAB\u901AD]\u3002\u624B\u69B4\u5F3E\u306A\u3089\u65B0\u305F\u306A\u4E2D\u5FC3\u70B9\u304B\u3089\u3055\u3089\u306B\u8AA4\u5DEE\u304C\u751F\u3058\u308B", "\u982D\u3092\u5F37\u304F\u6253\u3061\u3064\u3051\u308B\u3002[\u6726\u6727]", "\u80A9\u306E\u7B4B\u8089\u65AD\u88C2\u3002\u3053\u306E\u8155\u3092\u4F7F\u3046\u5224\u5B9A\u306B\u3001[\u91CD\u50B7]-20\uFF05", "\u30D2\u30B8\u306E\u7B4B\u8089\u65AD\u88C2\u3002\u3053\u306E\u8155\u3092\u4F7F\u3046\u5224\u5B9A\u306B\u3001[\u91CD\u50B7]-10\uFF05", "\u80A9\u306E\u7B4B\u3092\u3072\u3069\u304F\u75DB\u3081\u308B\u3002\u3008\u533B\u7642\u3009\u5224\u5B9A\u306B\u6210\u529F\u3059\u308B\u307E\u3067\u3001\u3053\u306E\u8155\u3092\u4F7F\u3046\u5224\u5B9A\u306B-20\uFF05", "\u80A9\u306E\u7B4B\u3092\u75DB\u3081\u308B\u3002[\u884C\u52D5]\u3092\u4F7F\u3063\u3066\u4F11\u3081\u308B\u307E\u3067\u3001\u3053\u306E\u8155\u3092\u4F7F\u3046\u5224\u5B9A\u306B-20\uFF05", "\u8170\u3092\u75DB\u3081\u308B\u3002[\u8EFD\u50B7]-30\uFF05", "\u8DB3\u304C\u3082\u3064\u308C\u3066\u5012\u308C\u308B\u3002[\u8EE2\u5012]", "\u8DB3\u304C\u3064\u308B\u30022[\u30E9\u30A6\u30F3\u30C9]\u306E\u9593\u3001\u79FB\u52D5\u8DDD\u96E21/2", "\u7121\u7406\u306A\u6295\u64F2\u4F53\u52E2\u3067\u8155\uFF08\u3042\u308B\u3044\u306F\u811A\uFF09\u3092\u75DB\u3081\u308B\u3002[\u8EFD\u50B7]-20\uFF05", "\u7121\u7406\u306A\u6295\u64F2\u4F53\u52E2\u3067\u3069\u3053\u304B\u306E\u7B4B\u3092\u75DB\u3081\u308B\u3002[\u8EFD\u50B7]-10\uFF05", "\u80A9\u306B\u9055\u548C\u611F\u3002[\u30B7\u30E7\u30C3\u30AF]-20\uFF05", "\u30D2\u30B8\u306B\u9055\u548C\u611F\u3002[\u30B7\u30E7\u30C3\u30AF]-10\uFF05", "\u3064\u307E\u305A\u3044\u3066\u59FF\u52E2\u3092\u5D29\u3059\u3002[\u4E0D\u5B89\u5B9A]", "\u30DA\u30CA\u30EB\u30C6\u30A3\u30FC\u7121\u3057"];}
      else {
      head = "S";
      $b = self.$getFumbleTypeAndTable(head), $a = Opal.to_ary($b), (type = ($a[0] == null ? nil : $a[0])), (table = ($a[1] == null ? nil : $a[1])), $b;};
      return [type, table];
    }, $GundogRevised_getFumbleTypeAndTable$7.$$arity = 1), nil) && 'getFumbleTypeAndTable';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting);
})(Opal);
