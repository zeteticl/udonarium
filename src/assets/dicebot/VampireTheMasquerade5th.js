/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$setPrefixes', '$match', '$[]', '$makeDiceRoll', '$+', '$getCriticalSuccess', '$to_i', '$>', '$>=', '$getSuccessResult', '$getFailResult', '$<', '$==', '$*', '$floor', '$/', '$roll', '$each', '$split']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'VampireTheMasquerade5th');

    var $nesting = [self].concat($parent_nesting), $VampireTheMasquerade5th_rollDiceCommand$1, $VampireTheMasquerade5th_getCriticalSuccess$2, $VampireTheMasquerade5th_makeDiceRoll$3, $VampireTheMasquerade5th_getSuccessResult$5, $VampireTheMasquerade5th_getFailResult$6;

    
    Opal.const_set($nesting[0], 'ID', "VampireTheMasquerade5th");
    Opal.const_set($nesting[0], 'NAME', "\u30F4\u30A1\u30F3\u30D1\u30A4\u30A2\uFF1A\u30B6 \u30DE\u30B9\u30AB\u30EC\u30FC\u30C9 \u7B2C\uFF15\u7248");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u3046\u3042\u3093\u306F\u3044\u3042\u3055\u307E\u3059\u304B\u308C\u3048\u30685");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u30FB\u5224\u5B9A\u30B3\u30DE\u30F3\u30C9(nVTFx+x)\n" + "  \u6CE8\u610F\uFF1A\u96E3\u6613\u5EA6\u306F\u5FC5\u8981\u6210\u529F\u6570\u3092\u8868\u3059\n" + "\n" + "  \u96E3\u6613\u5EA6\u6307\u5B9A\uFF1A\u5224\u5B9A\u6210\u529F\u3068\u5931\u6557\u3001Critical\u5224\u5B9A\u3001\n" + "             \uFF08Hunger\u30C0\u30A4\u30B9\u304C\u3042\u308B\u5834\u5408\uFF09Messy Critical\u3068Bestial Failure\u30C1\u30A7\u30C3\u30AF\u3092\u884C\u3046\n" + "  \u4F8B) (\u96E3\u6613\u5EA6)VMF(\u30C0\u30A4\u30B9\u30D7\u30FC\u30EB)+(Hunger\u30C0\u30A4\u30B9)\n" + "      (\u96E3\u6613\u5EA6)VMF(\u30C0\u30A4\u30B9\u30D7\u30FC\u30EB)\n" + "\n" + "  \u96E3\u6613\u5EA6\u7701\u7565\uFF1A\u5224\u5B9A\u5931\u6557\u3001Critical\u3001\uFF08Hunger\u30C0\u30A4\u30B9\u304C\u3042\u308B\u5834\u5408\uFF09Bestial Failure\u30C1\u30A7\u30C3\u30AF\u3092\u884C\u3046\n" + "              \u5224\u5B9A\u6210\u529F\u3001Messy Critical\u306E\u30C1\u30A7\u30C3\u30AF\u3092\u884C\u308F\u306A\u3044\n" + "  \u4F8B) VMF(\u30C0\u30A4\u30B9\u30D7\u30FC\u30EB)+(Hunger\u30C0\u30A4\u30B9)\n" + "      VMF(\u30C0\u30A4\u30B9\u30D7\u30FC\u30EB)\n" + "\n" + "  \u96E3\u6613\u5EA60\u6307\u5B9A\uFF1A\u5168\u3066\u306E\u30C1\u30A7\u30C3\u30AF\u3092\u884C\u308F\u306A\u3044\n" + "  \u4F8B) 0VMF(\u30C0\u30A4\u30B9\u30D7\u30FC\u30EB)+(Hunger\u30C0\u30A4\u30B9)\n" + "      0VMF(\u30C0\u30A4\u30B9\u30D7\u30FC\u30EB)\n" + "\n");
    Opal.const_set($nesting[0], 'DIFFICULTY_INDEX', 1);
    Opal.const_set($nesting[0], 'DICE_POOL_INDEX', 3);
    Opal.const_set($nesting[0], 'HUNGER_DICE_INDEX', 5);
    Opal.const_set($nesting[0], 'NOT_CHECK_SUCCESS', -1);
    self.$setPrefixes(["\\d*VMF.*"]);
    
    Opal.def(self, '$rollDiceCommand', $VampireTheMasquerade5th_rollDiceCommand$1 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, m = nil, dicePool = nil, diceText = nil, successDice = nil, tenDice = nil, resultText = nil, hungerDicePool = nil, hungerDiceText = nil, hungerSuccessDice = nil, hungerTenDice = nil, hungerBotchDice = nil, difficulty = nil, judgmentResult = nil;

      
      m = /^(\d+)?(VMF)(\d+)(\+(\d+))?/.$match(command);
      if ($truthy(m)) {
      } else {
        return ""
      };
      dicePool = m['$[]']($$($nesting, 'DICE_POOL_INDEX'));
      $b = self.$makeDiceRoll(dicePool), $a = Opal.to_ary($b), (diceText = ($a[0] == null ? nil : $a[0])), (successDice = ($a[1] == null ? nil : $a[1])), (tenDice = ($a[2] == null ? nil : $a[2])), $b;
      resultText = "" + "(" + (dicePool) + "D10";
      hungerDicePool = m['$[]']($$($nesting, 'HUNGER_DICE_INDEX'));
      if ($truthy(hungerDicePool)) {
        
        $b = self.$makeDiceRoll(hungerDicePool), $a = Opal.to_ary($b), (hungerDiceText = ($a[0] == null ? nil : $a[0])), (hungerSuccessDice = ($a[1] == null ? nil : $a[1])), (hungerTenDice = ($a[2] == null ? nil : $a[2])), (hungerBotchDice = ($a[3] == null ? nil : $a[3])), $b;
        tenDice = $rb_plus(tenDice, hungerTenDice);
        successDice = $rb_plus(successDice, hungerSuccessDice);
        resultText = "" + (resultText) + "+" + (hungerDicePool) + "D10) \uFF1E [" + (diceText) + "]+[" + (hungerDiceText) + "] ";
      } else {
        
        hungerTenDice = 0;
        hungerBotchDice = 0;
        resultText = "" + (resultText) + ") \uFF1E [" + (diceText) + "] ";
      };
      successDice = $rb_plus(successDice, self.$getCriticalSuccess(tenDice));
      difficulty = (function() {if ($truthy(m['$[]']($$($nesting, 'DIFFICULTY_INDEX')))) {
        return m['$[]']($$($nesting, 'DIFFICULTY_INDEX')).$to_i()
      } else {
        return $$($nesting, 'NOT_CHECK_SUCCESS')
      }; return nil; })();
      resultText = "" + (resultText) + " \u6210\u529F\u6570=" + (successDice);
      if ($truthy($rb_gt(difficulty, 0))) {
        
        if ($truthy($rb_ge(successDice, difficulty))) {
          judgmentResult = self.$getSuccessResult($rb_ge(tenDice, 2), hungerTenDice)
        } else {
          judgmentResult = self.$getFailResult(hungerBotchDice)
        };
        resultText = "" + (resultText) + " \u96E3\u6613\u5EA6=" + (difficulty) + (judgmentResult);
      } else if ($truthy($rb_lt(difficulty, 0))) {
        
        if (successDice['$=='](0)) {
          judgmentResult = self.$getFailResult(hungerBotchDice)
        } else {
          judgmentResult = ""
        };
        resultText = "" + (resultText) + (judgmentResult);};
      return resultText;
    }, $VampireTheMasquerade5th_rollDiceCommand$1.$$arity = 1);
    
    Opal.def(self, '$getCriticalSuccess', $VampireTheMasquerade5th_getCriticalSuccess$2 = function $$getCriticalSuccess(tenDice) {
      var self = this;

      return $rb_times($rb_divide(tenDice, 2).$floor(), 2)
    }, $VampireTheMasquerade5th_getCriticalSuccess$2.$$arity = 1);
    
    Opal.def(self, '$makeDiceRoll', $VampireTheMasquerade5th_makeDiceRoll$3 = function $$makeDiceRoll(dicePool) {
      var $a, $b, $$4, self = this, _ = nil, diceText = nil, successDice = nil, tenDice = nil, botchDice = nil;

      
      $b = self.$roll(dicePool, 10), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      successDice = 0;
      tenDice = 0;
      botchDice = 0;
      $send(diceText.$split(","), 'each', [], ($$4 = function(takeDice){var self = $$4.$$s || this;

      
        
        if (takeDice == null) {
          takeDice = nil;
        };
        if ($truthy($rb_ge(takeDice.$to_i(), 6))) {
          
          successDice = $rb_plus(successDice, 1);
          if (takeDice['$==']("10")) {
            return (tenDice = $rb_plus(tenDice, 1))
          } else {
            return nil
          };
        } else if (takeDice['$==']("1")) {
          return (botchDice = $rb_plus(botchDice, 1))
        } else {
          return nil
        };}, $$4.$$s = self, $$4.$$arity = 1, $$4));
      return [diceText, successDice, tenDice, botchDice];
    }, $VampireTheMasquerade5th_makeDiceRoll$3.$$arity = 1);
    
    Opal.def(self, '$getSuccessResult', $VampireTheMasquerade5th_getSuccessResult$5 = function $$getSuccessResult(isCritical, hungerTenDice) {
      var $a, self = this, judgmentResult = nil;

      
      judgmentResult = "\uFF1A\u5224\u5B9A\u6210\u529F!";
      if ($truthy(($truthy($a = $rb_gt(hungerTenDice, 0)) ? isCritical : $a))) {
        return "" + (judgmentResult) + " [Messy Critical]"
      } else if ($truthy(isCritical)) {
        return "" + (judgmentResult) + " [Critical Win]"};
      return judgmentResult;
    }, $VampireTheMasquerade5th_getSuccessResult$5.$$arity = 2);
    return (Opal.def(self, '$getFailResult', $VampireTheMasquerade5th_getFailResult$6 = function $$getFailResult(hungerBotchDice) {
      var self = this, judgmentResult = nil;

      
      judgmentResult = "\uFF1A\u5224\u5B9A\u5931\u6557!";
      if ($truthy($rb_gt(hungerBotchDice, 0))) {
        return "" + (judgmentResult) + " [Bestial Failure]"};
      return judgmentResult;
    }, $VampireTheMasquerade5th_getFailResult$6.$$arity = 1), nil) && 'getFailResult';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
