/* Generated by Opal 1.0.3 */
Opal.modules["utils/ArithmeticEvaluator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$tokenize', '$expr', '$private', '$split', '$gsub', '$mul', '$loop', '$consume', '$+', '$-', '$unary', '$*', '$div', '$zero?', '$===', '$ceil', '$/', '$to_f', '$round', '$floor', '$-@', '$term', '$expect', '$expect_number', '$!=', '$[]', '$integer?', '$to_i', '$!', '$nil?', '$match']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ArithmeticEvaluator');

    var $nesting = [self].concat($parent_nesting), $ArithmeticEvaluator_eval$1, $ArithmeticEvaluator_tokenize$2, $ArithmeticEvaluator_add$4, $ArithmeticEvaluator_mul$6, $ArithmeticEvaluator_div$8, $ArithmeticEvaluator_unary$9, $ArithmeticEvaluator_term$10, $ArithmeticEvaluator_consume$11, $ArithmeticEvaluator_expect$12, $ArithmeticEvaluator_expect_number$13, $ArithmeticEvaluator_integer$ques$14;

    self.$$prototype.error = self.$$prototype.round_type = self.$$prototype.tokens = self.$$prototype.idx = nil;
    
    
    Opal.def(self, '$eval', $ArithmeticEvaluator_eval$1 = function(expr, round_type) {
      var self = this, ret = nil;

      
      
      if (round_type == null) {
        round_type = "omit";
      };
      self.tokens = self.$tokenize(expr);
      self.idx = 0;
      self.error = false;
      self.round_type = round_type;
      ret = self.$expr();
      if ($truthy(self.error)) {
        return 0
      } else {
        return ret
      };
    }, $ArithmeticEvaluator_eval$1.$$arity = -2);
    self.$private();
    
    Opal.def(self, '$tokenize', $ArithmeticEvaluator_tokenize$2 = function $$tokenize(expr) {
      var $$3, self = this;

      return $send(expr, 'gsub', [/[\(\)\+\-\*\/]/], ($$3 = function(e){var self = $$3.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return "" + " " + (e) + " ";}, $$3.$$s = self, $$3.$$arity = 1, $$3)).$split(" ")
    }, $ArithmeticEvaluator_tokenize$2.$$arity = 1);
    
    Opal.def(self, '$add', $ArithmeticEvaluator_add$4 = function $$add() {
      var $$5, self = this, ret = nil;

      
      ret = self.$mul();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$5 = function(){var self = $$5.$$s || this;

      if ($truthy(self.$consume("+"))) {
          return (ret = $rb_plus(ret, self.$mul()))
        } else if ($truthy(self.$consume("-"))) {
          return (ret = $rb_minus(ret, self.$mul()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$5.$$s = self, $$5.$$brk = $brk, $$5.$$arity = 0, $$5))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_add$4.$$arity = 0);
    Opal.alias(self, "expr", "add");
    
    Opal.def(self, '$mul', $ArithmeticEvaluator_mul$6 = function $$mul() {
      var $$7, self = this, ret = nil;

      
      ret = self.$unary();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$7 = function(){var self = $$7.$$s || this;

      if ($truthy(self.$consume("*"))) {
          return (ret = $rb_times(ret, self.$unary()))
        } else if ($truthy(self.$consume("/"))) {
          return (ret = self.$div(ret, self.$unary()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$7.$$s = self, $$7.$$brk = $brk, $$7.$$arity = 0, $$7))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_mul$6.$$arity = 0);
    
    Opal.def(self, '$div', $ArithmeticEvaluator_div$8 = function $$div(left, right) {
      var self = this, $case = nil;

      
      if ($truthy(right['$zero?']())) {
        
        self.error = true;
        return 0;};
      return (function() {$case = self.round_type;
      if ("roundUp"['$===']($case)) {return $rb_divide(left.$to_f(), right).$ceil()}
      else if ("roundOff"['$===']($case)) {return $rb_divide(left.$to_f(), right).$round()}
      else {return $rb_divide(left, right).$floor()}})();
    }, $ArithmeticEvaluator_div$8.$$arity = 2);
    
    Opal.def(self, '$unary', $ArithmeticEvaluator_unary$9 = function $$unary() {
      var self = this;

      if ($truthy(self.$consume("+"))) {
        return self.$unary()
      } else if ($truthy(self.$consume("-"))) {
        return self.$unary()['$-@']()
      } else {
        return self.$term()
      }
    }, $ArithmeticEvaluator_unary$9.$$arity = 0);
    
    Opal.def(self, '$term', $ArithmeticEvaluator_term$10 = function $$term() {
      var self = this, ret = nil;

      if ($truthy(self.$consume("("))) {
        
        ret = self.$expr();
        self.$expect(")");
        return ret;
      } else {
        return self.$expect_number()
      }
    }, $ArithmeticEvaluator_term$10.$$arity = 0);
    
    Opal.def(self, '$consume', $ArithmeticEvaluator_consume$11 = function $$consume(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        return false};
      self.idx = $rb_plus(self.idx, 1);
      return true;
    }, $ArithmeticEvaluator_consume$11.$$arity = 1);
    
    Opal.def(self, '$expect', $ArithmeticEvaluator_expect$12 = function $$expect(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        self.error = true};
      return (self.idx = $rb_plus(self.idx, 1));
    }, $ArithmeticEvaluator_expect$12.$$arity = 1);
    
    Opal.def(self, '$expect_number', $ArithmeticEvaluator_expect_number$13 = function $$expect_number() {
      var self = this, ret = nil;

      
      if ($truthy(self['$integer?'](self.tokens['$[]'](self.idx)))) {
      } else {
        
        self.error = true;
        self.idx = $rb_plus(self.idx, 1);
        return 0;
      };
      ret = self.tokens['$[]'](self.idx).$to_i();
      self.idx = $rb_plus(self.idx, 1);
      return ret;
    }, $ArithmeticEvaluator_expect_number$13.$$arity = 0);
    return (Opal.def(self, '$integer?', $ArithmeticEvaluator_integer$ques$14 = function(str) {
      var self = this;

      return /^\d+$/.$match(str)['$nil?']()['$!']()
    }, $ArithmeticEvaluator_integer$ques$14.$$arity = 1), nil) && 'integer?';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/range_table"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$alias_method', '$freeze', '$lambda', '$name', '$sum', '$content', '$attr_reader', '$match', '$raise', '$to_i', '$[]', '$store', '$find', '$include?', '$range', '$roll', '$map', '$split', '$to_proc', '$fetch', '$formatted=', '$-', '$private', '$coerce_to_int_range', '$sort_by', '$min', '$assert_min_sum_is_covered', '$assert_max_sum_is_covered', '$assert_no_gap_or_overlap_in_ranges', '$===', '$is_a?', '$begin', '$end', '$class', '$first', '$*', '$last', '$each_cons', '$max', '$+']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RangeTable');

    var $nesting = [self].concat($parent_nesting), $RangeTable$1, $RangeTable$2, $RangeTable_initialize$3, $RangeTable_fetch$4, $RangeTable_roll$6, $RangeTable_store$7, $RangeTable_coerce_to_int_range$11, $RangeTable_assert_min_sum_is_covered$12, $RangeTable_assert_max_sum_is_covered$13, $RangeTable_assert_no_gap_or_overlap_in_ranges$14;

    self.$$prototype.name = self.$$prototype.items = self.$$prototype.num_of_dice = self.$$prototype.num_of_sides = self.$$prototype.formatter = nil;
    
    Opal.const_set($nesting[0], 'RollResult', $send($$($nesting, 'Struct'), 'new', ["sum", "values", "content", "formatted"], ($RangeTable$1 = function(){var self = $RangeTable$1.$$s || this;

    return self.$alias_method("to_s", "formatted")}, $RangeTable$1.$$s = self, $RangeTable$1.$$arity = 0, $RangeTable$1)));
    Opal.const_set($nesting[0], 'Item', $$($nesting, 'Struct').$new("range", "content"));
    Opal.const_set($nesting[0], 'DICE_ROLL_METHOD_RE', /^(\d+)D(\d+)$/i.$freeze());
    Opal.const_set($nesting[0], 'DEFAULT_FORMATTER', $send(self, 'lambda', [], ($RangeTable$2 = function(table, result){var self = $RangeTable$2.$$s || this;

    
      
      if (table == null) {
        table = nil;
      };
      
      if (result == null) {
        result = nil;
      };
      return "" + (table.$name()) + "(" + (result.$sum()) + ") \uFF1E " + (result.$content());}, $RangeTable$2.$$s = self, $RangeTable$2.$$arity = 2, $RangeTable$2)));
    self.$attr_reader("name");
    self.$attr_reader("num_of_dice");
    self.$attr_reader("num_of_sides");
    
    Opal.def(self, '$initialize', $RangeTable_initialize$3 = function $$initialize(name, dice_roll_method, items) {
      var $iter = $RangeTable_initialize$3.$$p, formatter = $iter || nil, $a, self = this, m = nil;

      if ($iter) $RangeTable_initialize$3.$$p = null;
      
      
      if ($iter) $RangeTable_initialize$3.$$p = null;;
      self.name = name.$freeze();
      self.formatter = ($truthy($a = formatter) ? $a : $$($nesting, 'DEFAULT_FORMATTER'));
      m = $$($nesting, 'DICE_ROLL_METHOD_RE').$match(dice_roll_method);
      if ($truthy(m)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + (self.name) + ": invalid dice roll method: " + (dice_roll_method))
      };
      self.num_of_dice = m['$[]'](1).$to_i();
      self.num_of_sides = m['$[]'](2).$to_i();
      return self.$store(items);
    }, $RangeTable_initialize$3.$$arity = 3);
    
    Opal.def(self, '$fetch', $RangeTable_fetch$4 = function $$fetch(value) {
      var $$5, self = this, item = nil;

      
      item = $send(self.items, 'find', [], ($$5 = function(i){var self = $$5.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i.$range()['$include?'](value);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
      if ($truthy(item)) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + (self.name) + ": value is out of range: " + (value))
      };
      return item;
    }, $RangeTable_fetch$4.$$arity = 1);
    
    Opal.def(self, '$roll', $RangeTable_roll$6 = function $$roll(bcdice) {
      var $a, $b, self = this, sum = nil, values_str = nil, values = nil, result = nil, $writer = nil;

      
      $b = bcdice.$roll(self.num_of_dice, self.num_of_sides), $a = Opal.to_ary($b), (sum = ($a[0] == null ? nil : $a[0])), (values_str = ($a[1] == null ? nil : $a[1])), $b;
      values = $send(values_str.$split(","), 'map', [], "to_i".$to_proc());
      result = $$($nesting, 'RollResult').$new(sum, values, self.$fetch(sum).$content());
      
      $writer = [self.formatter['$[]'](self, result)];
      $send(result, 'formatted=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return result;
    }, $RangeTable_roll$6.$$arity = 1);
    self.$private();
    
    Opal.def(self, '$store', $RangeTable_store$7 = function $$store(items) {
      var $$8, $$9, $$10, self = this, items_with_range = nil, sorted_items = nil;

      
      items_with_range = $send(items, 'map', [], ($$8 = function(r, c){var self = $$8.$$s || this;

      
        
        if (r == null) {
          r = nil;
        };
        
        if (c == null) {
          c = nil;
        };
        return [self.$coerce_to_int_range(r), c];}, $$8.$$s = self, $$8.$$arity = 2, $$8));
      sorted_items = $send(items_with_range, 'sort_by', [], ($$9 = function(r, _){var self = $$9.$$s || this;

      
        
        if (r == null) {
          r = nil;
        };
        
        if (_ == null) {
          _ = nil;
        };
        return r.$min();}, $$9.$$s = self, $$9.$$arity = 2, $$9));
      self.$assert_min_sum_is_covered(sorted_items);
      self.$assert_max_sum_is_covered(sorted_items);
      self.$assert_no_gap_or_overlap_in_ranges(sorted_items);
      self.items = $send(sorted_items, 'map', [], ($$10 = function(range, content){var self = $$10.$$s || this;

      
        
        if (range == null) {
          range = nil;
        };
        
        if (content == null) {
          content = nil;
        };
        return $$($nesting, 'Item').$new(range, content.$freeze()).$freeze();}, $$10.$$s = self, $$10.$$arity = 2, $$10)).$freeze();
      return self;
    }, $RangeTable_store$7.$$arity = 1);
    
    Opal.def(self, '$coerce_to_int_range', $RangeTable_coerce_to_int_range$11 = function $$coerce_to_int_range(x) {
      var $a, self = this, $case = nil;

      
      $case = x;
      if ($$($nesting, 'Integer')['$===']($case)) {return $$($nesting, 'Range').$new(x, x)}
      else if ($$($nesting, 'Range')['$===']($case)) {if ($truthy(($truthy($a = x.$begin()['$is_a?']($$($nesting, 'Integer'))) ? x.$end()['$is_a?']($$($nesting, 'Integer')) : $a))) {
        return x}};
      return self.$raise($$($nesting, 'TypeError'), "" + (self.name) + ": " + (x) + " (" + (x.$class()) + ") must be an Integer or a Range with Integers ");
    }, $RangeTable_coerce_to_int_range$11.$$arity = 1);
    
    Opal.def(self, '$assert_min_sum_is_covered', $RangeTable_assert_min_sum_is_covered$12 = function $$assert_min_sum_is_covered(sorted_items) {
      var self = this, min_sum = nil, range = nil;

      
      min_sum = self.num_of_dice;
      range = sorted_items.$first()['$[]'](0);
      if ($truthy(range['$include?'](min_sum))) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + (self.name) + ": min value (" + (min_sum) + ") is not covered: " + (range))
      };
      return self;
    }, $RangeTable_assert_min_sum_is_covered$12.$$arity = 1);
    
    Opal.def(self, '$assert_max_sum_is_covered', $RangeTable_assert_max_sum_is_covered$13 = function $$assert_max_sum_is_covered(sorted_items) {
      var self = this, max_sum = nil, range = nil;

      
      max_sum = $rb_times(self.num_of_dice, self.num_of_sides);
      range = sorted_items.$last()['$[]'](0);
      if ($truthy(range['$include?'](max_sum))) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + (self.name) + ": max value (" + (max_sum) + ") is not covered: " + (range))
      };
      return self;
    }, $RangeTable_assert_max_sum_is_covered$13.$$arity = 1);
    return (Opal.def(self, '$assert_no_gap_or_overlap_in_ranges', $RangeTable_assert_no_gap_or_overlap_in_ranges$14 = function $$assert_no_gap_or_overlap_in_ranges(sorted_items) {
      var $$15, self = this;

      
      $send(sorted_items, 'each_cons', [2], ($$15 = function(i1, i2){var self = $$15.$$s || this, r1 = nil, r2 = nil, max1 = nil, next_of_max1 = nil;
        if (self.name == null) self.name = nil;

      
        
        if (i1 == null) {
          i1 = nil;
        };
        
        if (i2 == null) {
          i2 = nil;
        };
        r1 = i1['$[]'](0);
        r2 = i2['$[]'](0);
        max1 = r1.$max();
        next_of_max1 = $rb_plus(max1, 1);
        if ($truthy(r2['$include?'](max1))) {
          self.$raise($$($nesting, 'RangeError'), "" + (self.name) + ": Range overlap: " + (r1) + " and " + (r2))};
        if ($truthy(r2['$include?'](next_of_max1))) {
          return nil
        } else {
          return self.$raise($$($nesting, 'RangeError'), "" + (self.name) + ": Range gap: " + (r1) + " and " + (r2))
        };}, $$15.$$s = self, $$15.$$arity = 2, $$15));
      return self;
    }, $RangeTable_assert_no_gap_or_overlap_in_ranges$14.$$arity = 1), nil) && 'assert_no_gap_or_overlap_in_ranges';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$setPrefixes', '$roll_tables', '$===', '$last_match', '$mh_crc_table', '$eval', '$new', '$to_sym', '$rollHit', '$gsub', '$!=', '$==', '$>=', '$<=', '$roll', '$getHitResult', '$getResult', '$%', '$debug', '$>', '$upcase', '$to_s', '$to_i', '$<', '$join', '$+', '$-', '$nil?', '$[]', '$each', '$push', '$lambda', '$name', '$sum', '$content', '$freeze', '$to_proc']);
  
  self.$require("utils/ArithmeticEvaluator");
  self.$require("utils/range_table");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'MetalHead');

    var $nesting = [self].concat($parent_nesting), $MetalHead_rollDiceCommand$1, $MetalHead_changeText$2, $MetalHead_check_2D6$5, $MetalHead_rollHit$6, $MetalHead_check_1D100$7, $MetalHead_getHitResult$8, $MetalHead_getResult$9, $MetalHead_mh_crc_table$10, $MetalHead$13;

    self.$$prototype.fractionType = nil;
    
    Opal.const_set($nesting[0], 'ID', "MetalHead");
    Opal.const_set($nesting[0], 'NAME', "\u30E1\u30BF\u30EB\u30D8\u30C3\u30C9");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u3081\u305F\u308B\u3078\u3064\u3068");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u30FB\u30A2\u30D3\u30EA\u30C6\u30A3\u30ED\u30FC\u30EB  AR>=\u76EE\u6A19\u5024\n" + "\u30FB\u30B9\u30AD\u30EB\u30ED\u30FC\u30EB      SR<=\u76EE\u6A19\u5024(%)\n" + "\u30FB\u547D\u4E2D\u5224\u5B9A\u30ED\u30FC\u30EB    HR<=\u76EE\u6A19\u5024(%)\n" + "\n" + "  \u4F8B\uFF09AR>=5\n" + "  \u4F8B\uFF09SR<=(40+25)\n" + "  \u4F8B\uFF09HR<=(50-10)\n" + "\n" + "  \u3053\u308C\u3089\u306E\u30ED\u30FC\u30EB\u3067\u6210\u5426\u3001\u7D76\u5BFE\u6210\u529F/\u7D76\u5BFE\u5931\u6557\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB/\u30A2\u30AF\u30B7\u30C7\u30F3\u30C8\u3092\u81EA\u52D5\u5224\u5B9A\u3057\u307E\u3059\u3002\n" + "\n" + "\u30FB\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u30C1\u30E3\u30FC\u30C8  CC\n" + "\u30FB\u30A2\u30AF\u30B7\u30C7\u30F3\u30C8\u30C1\u30E3\u30FC\u30C8  \u5C04\u6483\u30FB\u6295\u64F2\u7528:ACL  \u683C\u95D8\u7528:ACS\n" + "\u30FB\u6226\u95D8\u7D50\u679C\u30C1\u30E3\u30FC\u30C8      CRCsn   s=\u8010\u4E45\u30EC\u30D9\u30EB(SUV) n=\u6570\u5024\n" + "\n" + "  \u4F8B\uFF09CRCA61 SUV=A\u3092\u5BFE\u8C61\u3068\u3057\u305F\u6570\u502461(62\u306B\u5909\u63DB\u3055\u308C\u308B)\u306E\u6226\u95D8\u7D50\u679C\u3092\u53C2\u7167\u3059\u308B\u3002\n" + "  \u4F8B\uFF09CRCM98 \u5BFE\u7269\u3067\u6570\u502498\u306E\u6226\u95D8\u7D50\u679C\u3092\u53C2\u7167\u3059\u308B\u3002\n");
    self.$setPrefixes(["AR", "SR", "HR<=.+", "CC", "ACT", "ACL", "ACS", "CRC[A-Z]\\d+"]);
    
    Opal.def(self, '$rollDiceCommand', $MetalHead_rollDiceCommand$1 = function $$rollDiceCommand(command) {
      var self = this, result = nil, $case = nil, suv = nil, num = nil, target = nil;

      
      result = self.$roll_tables(command, $$($nesting, 'TABLES'));
      if ($truthy(result)) {
        return result};
      $case = command;
      if (/^CRC(\w)(\d+)$/['$===']($case)) {
      suv = $$($nesting, 'Regexp').$last_match(1);
      num = $$($nesting, 'Regexp').$last_match(2);
      return self.$mh_crc_table(suv, num);}
      else if (/^HR<=(.+)/['$===']($case)) {
      target = $$($nesting, 'ArithmeticEvaluator').$new().$eval($$($nesting, 'Regexp').$last_match(1), self.fractionType.$to_sym());
      return self.$rollHit(target);};
      return nil;
    }, $MetalHead_rollDiceCommand$1.$$arity = 1);
    
    Opal.def(self, '$changeText', $MetalHead_changeText$2 = function $$changeText(string) {
      var $$3, $$4, self = this;

      
      string = $send(string, 'gsub', [/^(S)?AR/i], ($$3 = function(){var self = $$3.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + "2D6"}, $$3.$$s = self, $$3.$$arity = 0, $$3));
      string = $send(string, 'gsub', [/^(S)?SR/i], ($$4 = function(){var self = $$4.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + "1D100"}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      return string;
    }, $MetalHead_changeText$2.$$arity = 1);
    
    Opal.def(self, '$check_2D6', $MetalHead_check_2D6$5 = function $$check_2D6(total, dice_total, _dice_list, cmp_op, target) {
      var $a, self = this;

      
      if ($truthy(($truthy($a = cmp_op['$!='](">=")) ? $a : target['$==']("?")))) {
        return ""};
      if ($truthy($rb_ge(dice_total, 12))) {
        return " \uFF1E \u7D76\u5BFE\u6210\u529F"
      } else if ($truthy($rb_le(dice_total, 2))) {
        return " \uFF1E \u7D76\u5BFE\u5931\u6557"
      } else if ($truthy($rb_ge(total, target))) {
        return " \uFF1E \u6210\u529F"
      } else {
        return " \uFF1E \u5931\u6557"
      };
    }, $MetalHead_check_2D6$5.$$arity = 5);
    
    Opal.def(self, '$rollHit', $MetalHead_rollHit$6 = function $$rollHit(target) {
      var $a, $b, self = this, total = nil, resultText = nil, text = nil;

      
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (total = ($a[0] == null ? nil : $a[0])), $b;
      resultText = self.$getHitResult(total, total, target);
      text = "" + "(1D100<=" + (target) + ") \uFF1E " + (total) + (resultText);
      return text;
    }, $MetalHead_rollHit$6.$$arity = 1);
    
    Opal.def(self, '$check_1D100', $MetalHead_check_1D100$7 = function $$check_1D100(total, dice_total, cmp_op, target) {
      var self = this;

      
      if (cmp_op['$==']("<=")) {
      } else {
        return ""
      };
      return self.$getResult(total, dice_total, target);
    }, $MetalHead_check_1D100$7.$$arity = 4);
    
    Opal.def(self, '$getHitResult', $MetalHead_getHitResult$8 = function $$getHitResult(total_n, _dice_n, diff) {
      var self = this, diceValue = nil, dice1 = nil;

      
      diceValue = total_n['$%'](100);
      dice1 = diceValue['$%'](10);
      self.$debug("total_n", total_n);
      if ($truthy($rb_gt(total_n, diff))) {
        return " \uFF1E \u5931\u6557"};
      if (dice1['$=='](1)) {
        return " \uFF1E \u6210\u529F\uFF08\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\uFF09"};
      if (dice1['$=='](0)) {
        return " \uFF1E \u5931\u6557\uFF08\u30A2\u30AF\u30B7\u30C7\u30F3\u30C8\uFF09"};
      return " \uFF1E \u6210\u529F";
    }, $MetalHead_getHitResult$8.$$arity = 3);
    
    Opal.def(self, '$getResult', $MetalHead_getResult$9 = function $$getResult(total_n, dice_n, diff) {
      var self = this;

      
      if ($truthy($rb_le(dice_n, 5))) {
        return " \uFF1E \u7D76\u5BFE\u6210\u529F"};
      if ($truthy($rb_ge(dice_n, 96))) {
        return " \uFF1E \u7D76\u5BFE\u5931\u6557"};
      if ($truthy($rb_le(total_n, diff))) {
        return " \uFF1E \u6210\u529F"};
      return " \uFF1E \u5931\u6557";
    }, $MetalHead_getResult$9.$$arity = 3);
    
    Opal.def(self, '$mh_crc_table', $MetalHead_mh_crc_table$10 = function $$mh_crc_table(suv, num) {
      var $$11, self = this, header_parts = nil, separator = nil, numbuf = nil, num_d1 = nil, table_point = nil, table_damage = nil, damage_level = nil, result_parts = nil;

      
      header_parts = ["\u6226\u95D8\u7D50\u679C\u30C1\u30E3\u30FC\u30C8", num];
      separator = " \uFF1E ";
      suv = suv.$to_s().$upcase();
      numbuf = num.$to_i();
      if ($truthy($rb_lt(numbuf, 1))) {
        return $rb_plus(header_parts, ["\u6570\u5024\u304C\u4E0D\u6B63\u3067\u3059"]).$join(separator)};
      num_d1 = numbuf['$%'](10);
      self.$debug("" + "num_d1[" + (num_d1) + "]");
      if (num_d1['$=='](1)) {
        numbuf = $rb_plus(numbuf, 1)};
      if (num_d1['$=='](0)) {
        numbuf = $rb_minus(numbuf, 1)};
      num_d1 = numbuf['$%'](10);
      self.$debug("" + "num_d1[" + (num_d1) + "]");
      table_point = [nil, nil, "\u8155\u90E8", "\u8155\u90E8", "\u811A\u90E8", "\u811A\u90E8", "\u80F4\u90E8", "\u80F4\u90E8", "\u80F4\u90E8", "\u982D\u90E8"];
      table_damage = $hash2(["S", "A", "B", "C", "D", "E", "F", "G", "M"], {"S": [$hash2(["N"], {"N": 2}), $hash2(["LW"], {"LW": 16}), $hash2(["MD"], {"MD": 46}), $hash2(["MW"], {"MW": 56}), $hash2(["HD"], {"HD": 76}), $hash2(["HW"], {"HW": 96}), $hash2(["MO"], {"MO": 106}), $hash2(["K"], {"K": 116})], "A": [$hash2(["LW"], {"LW": 2}), $hash2(["MW"], {"MW": 46}), $hash2(["HW"], {"HW": 76}), $hash2(["MO"], {"MO": 96}), $hash2(["K"], {"K": 116})], "B": [$hash2(["LW"], {"LW": 2}), $hash2(["MW"], {"MW": 36}), $hash2(["HW"], {"HW": 66}), $hash2(["MO"], {"MO": 96}), $hash2(["K"], {"K": 106})], "C": [$hash2(["LW"], {"LW": 2}), $hash2(["MW"], {"MW": 26}), $hash2(["HW"], {"HW": 66}), $hash2(["MO"], {"MO": 86}), $hash2(["K"], {"K": 106})], "D": [$hash2(["LW"], {"LW": 2}), $hash2(["MW"], {"MW": 26}), $hash2(["HW"], {"HW": 46}), $hash2(["MO"], {"MO": 76}), $hash2(["K"], {"K": 96})], "E": [$hash2(["LW"], {"LW": 2}), $hash2(["MW"], {"MW": 26}), $hash2(["HW"], {"HW": 39}), $hash2(["MO"], {"MO": 54}), $hash2(["K"], {"K": 76})], "F": [$hash2(["LW"], {"LW": 2}), $hash2(["MW"], {"MW": 16}), $hash2(["HW"], {"HW": 39}), $hash2(["MO"], {"MO": 54}), $hash2(["K"], {"K": 66})], "G": [$hash2(["LW"], {"LW": 2}), $hash2(["MW"], {"MW": 6}), $hash2(["HW"], {"HW": 16}), $hash2(["MO"], {"MO": 26}), $hash2(["K"], {"K": 39})], "M": [$hash2(["0"], {"0": 2}), $hash2(["1"], {"1": 22}), $hash2(["2"], {"2": 42}), $hash2(["3"], {"3": 62}), $hash2(["4"], {"4": 82}), $hash2(["5"], {"5": 92}), $hash2(["6"], {"6": 102}), $hash2(["8"], {"8": 112})]});
      if ($truthy(table_damage['$[]'](suv)['$nil?']())) {
        return $rb_plus(header_parts, ["" + "\u8010\u4E45\u30EC\u30D9\u30EB(SUV)[" + (suv) + "]", "\u8010\u4E45\u30EC\u30D9\u30EB(SUV)\u306E\u5024\u304C\u4E0D\u6B63\u3067\u3059"]).$join(separator)};
      damage_level = "";
      $send(table_damage['$[]'](suv), 'each', [], ($$11 = function(v){var self = $$11.$$s || this, $$12;

      
        
        if (v == null) {
          v = nil;
        };
        return $send(v, 'each', [], ($$12 = function(d, n){var self = $$12.$$s || this;

        
          
          if (d == null) {
            d = nil;
          };
          
          if (n == null) {
            n = nil;
          };
          self.$debug("" + "suv[" + (suv) + "] " + (v) + " " + (d) + " " + (n));
          if ($truthy($rb_le(n, numbuf))) {
            return (damage_level = d)
          } else {
            return nil
          };}, $$12.$$s = self, $$12.$$arity = 2, $$12));}, $$11.$$s = self, $$11.$$arity = 1, $$11));
      result_parts = [];
      if ($truthy(numbuf['$!='](num.$to_i()))) {
        result_parts.$push(numbuf.$to_s())};
      if (suv['$==']("M")) {
        result_parts.$push("\u8010\u7269", "" + "HP[" + (damage_level) + "]")
      } else {
        result_parts.$push("" + "\u8010\u4E45\u30EC\u30D9\u30EB(SUV)[" + (suv) + "]", "" + "\u90E8\u4F4D[" + (table_point['$[]'](num_d1)) + "] \uFF1A \u640D\u50B7\u7A2E\u5225[" + (damage_level) + "]")
      };
      return $rb_plus(header_parts, result_parts).$join(separator);
    }, $MetalHead_mh_crc_table$10.$$arity = 2);
    Opal.const_set($nesting[0], 'TABLE_ROLL_RESULT_FORMATTER', $send(self, 'lambda', [], ($MetalHead$13 = function(table, result){var self = $MetalHead$13.$$s || this;

    
      
      if (table == null) {
        table = nil;
      };
      
      if (result == null) {
        result = nil;
      };
      return [table.$name(), result.$sum(), result.$content()].$join(" \uFF1E ");}, $MetalHead$13.$$s = self, $MetalHead$13.$$arity = 2, $MetalHead$13)));
    return Opal.const_set($nesting[0], 'TABLES', $hash2(["CC", "ACL", "ACS"], {"CC": $send($$($nesting, 'RangeTable'), 'new', ["\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u30C1\u30E3\u30FC\u30C8", "1D10", [[1, "\u76F8\u624B\u306F\u77E5\u899A\u7CFB\u306B\u591A\u5927\u306A\u30C0\u30E1\u30FC\u30B8\u3092\u53D7\u3051\u305F\u3002PER\u30921\u306B\u3057\u3066\u982D\u90E8\u306BHW\u306E\u30C0\u30E1\u30FC\u30B8\u3001\u304A\u3088\u3073\u5FC3\u7406\u30C1\u30A7\u30C3\u30AF\u3002"], [2, "\u76F8\u624B\u306E\u904B\u52D5\u795E\u7D4C\u3092\u65AD\u3061\u5207\u3063\u305F\u3002DEX\u30921\u306B\u3057\u3066\u8155\u90E8\u306BHW\u306E\u30C0\u30E1\u30FC\u30B8\u3001\u304A\u3088\u3073\u5FC3\u7406\u30C1\u30A7\u30C3\u30AF\u3002\u3055\u3089\u306B\u8155\u306B\u6301\u3063\u3066\u3044\u305F\u6B66\u5668\u306A\u3069\u306F\u843D\u3068\u3057\u3066\u3057\u307E\u3046\u3002"], [3, "\u76F8\u624B\u306E\u79FB\u52D5\u624B\u6BB5\u306F\u5B8C\u5168\u306B\u596A\u308F\u308C\u305F\u3002REF\u30921\u306B\u3057\u3066\u811A\u90E8\u306BHW\u30C0\u30E1\u30FC\u30B8\u3068\u5FC3\u7406\u30C1\u30A7\u30C3\u30AF\u3002\u307E\u305F\u3001\u6B21\u56DE\u304B\u3089\u306E\u3053\u3061\u3089\u306E\u653B\u6483\u306F\u5FC5\u305A\u547D\u4E2D\u3059\u308B\u3002"], [$range(4, 5, false), "\u76F8\u624B\u306E\u6025\u6240\u306B\u547D\u4E2D\u3002\u6FC0\u75DB\u306E\u305F\u3081\u6C17\u7D76\u3057\u305F\u4E0A\u3001\u80F4\u306BHW\u30C0\u30E1\u30FC\u30B8\u3002"], [6, "\u52B9\u679C\u7684\u306A\u4E00\u6483\u3002\u80F4\u306BHW\u30C0\u30E1\u30FC\u30B8\u3002\u5FC3\u7406\u30C1\u30A7\u30C3\u30AF\u3002"], [7, "\u52B9\u679C\u7684\u306A\u4E00\u6483\u3002\u80F4\u306BMO\u30C0\u30E1\u30FC\u30B8\u3002\u5FC3\u7406\u30C1\u30A7\u30C3\u30AF\u3002"], [$range(8, 10, false), "\u541B\u306E\u4E00\u6483\u306F\u76F8\u624B\u306E\u4E2D\u67A2\u3092\u5B8C\u5168\u306B\u7834\u58CA\u3057\u305F\u3002\u5373\u6B7B\u3067\u3042\u308B\u3002"]]], $$($nesting, 'TABLE_ROLL_RESULT_FORMATTER').$to_proc()), "ACL": $send($$($nesting, 'RangeTable'), 'new', ["\u30A2\u30AF\u30B7\u30C7\u30F3\u30C8\u30C1\u30E3\u30FC\u30C8\uFF08\u5C04\u6483\u30FB\u6295\u64F2\uFF09", "1D10", [[$range(1, 7, false), "\u3055\u3055\u3044\u306A\u30DF\u30B9\u3002\u7279\u306B\u30DA\u30CA\u30EB\u30C6\u30A3\u30FC\u306F\u306A\u3044\u3002"], [8, "\u4E0D\u767A\u3001\u307E\u305F\u306F\u30B8\u30E3\u30E0\u3002\u5F3E\u3092\u53D6\u308A\u51FA\u3055\u306D\u3070\u306A\u3089\u306A\u3044\u7269\u306F\u6B21\u306E\u30BF\u30FC\u30F3\u306F\u5C04\u6483\u3067\u304D\u306A\u3044\u3002"], [9, "\u3055\u3055\u3044\u306A\u6545\u969C\u3002\u53EF\u80FD\u306A\u3089\u6B21\u306E\u30BF\u30FC\u30F3\u304B\u3089\u500B\u5225\u6B66\u5668\u306E\u30B9\u30AD\u30EB\u30ED\u30FC\u30EB\u3067\u4FEE\u7406\u3092\u884C\u3048\u308B\u3002"], [10, "\u6B66\u5668\u306E\u66B4\u767A\u3001\u307E\u305F\u306F\u7206\u767A\u3002\u982D\u90E8HW\u306E\u5FC3\u7406\u52B9\u679C\u30ED\u30FC\u30EB\u3002\u3055\u3089\u306B\u3001\u305D\u306E\u6B66\u5668\u306F\u7834\u58CA\u3055\u308CPER\u3068DEX\u306E\u3069\u3061\u3089\u304B\u3001\u307E\u305F\u306F\u4E21\u65B9\u306B\u8A082\u30DD\u30A4\u30F3\u30C8\u306E\u30DE\u30A4\u30CA\u30B9\u3092\u4E0E\u3048\u308B\u3002\uFF08\u9060\u9694\u64CD\u4F5C\u306E\u5834\u5408\u3001\u5C04\u624B\u3078\u306E\u88AB\u5BB3\u306F\u7121\u3057\uFF09"]]], $$($nesting, 'TABLE_ROLL_RESULT_FORMATTER').$to_proc()), "ACS": $send($$($nesting, 'RangeTable'), 'new', ["\u30A2\u30AF\u30B7\u30C7\u30F3\u30C8\u30C1\u30E3\u30FC\u30C8\uFF08\u683C\u95D8\uFF09", "1D10", [[$range(1, 3, false), "\u8DB3\u3092\u6ED1\u3089\u305B\u3066\u8EE2\u5012\u3057\u3001\u8D77\u304D\u4E0A\u304C\u308B\u307E\u3067\u76F8\u624B\u306B+20\u306E\u547D\u4E2D\u4FEE\u6B63\u3092\u4E0E\u3048\u308B\u3002"], [$range(4, 6, false), "\u624B\u3092\u6ED1\u3089\u305B\u3066\u3001\u6B66\u5668\u3092\u843D\u3068\u3059\u3002\u7D20\u624B\u306E\u6642\u306F\u95A2\u4FC2\u306A\u3044\u3002"], [$range(7, 9, false), "\u4F7F\u7528\u6B66\u5668\u306E\u7834\u58CA\u3002\u7D20\u624B\u6226\u95D8\u306E\u3068\u304D\u306FMW\u306E\u30C0\u30E1\u30FC\u30B8\u3092\u53D7\u3051\u308B\u3002"], [10, "\u624B\u3092\u6ED1\u3089\u305B\u3001\u4E0D\u5E78\u306B\u3082\u6B66\u5668\u306F\u98DB\u3093\u3067\u3044\u304D\u30015m\u4EE5\u5185\u306B\u4EBA\u304C\u3044\u308C\u3070\u8AB0\u304B\u306B\u523A\u3055\u308B\u304B\u3001\u307E\u305F\u306F\u6253\u6483\u3092\u4E0E\u3048\u308B\u304B\u3082\u3057\u308C\u306A\u3044\u3002\u30E9\u30F3\u30C0\u30E0\u306B\u6C7A\u5B9A\u3057\u3001\u666E\u901A\u3069\u304A\u308A\u5224\u5B9A\u3092\u7D9A\u3051\u308B\u3002\u7D20\u624B\u306E\u3068\u304D\u306F\u95A2\u4FC2\u306A\u3044\u3002"]]], $$($nesting, 'TABLE_ROLL_RESULT_FORMATTER').$to_proc())}).$freeze());
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting);
})(Opal);
