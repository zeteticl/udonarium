<<<<<<< HEAD
/* Generated by Opal 0.11.4 */

(function(Opal) {

  function $rb_minus(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);

  }

  function $rb_divide(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);

  }

  function $rb_plus(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);

  }

  function $rb_times(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);

  }

  function $rb_lt(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);

  }

  function $rb_ge(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);

  }

  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;



  Opal.add_stubs(['$freeze', '$attr_reader', '$map', '$to_proc', '$join', '$clearPrefixes', '$!', '$empty?', '$prefixs', '$prefixes', '$class', '$warn', '$gameType', '$setPrefixes', '$attr_accessor', '$gameName', '$getHelpMessage', '$attr_writer', '$rand', '$check_suc', '$roll', '$marshalSignOfInequality', '$unlimitedRollDiceType', '$getD66Value', '$rollDiceAddingUp', '$parren_killer', '$debug', '$isGetOriginalMessage', '$getOriginalMessage', '$=~', '$prefixesPattern', '$last_match', '$removeDiceCommandMessage', '$rollDiceCommandCatched', '$nil?', '$!=', '$sub', '$rollDiceCommand', '$to_s', '$backtrace', '$get_table_by_nD6', '$get_table_by_nDx', '$getTableValue', '$[]', '$-', '$/', '$getD66', '$bcdice', '$get_table_by_number', '$+', '$*', '$<', '$==', '$getDiceListFromDiceText', '$collect', '$split', '$to_i', '$each', '$>=', '$kind_of?', '$lambda', '$call', '$select', '$public_methods', '$===', '$send', '$upcase', '$getTableInfoFromExtraTableText', '$get_table_by_nDx_extratable', '$get_table_by_d66', '$floor', '$%', '$get_table_by_d66_swap', '$raise', '$gsub', '$rollTableMessageDiceText', '$is_a?', '$size', '$inspect']);

  return (function($base, $super, $parent_nesting) {

    function $DiceBot(){};

    var self = $DiceBot = $klass($base, $super, 'DiceBot', $DiceBot);



    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DiceBot_setPrefixes_1, TMP_DiceBot_clearPrefixes_2, TMP_DiceBot_inherited_3, TMP_DiceBot_initialize_4, TMP_DiceBot_postSet_5, TMP_DiceBot_info_6, TMP_DiceBot_gameName_7, TMP_DiceBot_prefixes_8, TMP_DiceBot_setGameType_9, TMP_DiceBot_setSendMode_10, TMP_DiceBot_bcdice$eq_11, TMP_DiceBot_bcdice_12, TMP_DiceBot_rand_13, TMP_DiceBot_check_suc_14, TMP_DiceBot_roll_15, TMP_DiceBot_marshalSignOfInequality_16, TMP_DiceBot_unlimitedRollDiceType_17, TMP_DiceBot_setSortType_18, TMP_DiceBot_d66_19, TMP_DiceBot_rollDiceAddingUp_20, TMP_DiceBot_getHelpMessage_21, TMP_DiceBot_parren_killer_22, TMP_DiceBot_changeText_23, TMP_DiceBot_dice_command_24, TMP_DiceBot_isGetOriginalMessage_25, TMP_DiceBot_removeDiceCommandMessage_26, TMP_DiceBot_rollDiceCommandCatched_27, TMP_DiceBot_rollDiceCommand_28, TMP_DiceBot_setDiceText_29, TMP_DiceBot_setDiffText_30, TMP_DiceBot_dice_command_xRn_31, TMP_DiceBot_check_2D6_32, TMP_DiceBot_check_nD6_33, TMP_DiceBot_check_nD10_34, TMP_DiceBot_check_1D100_35, TMP_DiceBot_check_1D20_36, TMP_DiceBot_get_table_by_2d6_37, TMP_DiceBot_get_table_by_1d6_38, TMP_DiceBot_get_table_by_nD6_39, TMP_DiceBot_get_table_by_nDx_40, TMP_DiceBot_get_table_by_1d3_41, TMP_DiceBot_getD66_42, TMP_DiceBot_get_table_by_d66_swap_43, TMP_DiceBot_get_table_by_d66_44, TMP_DiceBot_getDiceRolledAdditionalText_45, TMP_DiceBot_getDiceRevision_46, TMP_DiceBot_changeDiceValueByDiceText_47, TMP_DiceBot_setRatingTable_48, TMP_DiceBot_isD9_49, TMP_DiceBot_getGrichText_50, TMP_DiceBot_check2dCritical_51, TMP_DiceBot_is2dCritical_52, TMP_DiceBot_should_reroll$q_53, TMP_DiceBot_getDiceList_54, TMP_DiceBot_getDiceListFromDiceText_56, TMP_DiceBot_get_table_by_number_58, TMP_DiceBot_getTableValue_60, TMP_DiceBot_analyzeDiceCommandResultMethod_63, TMP_DiceBot_get_table_by_nDx_extratable_64, TMP_DiceBot_getTableCommandResult_65, TMP_DiceBot_getTableInfoFromExtraTableText_67, TMP_DiceBot_roll_tables_68;



    def.rerollLimitCount = def.diceText = def.d66Type = nil;

    

    Opal.const_set($nesting[0], 'EMPTY_PREFIXES_PATTERN', /(^|\s)(S)?()(\s|$)/i.$freeze());

    (function(self, $parent_nesting) {

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);



      return self.$attr_reader("prefixes")

    })(Opal.get_singleton_class(self), $nesting);

    (function(self, $parent_nesting) {

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);



      return self.$attr_reader("prefixesPattern")

    })(Opal.get_singleton_class(self), $nesting);

    Opal.defs(self, '$setPrefixes', TMP_DiceBot_setPrefixes_1 = function $$setPrefixes(prefixes) {

      var self = this;



      

      self.prefixes = $send(prefixes, 'map', [], "freeze".$to_proc()).$freeze();

      self.prefixesPattern = new RegExp("" + "(^|\\s)(S)?(" + (prefixes.$join("|")) + ")(\\s|$)", 'i').$freeze();

      return self;

    }, TMP_DiceBot_setPrefixes_1.$$arity = 1);

    Opal.defs(self, '$clearPrefixes', TMP_DiceBot_clearPrefixes_2 = function $$clearPrefixes() {

      var self = this;



      

      self.prefixes = [].$freeze();

      self.prefixesPattern = Opal.const_get_relative($nesting, 'EMPTY_PREFIXES_PATTERN');

      return self;

    }, TMP_DiceBot_clearPrefixes_2.$$arity = 0);

    Opal.defs(self, '$inherited', TMP_DiceBot_inherited_3 = function $$inherited(subclass) {

      var self = this;



      return subclass.$clearPrefixes()

    }, TMP_DiceBot_inherited_3.$$arity = 1);

    self.$clearPrefixes();

    (Opal.class_variable_set($DiceBot, '@@bcdice', nil));

    (Opal.class_variable_set($DiceBot, '@@DEFAULT_SEND_MODE', 2));

    

    Opal.defn(self, '$initialize', TMP_DiceBot_initialize_4 = function $$initialize() {

      var $a, self = this;



      

      self.sendMode = (($a = $DiceBot.$$cvars['@@DEFAULT_SEND_MODE']) == null ? nil : $a);

      self.sortType = 0;

      self.sameDiceRerollCount = 0;

      self.sameDiceRerollType = 0;

      self.d66Type = 1;

      self.isPrintMaxDice = false;

      self.upplerRollThreshold = 0;

      self.unlimitedRollDiceType = 0;

      self.rerollNumber = 0;

      self.defaultSuccessTarget = "";

      self.rerollLimitCount = 10000;

      self.fractionType = "omit";

      self.gameType = "DiceBot";

      if ($truthy(($truthy($a = self.$prefixs()['$empty?']()['$!']()) ? self.$class().$prefixes()['$empty?']() : $a))) {

        

        self.$warn("" + (self.$gameType()) + ": #prefixs is deprecated. Please use .setPrefixes.");

        return self.$class().$setPrefixes(self.$prefixs());

        } else {

        return nil

      };

    }, TMP_DiceBot_initialize_4.$$arity = 0);

    self.$attr_accessor("rerollLimitCount");

    self.$attr_reader("sendMode", "sameDiceRerollCount", "sameDiceRerollType", "d66Type");

    self.$attr_reader("isPrintMaxDice", "upplerRollThreshold");

    self.$attr_reader("defaultSuccessTarget", "rerollNumber", "fractionType");

    

    Opal.defn(self, '$postSet', TMP_DiceBot_postSet_5 = function $$postSet() {

      var self = this;



      return nil

    }, TMP_DiceBot_postSet_5.$$arity = 0);

    

    Opal.defn(self, '$info', TMP_DiceBot_info_6 = function $$info() {

      var self = this;



      return $hash2(["name", "gameType", "prefixs", "info"], {"name": self.$gameName(), "gameType": self.$gameType(), "prefixs": self.$class().$prefixes(), "info": self.$getHelpMessage()})

    }, TMP_DiceBot_info_6.$$arity = 0);

    

    Opal.defn(self, '$gameName', TMP_DiceBot_gameName_7 = function $$gameName() {

      var self = this;



      return self.$gameType()

    }, TMP_DiceBot_gameName_7.$$arity = 0);

    

    Opal.defn(self, '$prefixes', TMP_DiceBot_prefixes_8 = function $$prefixes() {

      var self = this;



      return self.$class().$prefixes()

    }, TMP_DiceBot_prefixes_8.$$arity = 0);

    Opal.alias(self, "prefixs", "prefixes");

    self.$attr_reader("gameType");

    

    Opal.defn(self, '$setGameType', TMP_DiceBot_setGameType_9 = function $$setGameType(type) {

      var self = this;



      return (self.gameType = type)

    }, TMP_DiceBot_setGameType_9.$$arity = 1);

    

    Opal.defn(self, '$setSendMode', TMP_DiceBot_setSendMode_10 = function $$setSendMode(m) {

      var self = this;



      return (self.sendMode = m)

    }, TMP_DiceBot_setSendMode_10.$$arity = 1);

    self.$attr_writer("upplerRollThreshold");

    

    Opal.defn(self, '$bcdice=', TMP_DiceBot_bcdice$eq_11 = function(b) {

      var self = this;



      return (Opal.class_variable_set($DiceBot, '@@bcdice', b))

    }, TMP_DiceBot_bcdice$eq_11.$$arity = 1);

    

    Opal.defn(self, '$bcdice', TMP_DiceBot_bcdice_12 = function $$bcdice() {

      var $a, self = this;



      return (($a = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $a)

    }, TMP_DiceBot_bcdice_12.$$arity = 0);

    

    Opal.defn(self, '$rand', TMP_DiceBot_rand_13 = function $$rand(max) {

      var $a, self = this;



      return (($a = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $a).$rand(max)

    }, TMP_DiceBot_rand_13.$$arity = 1);

    

    Opal.defn(self, '$check_suc', TMP_DiceBot_check_suc_14 = function $$check_suc($a_rest) {

      var $b, self = this, params;



      var $args_len = arguments.length, $rest_len = $args_len - 0;

      if ($rest_len < 0) { $rest_len = 0; }

      params = new Array($rest_len);

      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {

        params[$arg_idx - 0] = arguments[$arg_idx];

      }

      return $send((($b = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $b), 'check_suc', Opal.to_a(params))

    }, TMP_DiceBot_check_suc_14.$$arity = -1);

    

    Opal.defn(self, '$roll', TMP_DiceBot_roll_15 = function $$roll($a_rest) {

      var $b, self = this, args;



      var $args_len = arguments.length, $rest_len = $args_len - 0;

      if ($rest_len < 0) { $rest_len = 0; }

      args = new Array($rest_len);

      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {

        args[$arg_idx - 0] = arguments[$arg_idx];

      }

      return $send((($b = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $b), 'roll', Opal.to_a(args))

    }, TMP_DiceBot_roll_15.$$arity = -1);

    

    Opal.defn(self, '$marshalSignOfInequality', TMP_DiceBot_marshalSignOfInequality_16 = function $$marshalSignOfInequality($a_rest) {

      var $b, self = this, args;



      var $args_len = arguments.length, $rest_len = $args_len - 0;

      if ($rest_len < 0) { $rest_len = 0; }

      args = new Array($rest_len);

      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {

        args[$arg_idx - 0] = arguments[$arg_idx];

      }

      return $send((($b = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $b), 'marshalSignOfInequality', Opal.to_a(args))

    }, TMP_DiceBot_marshalSignOfInequality_16.$$arity = -1);

    

    Opal.defn(self, '$unlimitedRollDiceType', TMP_DiceBot_unlimitedRollDiceType_17 = function $$unlimitedRollDiceType() {

      var $a, self = this;



      return (($a = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $a).$unlimitedRollDiceType()

    }, TMP_DiceBot_unlimitedRollDiceType_17.$$arity = 0);

    self.$attr_reader("sortType");

    

    Opal.defn(self, '$setSortType', TMP_DiceBot_setSortType_18 = function $$setSortType(s) {

      var self = this;



      return (self.sortType = s)

    }, TMP_DiceBot_setSortType_18.$$arity = 1);

    

    Opal.defn(self, '$d66', TMP_DiceBot_d66_19 = function $$d66($a_rest) {

      var $b, self = this, args;



      var $args_len = arguments.length, $rest_len = $args_len - 0;

      if ($rest_len < 0) { $rest_len = 0; }

      args = new Array($rest_len);

      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {

        args[$arg_idx - 0] = arguments[$arg_idx];

      }

      return $send((($b = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $b), 'getD66Value', Opal.to_a(args))

    }, TMP_DiceBot_d66_19.$$arity = -1);

    

    Opal.defn(self, '$rollDiceAddingUp', TMP_DiceBot_rollDiceAddingUp_20 = function $$rollDiceAddingUp($a_rest) {

      var $b, self = this, arg;



      var $args_len = arguments.length, $rest_len = $args_len - 0;

      if ($rest_len < 0) { $rest_len = 0; }

      arg = new Array($rest_len);

      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {

        arg[$arg_idx - 0] = arguments[$arg_idx];

      }

      return $send((($b = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $b), 'rollDiceAddingUp', Opal.to_a(arg))

    }, TMP_DiceBot_rollDiceAddingUp_20.$$arity = -1);

    

    Opal.defn(self, '$getHelpMessage', TMP_DiceBot_getHelpMessage_21 = function $$getHelpMessage() {

      var self = this;



      return ""

    }, TMP_DiceBot_getHelpMessage_21.$$arity = 0);

    

    Opal.defn(self, '$parren_killer', TMP_DiceBot_parren_killer_22 = function $$parren_killer(string) {

      var $a, self = this;



      return (($a = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $a).$parren_killer(string)

    }, TMP_DiceBot_parren_killer_22.$$arity = 1);

    

    Opal.defn(self, '$changeText', TMP_DiceBot_changeText_23 = function $$changeText(string) {

      var self = this;



      

      self.$debug("DiceBot.parren_killer_add called");

      return string;

    }, TMP_DiceBot_changeText_23.$$arity = 1);

    

    Opal.defn(self, '$dice_command', TMP_DiceBot_dice_command_24 = function $$dice_command(string, nick_e) {

      var $a, $b, self = this, secret_flg = nil, secretMarker = nil, command = nil, output_msg = nil;



      

      if ($truthy(self.$isGetOriginalMessage())) {

        string = (($a = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $a).$getOriginalMessage()};

      self.$debug("dice_command Begin string", string);

      secret_flg = false;

      if ($truthy(self.$class().$prefixesPattern()['$=~'](string))) {

        } else {

        

        self.$debug("not match in prefixes");

        return ["1", secret_flg];

      };

      secretMarker = Opal.const_get_relative($nesting, 'Regexp').$last_match(2);

      command = Opal.const_get_relative($nesting, 'Regexp').$last_match(3);

      command = self.$removeDiceCommandMessage(command);

      self.$debug("dicebot after command", command);

      self.$debug("match");

      $b = self.$rollDiceCommandCatched(command), $a = Opal.to_ary($b), (output_msg = ($a[0] == null ? nil : $a[0])), (secret_flg = ($a[1] == null ? nil : $a[1])), $b;

      if ($truthy(($truthy($a = output_msg['$nil?']()) ? $a : output_msg['$empty?']()))) {

        output_msg = "1"};

      secret_flg = ($truthy($a = secret_flg) ? $a : false);

      if ($truthy(output_msg['$!=']("1"))) {

        output_msg = "" + (nick_e) + ": " + (output_msg)};

      if ($truthy(secretMarker)) {

        if ($truthy(output_msg['$!=']("1"))) {

          secret_flg = true}};

      return [output_msg, secret_flg];

    }, TMP_DiceBot_dice_command_24.$$arity = 2);

    

    Opal.defn(self, '$isGetOriginalMessage', TMP_DiceBot_isGetOriginalMessage_25 = function $$isGetOriginalMessage() {

      var self = this;



      return false

    }, TMP_DiceBot_isGetOriginalMessage_25.$$arity = 0);

    

    Opal.defn(self, '$removeDiceCommandMessage', TMP_DiceBot_removeDiceCommandMessage_26 = function $$removeDiceCommandMessage(command) {

      var self = this;



      return command.$sub(/[\s　].+/, "")

    }, TMP_DiceBot_removeDiceCommandMessage_26.$$arity = 1);

    

    Opal.defn(self, '$rollDiceCommandCatched', TMP_DiceBot_rollDiceCommandCatched_27 = function $$rollDiceCommandCatched(command) {

      var $a, $b, self = this, result = nil, secret_flg = nil, e = nil;



      

      result = nil;

      

      try {

        

        self.$debug("call rollDiceCommand command", command);

        $b = self.$rollDiceCommand(command), $a = Opal.to_ary($b), (result = ($a[0] == null ? nil : $a[0])), (secret_flg = ($a[1] == null ? nil : $a[1])), $b;

      } catch ($err) {

        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {e = $err;

          try {

            self.$debug("executeCommand exception", e.$to_s(), e.$backtrace().$join("\n"))

          } finally { Opal.pop_exception() }

        } else { throw $err; }

      };;

      self.$debug("rollDiceCommand result", result);

      return [result, secret_flg];

    }, TMP_DiceBot_rollDiceCommandCatched_27.$$arity = 1);

    

    Opal.defn(self, '$rollDiceCommand', TMP_DiceBot_rollDiceCommand_28 = function $$rollDiceCommand(_command) {

      var self = this;



      return nil

    }, TMP_DiceBot_rollDiceCommand_28.$$arity = 1);

    

    Opal.defn(self, '$setDiceText', TMP_DiceBot_setDiceText_29 = function $$setDiceText(diceText) {

      var self = this;



      

      self.$debug("setDiceText diceText", diceText);

      return (self.diceText = diceText);

    }, TMP_DiceBot_setDiceText_29.$$arity = 1);

    

    Opal.defn(self, '$setDiffText', TMP_DiceBot_setDiffText_30 = function $$setDiffText(diffText) {

      var self = this;



      return (self.diffText = diffText)

    }, TMP_DiceBot_setDiffText_30.$$arity = 1);

    

    Opal.defn(self, '$dice_command_xRn', TMP_DiceBot_dice_command_xRn_31 = function $$dice_command_xRn(_string, _nick_e) {

      var self = this;



      return ""

    }, TMP_DiceBot_dice_command_xRn_31.$$arity = 2);

    

    Opal.defn(self, '$check_2D6', TMP_DiceBot_check_2D6_32 = function $$check_2D6(_total_n, _dice_n, _signOfInequality, _diff, _dice_cnt, _dice_max, _n1, _n_max) {

      var self = this;



      return ""

    }, TMP_DiceBot_check_2D6_32.$$arity = 8);

    

    Opal.defn(self, '$check_nD6', TMP_DiceBot_check_nD6_33 = function $$check_nD6(_total_n, _dice_n, _signOfInequality, _diff, _dice_cnt, _dice_max, _n1, _n_max) {

      var self = this;



      return ""

    }, TMP_DiceBot_check_nD6_33.$$arity = 8);

    

    Opal.defn(self, '$check_nD10', TMP_DiceBot_check_nD10_34 = function $$check_nD10(_total_n, _dice_n, _signOfInequality, _diff, _dice_cnt, _dice_max, _n1, _n_max) {

      var self = this;



      return ""

    }, TMP_DiceBot_check_nD10_34.$$arity = 8);

    

    Opal.defn(self, '$check_1D100', TMP_DiceBot_check_1D100_35 = function $$check_1D100(_total_n, _dice_n, _signOfInequality, _diff, _dice_cnt, _dice_max, _n1, _n_max) {

      var self = this;



      return ""

    }, TMP_DiceBot_check_1D100_35.$$arity = 8);

    

    Opal.defn(self, '$check_1D20', TMP_DiceBot_check_1D20_36 = function $$check_1D20(_total_n, _dice_n, _signOfInequality, _diff, _dice_cnt, _dice_max, _n1, _n_max) {

      var self = this;



      return ""

    }, TMP_DiceBot_check_1D20_36.$$arity = 8);

    

    Opal.defn(self, '$get_table_by_2d6', TMP_DiceBot_get_table_by_2d6_37 = function $$get_table_by_2d6(table) {

      var self = this;



      return self.$get_table_by_nD6(table, 2)

    }, TMP_DiceBot_get_table_by_2d6_37.$$arity = 1);

    

    Opal.defn(self, '$get_table_by_1d6', TMP_DiceBot_get_table_by_1d6_38 = function $$get_table_by_1d6(table) {

      var self = this;



      return self.$get_table_by_nD6(table, 1)

    }, TMP_DiceBot_get_table_by_1d6_38.$$arity = 1);

    

    Opal.defn(self, '$get_table_by_nD6', TMP_DiceBot_get_table_by_nD6_39 = function $$get_table_by_nD6(table, count) {

      var self = this;



      return self.$get_table_by_nDx(table, count, 6)

    }, TMP_DiceBot_get_table_by_nD6_39.$$arity = 2);

    

    Opal.defn(self, '$get_table_by_nDx', TMP_DiceBot_get_table_by_nDx_40 = function $$get_table_by_nDx(table, count, diceType) {

      var $a, $b, self = this, num = nil, text = nil;



      

      $b = self.$roll(count, diceType), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), $b;

      text = self.$getTableValue(table['$[]']($rb_minus(num, count)));

      if ($truthy(text['$nil?']())) {

        return ["1", 0]};

      return [text, num];

    }, TMP_DiceBot_get_table_by_nDx_40.$$arity = 3);

    

    Opal.defn(self, '$get_table_by_1d3', TMP_DiceBot_get_table_by_1d3_41 = function $$get_table_by_1d3(table) {

      var $a, $b, self = this, count = nil, num = nil, index = nil, text = nil;



      

      self.$debug("get_table_by_1d3");

      count = 1;

      $b = self.$roll(count, 6), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), $b;

      self.$debug("num", num);

      index = $rb_divide($rb_minus(num, 1), 2);

      self.$debug("index", index);

      text = table['$[]'](index);

      if ($truthy(text['$nil?']())) {

        return ["1", 0]};

      return [text, num];

    }, TMP_DiceBot_get_table_by_1d3_41.$$arity = 1);

    

    Opal.defn(self, '$getD66', TMP_DiceBot_getD66_42 = function $$getD66(isSwap) {

      var self = this;



      return self.$bcdice().$getD66(isSwap)

    }, TMP_DiceBot_getD66_42.$$arity = 1);

    

    Opal.defn(self, '$get_table_by_d66_swap', TMP_DiceBot_get_table_by_d66_swap_43 = function $$get_table_by_d66_swap(table) {

      var self = this, isSwap = nil, number = nil;



      

      isSwap = true;

      number = self.$bcdice().$getD66(isSwap);

      return [self.$get_table_by_number(number, table), number];

    }, TMP_DiceBot_get_table_by_d66_swap_43.$$arity = 1);

    

    Opal.defn(self, '$get_table_by_d66', TMP_DiceBot_get_table_by_d66_44 = function $$get_table_by_d66(table) {

      var $a, $b, self = this, dice1 = nil, dice2 = nil, num = nil, text = nil, indexText = nil;



      

      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice1 = ($a[0] == null ? nil : $a[0])), $b;

      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice2 = ($a[0] == null ? nil : $a[0])), $b;

      num = $rb_plus($rb_times($rb_minus(dice1, 1), 6), $rb_minus(dice2, 1));

      text = table['$[]'](num);

      indexText = "" + (dice1) + (dice2);

      if ($truthy(text['$nil?']())) {

        return ["1", indexText]};

      return [text, indexText];

    }, TMP_DiceBot_get_table_by_d66_44.$$arity = 1);

    

    Opal.defn(self, '$getDiceRolledAdditionalText', TMP_DiceBot_getDiceRolledAdditionalText_45 = function $$getDiceRolledAdditionalText(_n1, _n_max, _dice_max) {

      var self = this;



      return ""

    }, TMP_DiceBot_getDiceRolledAdditionalText_45.$$arity = 3);

    

    Opal.defn(self, '$getDiceRevision', TMP_DiceBot_getDiceRevision_46 = function $$getDiceRevision(_n_max, _dice_max, _total_n) {

      var self = this;



      return ["", 0]

    }, TMP_DiceBot_getDiceRevision_46.$$arity = 3);

    

    Opal.defn(self, '$changeDiceValueByDiceText', TMP_DiceBot_changeDiceValueByDiceText_47 = function $$changeDiceValueByDiceText(dice_now, _dice_str, _isCheckSuccess, _dice_max) {

      var self = this;



      return dice_now

    }, TMP_DiceBot_changeDiceValueByDiceText_47.$$arity = 4);

    

    Opal.defn(self, '$setRatingTable', TMP_DiceBot_setRatingTable_48 = function $$setRatingTable(_nick_e, _tnick, _channel_to_list) {

      var self = this;



      return "1"

    }, TMP_DiceBot_setRatingTable_48.$$arity = 3);

    

    Opal.defn(self, '$isD9', TMP_DiceBot_isD9_49 = function $$isD9() {

      var self = this;



      return false

    }, TMP_DiceBot_isD9_49.$$arity = 0);

    

    Opal.defn(self, '$getGrichText', TMP_DiceBot_getGrichText_50 = function $$getGrichText(_numberSpot1, _dice_cnt_total, _suc) {

      var self = this;



      return ""

    }, TMP_DiceBot_getGrichText_50.$$arity = 3);

    

    Opal.defn(self, '$check2dCritical', TMP_DiceBot_check2dCritical_51 = function $$check2dCritical(critical, dice_new, dice_arry, loop_count) {

      var self = this;



      return nil

    }, TMP_DiceBot_check2dCritical_51.$$arity = 4);

    

    Opal.defn(self, '$is2dCritical', TMP_DiceBot_is2dCritical_52 = function $$is2dCritical() {

      var self = this;



      return false

    }, TMP_DiceBot_is2dCritical_52.$$arity = 0);

    

    Opal.defn(self, '$should_reroll?', TMP_DiceBot_should_reroll$q_53 = function(loop_count) {

      var $a, self = this;



      return ($truthy($a = $rb_lt(loop_count, self.rerollLimitCount)) ? $a : self.rerollLimitCount['$=='](0))

    }, TMP_DiceBot_should_reroll$q_53.$$arity = 1);

    

    Opal.defn(self, '$getDiceList', TMP_DiceBot_getDiceList_54 = function $$getDiceList() {

      var self = this;



      return self.$getDiceListFromDiceText(self.diceText)

    }, TMP_DiceBot_getDiceList_54.$$arity = 0);

    

    Opal.defn(self, '$getDiceListFromDiceText', TMP_DiceBot_getDiceListFromDiceText_56 = function $$getDiceListFromDiceText(diceText) {

      var TMP_55, self = this, diceList = nil, diceString = nil;



      

      self.$debug("getDiceList diceText", diceText);

      diceList = [];

      if ($truthy(/\[([\d,]+)\]/['$=~'](diceText))) {

        diceText = Opal.const_get_relative($nesting, 'Regexp').$last_match(1)};

      if ($truthy(/([\d,]+)/['$=~'](diceText))) {

        } else {

        return diceList

      };

      diceString = Opal.const_get_relative($nesting, 'Regexp').$last_match(1);

      diceList = $send(diceString.$split(/,/), 'collect', [], (TMP_55 = function(i){var self = TMP_55.$$s || this;

if (i == null) i = nil;

      return i.$to_i()}, TMP_55.$$s = self, TMP_55.$$arity = 1, TMP_55));

      self.$debug("diceList", diceList);

      return diceList;

    }, TMP_DiceBot_getDiceListFromDiceText_56.$$arity = 1);

    

    Opal.defn(self, '$get_table_by_number', TMP_DiceBot_get_table_by_number_58 = function $$get_table_by_number(index, table, default$) {try {



      var TMP_57, self = this;



      if (default$ == null) {

        default$ = "1";

      }

      

      $send(table, 'each', [], (TMP_57 = function(item){var self = TMP_57.$$s || this, number = nil;

if (item == null) item = nil;

      

        number = item['$[]'](0);

        if ($truthy($rb_ge(number, index))) {

          Opal.ret(self.$getTableValue(item['$[]'](1)))

          } else {

          return nil

        };}, TMP_57.$$s = self, TMP_57.$$arity = 1, TMP_57));

      return self.$getTableValue(default$);

      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }

    }, TMP_DiceBot_get_table_by_number_58.$$arity = -3);

    

    Opal.defn(self, '$getTableValue', TMP_DiceBot_getTableValue_60 = function $$getTableValue(data) {try {



      var TMP_59, self = this, lambdaBlock = nil;



      

      if ($truthy(data['$kind_of?'](Opal.const_get_relative($nesting, 'Proc')))) {

        

        lambdaBlock = $send(self, 'lambda', [], (TMP_59 = function(){var self = TMP_59.$$s || this;



        Opal.ret(data.$call())}, TMP_59.$$s = self, TMP_59.$$arity = 0, TMP_59));

        return lambdaBlock.$call();};

      return data;

      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }

    }, TMP_DiceBot_getTableValue_60.$$arity = 1);

    

    Opal.defn(self, '$analyzeDiceCommandResultMethod', TMP_DiceBot_analyzeDiceCommandResultMethod_63 = function $$analyzeDiceCommandResultMethod(command) {try {



      var TMP_61, TMP_62, self = this, methodList = nil;



      

      methodList = $send(self.$public_methods(), 'select', [], (TMP_61 = function(method){var self = TMP_61.$$s || this;

if (method == null) method = nil;

      return /^get.+DiceCommandResult$/['$==='](method.$to_s())}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61));

      $send(methodList, 'each', [], (TMP_62 = function(method){var self = TMP_62.$$s || this, result = nil;

if (method == null) method = nil;

      

        result = self.$send(method, command);

        if ($truthy(result['$nil?']())) {

          return nil

          } else {

          Opal.ret(result)

        };}, TMP_62.$$s = self, TMP_62.$$arity = 1, TMP_62));

      return nil;

      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }

    }, TMP_DiceBot_analyzeDiceCommandResultMethod_63.$$arity = 1);

    

    Opal.defn(self, '$get_table_by_nDx_extratable', TMP_DiceBot_get_table_by_nDx_extratable_64 = function $$get_table_by_nDx_extratable(table, count, diceType) {

      var $a, $b, self = this, number = nil, diceText = nil, text = nil;



      

      $b = self.$roll(count, diceType), $a = Opal.to_ary($b), (number = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;

      text = self.$getTableValue(table['$[]']($rb_minus(number, count)));

      return [text, number, diceText];

    }, TMP_DiceBot_get_table_by_nDx_extratable_64.$$arity = 3);

    

    Opal.defn(self, '$getTableCommandResult', TMP_DiceBot_getTableCommandResult_65 = function $$getTableCommandResult(command, tables, isPrintDiceText) {

      var $a, $b, $c, $d, self = this, info = nil, name = nil, type = nil, table = nil, $case = nil, count = nil, diceType = nil, limit = nil, item = nil, value = nil, output = nil, diceText = nil, text = nil, number = nil;



      if (isPrintDiceText == null) {

        isPrintDiceText = true;

      }

      

      info = tables['$[]'](command.$upcase());

      if ($truthy(info['$nil?']())) {

        return nil};

      name = info['$[]']("name");

      type = info['$[]']("type").$upcase();

      table = info['$[]']("table");

      if ($truthy(($truthy($a = type['$==']("D66")) ? self.d66Type['$=='](2) : $a))) {

        type = "D66S"};

      $b = (function() {$case = type;

      if (/(\d+)D(\d+)/['$===']($case)) {

      count = Opal.const_get_relative($nesting, 'Regexp').$last_match(1).$to_i();

      diceType = Opal.const_get_relative($nesting, 'Regexp').$last_match(2).$to_i();

      limit = $rb_minus($rb_times(diceType, count), $rb_minus(count, 1));

      table = self.$getTableInfoFromExtraTableText(table, limit);

      return self.$get_table_by_nDx_extratable(table, count, diceType);}

      else if ("D66"['$===']($case) || "D66N"['$===']($case)) {

      table = self.$getTableInfoFromExtraTableText(table, 36);

      $d = self.$get_table_by_d66(table), $c = Opal.to_ary($d), (item = ($c[0] == null ? nil : $c[0])), (value = ($c[1] == null ? nil : $c[1])), $d;

      value = value.$to_i();

      output = item['$[]'](1);

      diceText = $rb_plus($rb_plus($rb_divide(value, 10).$floor().$to_s(), ","), value['$%'](10).$to_s());

      return [output, value, diceText];}

      else if ("D66S"['$===']($case)) {

      table = self.$getTableInfoFromExtraTableText(table, 21);

      $d = self.$get_table_by_d66_swap(table), $c = Opal.to_ary($d), (output = ($c[0] == null ? nil : $c[0])), (value = ($c[1] == null ? nil : $c[1])), $d;

      value = value.$to_i();

      diceText = $rb_plus($rb_plus($rb_divide(value, 10).$floor().$to_s(), ","), value['$%'](10).$to_s());

      return [output, value, diceText];}

      else {return self.$raise("" + "invalid dice Type " + (command))}})(), $a = Opal.to_ary($b), (text = ($a[0] == null ? nil : $a[0])), (number = ($a[1] == null ? nil : $a[1])), (diceText = ($a[2] == null ? nil : $a[2])), $b;

      text = text.$gsub("\\n", "\n");

      text = (($a = $DiceBot.$$cvars['@@bcdice']) == null ? nil : $a).$rollTableMessageDiceText(text);

      if ($truthy(text['$nil?']())) {

        return nil};

      if ($truthy(($truthy($a = isPrintDiceText) ? diceText['$nil?']()['$!']() : $a))) {

        return "" + (name) + "(" + (number) + "[" + (diceText) + "]) ＞ " + (text)};

      return "" + (name) + "(" + (number) + ") ＞ " + (text);

    }, TMP_DiceBot_getTableCommandResult_65.$$arity = -3);

    

    Opal.defn(self, '$getTableInfoFromExtraTableText', TMP_DiceBot_getTableInfoFromExtraTableText_67 = function $$getTableInfoFromExtraTableText(text, count) {

      var TMP_66, self = this, newTable = nil;



      if (count == null) {

        count = nil;

      }

      

      if ($truthy(text['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {

        text = text.$split(/\n/)};

      newTable = $send(text, 'map', [], (TMP_66 = function(item){var self = TMP_66.$$s || this, $a;

if (item == null) item = nil;

      if ($truthy(($truthy($a = item['$is_a?'](Opal.const_get_relative($nesting, 'String'))) ? /^(\d+):(.*)/['$==='](item) : $a))) {

          return [Opal.const_get_relative($nesting, 'Regexp').$last_match(1).$to_i(), Opal.const_get_relative($nesting, 'Regexp').$last_match(2)]

          } else {

          return item

        }}, TMP_66.$$s = self, TMP_66.$$arity = 1, TMP_66));

      if ($truthy(count['$nil?']())) {

      } else if ($truthy(newTable.$size()['$!='](count))) {

        self.$raise("" + "invalid table size:" + (newTable.$size()) + "\n" + (newTable.$inspect()))};

      return newTable;

    }, TMP_DiceBot_getTableInfoFromExtraTableText_67.$$arity = -2);

    return (Opal.defn(self, '$roll_tables', TMP_DiceBot_roll_tables_68 = function $$roll_tables(command, tables) {

      var self = this, table = nil;



      

      table = tables['$[]'](command.$upcase());

      if ($truthy(table)) {

        } else {

        return nil

      };

      return table.$roll(self.$bcdice());

    }, TMP_DiceBot_roll_tables_68.$$arity = 2), nil) && 'roll_tables';

  })($nesting[0], null, $nesting)

})(Opal);



/* Generated by Opal 0.11.4 */

(function(Opal) {

  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;



  Opal.add_stubs(['$exit']);

  return Opal.const_get_relative($nesting, 'Kernel').$exit()

})(Opal);

Opal.loaded(["diceBot/DiceBot"]);
/* Generated by Opal 0.11.4 */
Opal.modules["utils/ArithmeticEvaluator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$tokenize', '$expr', '$private', '$split', '$gsub', '$mul', '$loop', '$consume', '$+', '$-', '$unary', '$*', '$div', '$zero?', '$===', '$ceil', '$/', '$to_f', '$round', '$floor', '$-@', '$term', '$expect', '$expect_number', '$!=', '$[]', '$integer?', '$to_i', '$!', '$nil?', '$match']);
  return (function($base, $super, $parent_nesting) {
    function $ArithmeticEvaluator(){};
    var self = $ArithmeticEvaluator = $klass($base, $super, 'ArithmeticEvaluator', $ArithmeticEvaluator);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ArithmeticEvaluator_eval_1, TMP_ArithmeticEvaluator_tokenize_3, TMP_ArithmeticEvaluator_add_5, TMP_ArithmeticEvaluator_mul_7, TMP_ArithmeticEvaluator_div_8, TMP_ArithmeticEvaluator_unary_9, TMP_ArithmeticEvaluator_term_10, TMP_ArithmeticEvaluator_consume_11, TMP_ArithmeticEvaluator_expect_12, TMP_ArithmeticEvaluator_expect_number_13, TMP_ArithmeticEvaluator_integer$q_14;

    def.error = def.round_type = def.tokens = def.idx = nil;
    
    
    Opal.defn(self, '$eval', TMP_ArithmeticEvaluator_eval_1 = function(expr, round_type) {
      var self = this, ret = nil;

      if (round_type == null) {
        round_type = "omit";
      }
      
      self.tokens = self.$tokenize(expr);
      self.idx = 0;
      self.error = false;
      self.round_type = round_type;
      ret = self.$expr();
      if ($truthy(self.error)) {
        return 0
        } else {
        return ret
      };
    }, TMP_ArithmeticEvaluator_eval_1.$$arity = -2);
    self.$private();
    
    Opal.defn(self, '$tokenize', TMP_ArithmeticEvaluator_tokenize_3 = function $$tokenize(expr) {
      var TMP_2, self = this;

      return $send(expr, 'gsub', [/[\(\)\+\-\*\/]/], (TMP_2 = function(e){var self = TMP_2.$$s || this;
if (e == null) e = nil;
      return "" + " " + (e) + " "}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2)).$split(" ")
    }, TMP_ArithmeticEvaluator_tokenize_3.$$arity = 1);
    
    Opal.defn(self, '$add', TMP_ArithmeticEvaluator_add_5 = function $$add() {
      var TMP_4, self = this, ret = nil;

      
      ret = self.$mul();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], (TMP_4 = function(){var self = TMP_4.$$s || this;

      if ($truthy(self.$consume("+"))) {
          return (ret = $rb_plus(ret, self.$mul()))
        } else if ($truthy(self.$consume("-"))) {
          return (ret = $rb_minus(ret, self.$mul()))
          } else {
          
          Opal.brk(nil, $brk)
        }}, TMP_4.$$s = self, TMP_4.$$brk = $brk, TMP_4.$$arity = 0, TMP_4))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, TMP_ArithmeticEvaluator_add_5.$$arity = 0);
    Opal.alias(self, "expr", "add");
    
    Opal.defn(self, '$mul', TMP_ArithmeticEvaluator_mul_7 = function $$mul() {
      var TMP_6, self = this, ret = nil;

      
      ret = self.$unary();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], (TMP_6 = function(){var self = TMP_6.$$s || this;

      if ($truthy(self.$consume("*"))) {
          return (ret = $rb_times(ret, self.$unary()))
        } else if ($truthy(self.$consume("/"))) {
          return (ret = self.$div(ret, self.$unary()))
          } else {
          
          Opal.brk(nil, $brk)
        }}, TMP_6.$$s = self, TMP_6.$$brk = $brk, TMP_6.$$arity = 0, TMP_6))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, TMP_ArithmeticEvaluator_mul_7.$$arity = 0);
    
    Opal.defn(self, '$div', TMP_ArithmeticEvaluator_div_8 = function $$div(left, right) {
      var self = this, $case = nil;

      
      if ($truthy(right['$zero?']())) {
        
        self.error = true;
        return 0;};
      return (function() {$case = self.round_type;
      if ("roundUp"['$===']($case)) {return $rb_divide(left.$to_f(), right).$ceil()}
      else if ("roundOff"['$===']($case)) {return $rb_divide(left.$to_f(), right).$round()}
      else {return $rb_divide(left, right).$floor()}})();
    }, TMP_ArithmeticEvaluator_div_8.$$arity = 2);
    
    Opal.defn(self, '$unary', TMP_ArithmeticEvaluator_unary_9 = function $$unary() {
      var self = this;

      if ($truthy(self.$consume("+"))) {
        return self.$unary()
      } else if ($truthy(self.$consume("-"))) {
        return self.$unary()['$-@']()
        } else {
        return self.$term()
      }
    }, TMP_ArithmeticEvaluator_unary_9.$$arity = 0);
    
    Opal.defn(self, '$term', TMP_ArithmeticEvaluator_term_10 = function $$term() {
      var self = this, ret = nil;

      if ($truthy(self.$consume("("))) {
        
        ret = self.$expr();
        self.$expect(")");
        return ret;
        } else {
        return self.$expect_number()
      }
    }, TMP_ArithmeticEvaluator_term_10.$$arity = 0);
    
    Opal.defn(self, '$consume', TMP_ArithmeticEvaluator_consume_11 = function $$consume(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        return false};
      self.idx = $rb_plus(self.idx, 1);
      return true;
    }, TMP_ArithmeticEvaluator_consume_11.$$arity = 1);
    
    Opal.defn(self, '$expect', TMP_ArithmeticEvaluator_expect_12 = function $$expect(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        self.error = true};
      return (self.idx = $rb_plus(self.idx, 1));
    }, TMP_ArithmeticEvaluator_expect_12.$$arity = 1);
    
    Opal.defn(self, '$expect_number', TMP_ArithmeticEvaluator_expect_number_13 = function $$expect_number() {
      var self = this, ret = nil;

      
      if ($truthy(self['$integer?'](self.tokens['$[]'](self.idx)))) {
        } else {
        
        self.error = true;
        self.idx = $rb_plus(self.idx, 1);
        return 0;
      };
      ret = self.tokens['$[]'](self.idx).$to_i();
      self.idx = $rb_plus(self.idx, 1);
      return ret;
    }, TMP_ArithmeticEvaluator_expect_number_13.$$arity = 0);
    return (Opal.defn(self, '$integer?', TMP_ArithmeticEvaluator_integer$q_14 = function(str) {
      var self = this;

      return /^\d+$/.$match(str)['$nil?']()['$!']()
    }, TMP_ArithmeticEvaluator_integer$q_14.$$arity = 1), nil) && 'integer?';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["utils/modifier_formatter"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$>', '$to_s']);
  return (function($base, $parent_nesting) {
    var $ModifierFormatter, self = $ModifierFormatter = $module($base, 'ModifierFormatter');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ModifierFormatter_format_modifier_1;

    
    Opal.defn(self, '$format_modifier', TMP_ModifierFormatter_format_modifier_1 = function $$format_modifier(modifier) {
      var self = this;

      if (modifier['$=='](0)) {
        return ""
      } else if ($truthy($rb_gt(modifier, 0))) {
        return "" + "+" + (modifier)
        } else {
        return modifier.$to_s()
      }
    }, TMP_ModifierFormatter_format_modifier_1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["diceBot/SRS"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$map', '$to_proc', '$join', '$escape', '$prepare_help_msg_for_aliases_for_srs_roll', '$concatenate_help_messages', '$private', '$clear_aliases_for_srs_roll', '$extend', '$setPrefixes', '$help_message', '$class', '$freeze', '$new', '$format_modifier', '$modifier', '$target_value', '$critical_value', '$fumble_value', '$replace_alias_for_srs_roll_with_2d6', '$parse', '$execute_srs_roll', '$===', '$aliases_re_for_srs_roll_with_target_value', '$last_match', '$aliases_re_for_srs_roll_without_target_value', '$parse_srs_roll_with_target_value', '$parse_srs_roll_without_target_value', '$eval', '$to_sym', '$eval_modifier', '$[]', '$to_i', '$roll', '$&', '$+', '$compare_result', '$compact', '$>=', '$<=']);
  
  self.$require("diceBot/DiceBot");
  self.$require("utils/ArithmeticEvaluator");
  self.$require("utils/modifier_formatter");
  return (function($base, $super, $parent_nesting) {
    function $SRS(){};
    var self = $SRS = $klass($base, $super, 'SRS', $SRS);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_SRS_initialize_12, TMP_SRS_gameName_13, TMP_SRS_gameType_14, TMP_SRS_getHelpMessage_15, TMP_SRS_16, TMP_SRS_rollDiceCommand_18, TMP_SRS_replace_alias_for_srs_roll_with_2d6_19, TMP_SRS_parse_20, TMP_SRS_eval_modifier_21, TMP_SRS_parse_srs_roll_with_target_value_22, TMP_SRS_parse_srs_roll_without_target_value_23, TMP_SRS_execute_srs_roll_24, TMP_SRS_compare_result_25;

    def.fractionType = def.sortType = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'ModifierFormatter'));
    Opal.const_set($nesting[0], 'HELP_MESSAGE_1', "" + "・判定\n" + "　・通常判定：2D6+m>=t[c,f]\n" + "　　修正値m、目標値t、クリティカル値c、ファンブル値fで判定ロールを行います。\n" + "　　修正値、クリティカル値、ファンブル値は省略可能です（[]ごと省略可）。\n" + "　　クリティカル値、ファンブル値の既定値は、それぞれ12、2です。\n" + "　　自動成功、自動失敗、成功、失敗を自動表示します。\n" + "\n" + "　　例) 2d6>=10　　　　　修正値0、目標値10で判定\n" + "　　例) 2d6+2>=10　　　　修正値+2、目標値10で判定\n" + "　　例) 2d6+2>=10[11]　　↑をクリティカル値11で判定\n" + "　　例) 2d6+2>=10[12,4]　↑をクリティカル値12、ファンブル値4で判定\n");
    Opal.const_set($nesting[0], 'HELP_MESSAGE_2', "" + "　・クリティカルおよびファンブルのみの判定：2D6+m[c,f]\n" + "　　目標値を指定せず、修正値m、クリティカル値c、ファンブル値fで判定ロールを行います。\n" + "　　修正値、クリティカル値、ファンブル値は省略可能です（[]は省略不可）。\n" + "　　自動成功、自動失敗を自動表示します。\n" + "\n" + "　　例) 2d6[]　　　　修正値0、クリティカル値12、ファンブル値2で判定\n" + "　　例) 2d6+2[11]　　修正値+2、クリティカル値11、ファンブル値2で判定\n" + "　　例) 2d6+2[12,4]　修正値+2、クリティカル値12、ファンブル値4で判定\n");
    Opal.const_set($nesting[0], 'HELP_MESSAGE_3', "・D66ダイスあり（入れ替えなし)\n");
    Opal.const_set($nesting[0], 'DEFAULT_HELP_MESSAGE', "" + (Opal.const_get_relative($nesting, 'HELP_MESSAGE_1')) + "\n" + (Opal.const_get_relative($nesting, 'HELP_MESSAGE_2')) + "\n" + (Opal.const_get_relative($nesting, 'HELP_MESSAGE_3')));
    (function($base, $parent_nesting) {
      var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClassMethods_set_aliases_for_srs_roll_2, TMP_ClassMethods_clear_aliases_for_srs_roll_3, TMP_ClassMethods_prepare_help_msg_for_aliases_for_srs_roll_6, TMP_ClassMethods_concatenate_help_messages_7;

      
      self.$attr_reader("help_message");
      self.$attr_reader("aliases_re_for_srs_roll_with_target_value");
      self.$attr_reader("aliases_re_for_srs_roll_without_target_value");
      
      Opal.defn(self, '$set_aliases_for_srs_roll', TMP_ClassMethods_set_aliases_for_srs_roll_2 = function $$set_aliases_for_srs_roll($a_rest) {
        var TMP_1, self = this, aliases, aliases_upcase = nil, aliases_part = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        aliases = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          aliases[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        aliases_upcase = $send(aliases, 'map', [], "upcase".$to_proc());
        aliases_part = $send(aliases_upcase, 'map', [], (TMP_1 = function(a){var self = TMP_1.$$s || this;
if (a == null) a = nil;
        return Opal.const_get_relative($nesting, 'Regexp').$escape(a)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1)).$join("|");
        self.aliases_re_for_srs_roll_with_target_value = new RegExp("" + "^(?:" + (aliases_part) + ")((?:[-+][-+\\d]+)?>=\\d+(?:\\[\\d*(?:,\\d+)?\\])?)$");
        self.aliases_re_for_srs_roll_without_target_value = new RegExp("" + "^(?:" + (aliases_part) + ")([-+][-+\\d]+)?(\\[\\d*(?:,\\d+)?\\])?$");
        self.$prepare_help_msg_for_aliases_for_srs_roll(aliases_upcase);
        self.help_message = self.$concatenate_help_messages();
        return self;
      }, TMP_ClassMethods_set_aliases_for_srs_roll_2.$$arity = -1);
      
      Opal.defn(self, '$clear_aliases_for_srs_roll', TMP_ClassMethods_clear_aliases_for_srs_roll_3 = function $$clear_aliases_for_srs_roll() {
        var self = this;

        
        self.aliases_re_for_srs_roll_with_target_value = nil;
        self.aliases_re_for_srs_roll_without_target_value = nil;
        self.help_message = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SRS'), 'DEFAULT_HELP_MESSAGE');
        return self;
      }, TMP_ClassMethods_clear_aliases_for_srs_roll_3.$$arity = 0);
      self.$private();
      
      Opal.defn(self, '$prepare_help_msg_for_aliases_for_srs_roll', TMP_ClassMethods_prepare_help_msg_for_aliases_for_srs_roll_6 = function $$prepare_help_msg_for_aliases_for_srs_roll(aliases) {
        var TMP_4, TMP_5, self = this;

        
        self.help_msg_for_aliases_for_srs_roll_with_target_value = $send(aliases, 'map', [], (TMP_4 = function(a){var self = TMP_4.$$s || this;
if (a == null) a = nil;
        return "" + "　　例) " + (a) + "+2>=10　　　　 2d6+2>=10と同じ（" + (a) + "が2D6のショートカットコマンド）\n"}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4)).$join();
        self.help_msg_for_aliases_for_srs_roll_without_target_value = $send(aliases, 'map', [], (TMP_5 = function(a){var self = TMP_5.$$s || this;
if (a == null) a = nil;
        return "" + ("" + "　　例) " + (a) + "　　　　　 2d6[]と同じ（" + (a) + "が2D6のショートカットコマンド）\n") + ("" + "　　例) " + (a) + "+2[12,4]　 2d6+2[12,4]と同じ（" + (a) + "が2D6のショートカットコマンド）\n")}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5)).$join();
        return self;
      }, TMP_ClassMethods_prepare_help_msg_for_aliases_for_srs_roll_6.$$arity = 1);
      
      Opal.defn(self, '$concatenate_help_messages', TMP_ClassMethods_concatenate_help_messages_7 = function $$concatenate_help_messages() {
        var self = this;
        if (self.help_msg_for_aliases_for_srs_roll_with_target_value == null) self.help_msg_for_aliases_for_srs_roll_with_target_value = nil;
        if (self.help_msg_for_aliases_for_srs_roll_without_target_value == null) self.help_msg_for_aliases_for_srs_roll_without_target_value = nil;

        return "" + ("" + (Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SRS'), 'HELP_MESSAGE_1'))) + ("" + (self.help_msg_for_aliases_for_srs_roll_with_target_value) + "\n") + ("" + (Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SRS'), 'HELP_MESSAGE_2'))) + ("" + (self.help_msg_for_aliases_for_srs_roll_without_target_value) + "\n") + ("" + (Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SRS'), 'HELP_MESSAGE_3')))
      }, TMP_ClassMethods_concatenate_help_messages_7.$$arity = 0);
    })($nesting[0], $nesting);
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_inherited_8, TMP_help_message_9, TMP_aliases_re_for_srs_roll_with_target_value_10, TMP_aliases_re_for_srs_roll_without_target_value_11;

      
      
      Opal.defn(self, '$inherited', TMP_inherited_8 = function $$inherited(subclass) {
        var self = this;

        return subclass.$extend(Opal.const_get_relative($nesting, 'ClassMethods')).$clear_aliases_for_srs_roll()
      }, TMP_inherited_8.$$arity = 1);
      
      Opal.defn(self, '$help_message', TMP_help_message_9 = function $$help_message() {
        var self = this;

        return Opal.const_get_relative($nesting, 'DEFAULT_HELP_MESSAGE')
      }, TMP_help_message_9.$$arity = 0);
      
      Opal.defn(self, '$aliases_re_for_srs_roll_with_target_value', TMP_aliases_re_for_srs_roll_with_target_value_10 = function $$aliases_re_for_srs_roll_with_target_value() {
        var self = this;

        return nil
      }, TMP_aliases_re_for_srs_roll_with_target_value_10.$$arity = 0);
      return (Opal.defn(self, '$aliases_re_for_srs_roll_without_target_value', TMP_aliases_re_for_srs_roll_without_target_value_11 = function $$aliases_re_for_srs_roll_without_target_value() {
        var self = this;

        return nil
      }, TMP_aliases_re_for_srs_roll_without_target_value_11.$$arity = 0), nil) && 'aliases_re_for_srs_roll_without_target_value';
    })(Opal.get_singleton_class(self), $nesting);
    self.$setPrefixes(["2D6.*"]);
    
    Opal.defn(self, '$initialize', TMP_SRS_initialize_12 = function $$initialize() {
      var self = this, $iter = TMP_SRS_initialize_12.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_SRS_initialize_12.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_SRS_initialize_12, false), $zuper, $iter);
      self.sendMode = 2;
      self.sortType = 1;
      return (self.d66Type = 1);
    }, TMP_SRS_initialize_12.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_SRS_gameName_13 = function $$gameName() {
      var self = this;

      return "Standard RPG System"
    }, TMP_SRS_gameName_13.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_SRS_gameType_14 = function $$gameType() {
      var self = this;

      return "SRS"
    }, TMP_SRS_gameType_14.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_SRS_getHelpMessage_15 = function $$getHelpMessage() {
      var self = this;

      return self.$class().$help_message()
    }, TMP_SRS_getHelpMessage_15.$$arity = 0);
    Opal.const_set($nesting[0], 'DEFAULT_CRITICAL_VALUE', 12);
    Opal.const_set($nesting[0], 'DEFAULT_FUMBLE_VALUE', 2);
    Opal.const_set($nesting[0], 'SRS_ROLL_WITH_TARGET_VALUE_RE', /^2D6([-+][-+\d]+)?>=(\d+)(?:\[(\d+)?(?:,(\d+))?\])?$/.$freeze());
    Opal.const_set($nesting[0], 'SRS_ROLL_WITHOUT_TARGET_VALUE_RE', /^2D6([-+][-+\d]+)?\[(\d+)?(?:,(\d+))?\]$/.$freeze());
    Opal.const_set($nesting[0], 'SRS_ROLL_DEFAULT_THRESHOLDS', "" + "[" + (Opal.const_get_relative($nesting, 'DEFAULT_CRITICAL_VALUE')) + "," + (Opal.const_get_relative($nesting, 'DEFAULT_FUMBLE_VALUE')) + "]");
    Opal.const_set($nesting[0], 'SRSRollNode', $send(Opal.const_get_relative($nesting, 'Struct'), 'new', ["modifier", "critical_value", "fumble_value", "target_value"], (TMP_SRS_16 = function(){var self = TMP_SRS_16.$$s || this, TMP_to_s_17;

    
      self.$include(Opal.const_get_relative($nesting, 'ModifierFormatter'));
      return (Opal.def(self, '$to_s', TMP_to_s_17 = function $$to_s() {
        var self = this, lhs = nil, expression = nil;

        
        lhs = "" + "2D6" + (self.$format_modifier(self.$modifier()));
        expression = (function() {if ($truthy(self.$target_value())) {
          return "" + (lhs) + ">=" + (self.$target_value())
          } else {
          return lhs
        }; return nil; })();
        return "" + (expression) + "[" + (self.$critical_value()) + "," + (self.$fumble_value()) + "]";
      }, TMP_to_s_17.$$arity = 0), nil) && 'to_s';}, TMP_SRS_16.$$s = self, TMP_SRS_16.$$arity = 0, TMP_SRS_16)));
    
    Opal.defn(self, '$rollDiceCommand', TMP_SRS_rollDiceCommand_18 = function $$rollDiceCommand(command) {
      var self = this, alias_replaced_with_2d6 = nil, node = nil;

      
      alias_replaced_with_2d6 = self.$replace_alias_for_srs_roll_with_2d6(command);
      if ($truthy((node = self.$parse(alias_replaced_with_2d6)))) {
        return self.$execute_srs_roll(node)};
      return nil;
    }, TMP_SRS_rollDiceCommand_18.$$arity = 1);
    self.$private();
    
    Opal.defn(self, '$replace_alias_for_srs_roll_with_2d6', TMP_SRS_replace_alias_for_srs_roll_with_2d6_19 = function $$replace_alias_for_srs_roll_with_2d6(input) {
      var $a, self = this, $case = nil, modifier = nil, thresholds = nil;

      return (function() {$case = input;
      if (self.$class().$aliases_re_for_srs_roll_with_target_value()['$===']($case)) {return "" + "2D6" + (Opal.const_get_relative($nesting, 'Regexp').$last_match(1))}
      else if (self.$class().$aliases_re_for_srs_roll_without_target_value()['$===']($case)) {
      modifier = Opal.const_get_relative($nesting, 'Regexp').$last_match(1);
      thresholds = ($truthy($a = Opal.const_get_relative($nesting, 'Regexp').$last_match(2)) ? $a : Opal.const_get_relative($nesting, 'SRS_ROLL_DEFAULT_THRESHOLDS'));
      return "" + "2D6" + (modifier) + (thresholds);}
      else {return input}})()
    }, TMP_SRS_replace_alias_for_srs_roll_with_2d6_19.$$arity = 1);
    
    Opal.defn(self, '$parse', TMP_SRS_parse_20 = function $$parse(command) {
      var self = this, $case = nil;

      return (function() {$case = command;
      if (Opal.const_get_relative($nesting, 'SRS_ROLL_WITH_TARGET_VALUE_RE')['$===']($case)) {return self.$parse_srs_roll_with_target_value(Opal.const_get_relative($nesting, 'Regexp').$last_match())}
      else if (Opal.const_get_relative($nesting, 'SRS_ROLL_WITHOUT_TARGET_VALUE_RE')['$===']($case)) {return self.$parse_srs_roll_without_target_value(Opal.const_get_relative($nesting, 'Regexp').$last_match())}
      else {return nil}})()
    }, TMP_SRS_parse_20.$$arity = 1);
    
    Opal.defn(self, '$eval_modifier', TMP_SRS_eval_modifier_21 = function $$eval_modifier(modifier_str) {
      var self = this;

      
      if ($truthy(modifier_str)) {
        } else {
        return 0
      };
      return Opal.const_get_relative($nesting, 'ArithmeticEvaluator').$new().$eval(modifier_str, self.fractionType.$to_sym());
    }, TMP_SRS_eval_modifier_21.$$arity = 1);
    
    Opal.defn(self, '$parse_srs_roll_with_target_value', TMP_SRS_parse_srs_roll_with_target_value_22 = function $$parse_srs_roll_with_target_value(m) {
      var $a, $b, self = this, modifier = nil, target_value = nil, critical_value = nil, fumble_value = nil;

      
      modifier = self.$eval_modifier(m['$[]'](1));
      target_value = m['$[]'](2).$to_i();
      critical_value = ($truthy($a = ($truthy($b = m['$[]'](3)) ? m['$[]'](3).$to_i() : $b)) ? $a : Opal.const_get_relative($nesting, 'DEFAULT_CRITICAL_VALUE'));
      fumble_value = ($truthy($a = ($truthy($b = m['$[]'](4)) ? m['$[]'](4).$to_i() : $b)) ? $a : Opal.const_get_relative($nesting, 'DEFAULT_FUMBLE_VALUE'));
      return Opal.const_get_relative($nesting, 'SRSRollNode').$new(modifier, critical_value, fumble_value, target_value);
    }, TMP_SRS_parse_srs_roll_with_target_value_22.$$arity = 1);
    
    Opal.defn(self, '$parse_srs_roll_without_target_value', TMP_SRS_parse_srs_roll_without_target_value_23 = function $$parse_srs_roll_without_target_value(m) {
      var $a, $b, self = this, modifier = nil, critical_value = nil, fumble_value = nil;

      
      modifier = self.$eval_modifier(m['$[]'](1));
      critical_value = ($truthy($a = ($truthy($b = m['$[]'](2)) ? m['$[]'](2).$to_i() : $b)) ? $a : Opal.const_get_relative($nesting, 'DEFAULT_CRITICAL_VALUE'));
      fumble_value = ($truthy($a = ($truthy($b = m['$[]'](3)) ? m['$[]'](3).$to_i() : $b)) ? $a : Opal.const_get_relative($nesting, 'DEFAULT_FUMBLE_VALUE'));
      return Opal.const_get_relative($nesting, 'SRSRollNode').$new(modifier, critical_value, fumble_value, nil);
    }, TMP_SRS_parse_srs_roll_without_target_value_23.$$arity = 1);
    
    Opal.defn(self, '$execute_srs_roll', TMP_SRS_execute_srs_roll_24 = function $$execute_srs_roll(srs_roll) {
      var $a, $b, self = this, sum = nil, dice_str = nil, modified_sum = nil, parts = nil;

      
      $b = self.$roll(2, 6, self.sortType['$&'](1)), $a = Opal.to_ary($b), (sum = ($a[0] == null ? nil : $a[0])), (dice_str = ($a[1] == null ? nil : $a[1])), $b;
      modified_sum = $rb_plus(sum, srs_roll.$modifier());
      parts = ["" + "(" + (srs_roll) + ")", "" + (sum) + "[" + (dice_str) + "]" + (self.$format_modifier(srs_roll.$modifier())), modified_sum, self.$compare_result(srs_roll, sum, modified_sum)];
      return parts.$compact().$join(" ＞ ");
    }, TMP_SRS_execute_srs_roll_24.$$arity = 1);
    return (Opal.defn(self, '$compare_result', TMP_SRS_compare_result_25 = function $$compare_result(srs_roll, sum, modified_sum) {
      var self = this;

      
      if ($truthy($rb_ge(sum, srs_roll.$critical_value()))) {
        return "自動成功"};
      if ($truthy($rb_le(sum, srs_roll.$fumble_value()))) {
        return "自動失敗"};
      if ($truthy(srs_roll.$target_value())) {
        return (function() {if ($truthy($rb_ge(modified_sum, srs_roll.$target_value()))) {
          return "成功"
          } else {
          return "失敗"
        }; return nil; })()};
      return nil;
    }, TMP_SRS_compare_result_25.$$arity = 3), nil) && 'compare_result';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting);
};

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$setPrefixes', '$set_aliases_for_srs_roll']);
  
  self.$require("diceBot/SRS");
  return (function($base, $super, $parent_nesting) {
    function $EtrianOdysseySRS(){};
    var self = $EtrianOdysseySRS = $klass($base, $super, 'EtrianOdysseySRS', $EtrianOdysseySRS);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_EtrianOdysseySRS_gameName_1, TMP_EtrianOdysseySRS_gameType_2;

    
    self.$setPrefixes(["2D6.*", "EO.*", "SQ.*"]);
    self.$set_aliases_for_srs_roll("EO", "SQ");
    
    Opal.defn(self, '$gameName', TMP_EtrianOdysseySRS_gameName_1 = function $$gameName() {
      var self = this;

      return "世界樹の迷宮SRS"
    }, TMP_EtrianOdysseySRS_gameName_1.$$arity = 0);
    return (Opal.defn(self, '$gameType', TMP_EtrianOdysseySRS_gameType_2 = function $$gameType() {
      var self = this;

      return "EtrianOdysseySRS"
    }, TMP_EtrianOdysseySRS_gameType_2.$$arity = 0), nil) && 'gameType';
  })($nesting[0], Opal.const_get_relative($nesting, 'SRS'), $nesting);
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
=======
/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$freeze', '$attr_reader', '$map', '$to_proc', '$join', '$private', '$clearPrefixes', '$!', '$empty?', '$prefixs', '$prefixes', '$class', '$warn', '$id', '$setPrefixes', '$attr_accessor', '$name', '$sort_key', '$help_message', '$attr_writer', '$rand', '$roll', '$marshalSignOfInequality', '$unlimitedRollDiceType', '$getD66Value', '$parren_killer', '$debug', '$isGetOriginalMessage', '$getOriginalMessage', '$=~', '$prefixesPattern', '$last_match', '$removeDiceCommandMessage', '$rollDiceCommandCatched', '$nil?', '$!=', '$sub', '$rollDiceCommand', '$to_s', '$backtrace', '$size', '$===', '$check_1D100', '$check_1D20', '$check_2D6', '$check_nD10', '$check_nD6', '$check_nDx', '$is_a?', '$==', '$send', '$get_table_by_nD6', '$get_table_by_nDx', '$getTableValue', '$[]', '$-', '$/', '$getD66', '$bcdice', '$get_table_by_number', '$+', '$*', '$<', '$each', '$>=', '$kind_of?', '$lambda', '$call', '$select', '$public_methods', '$upcase', '$to_i', '$getTableInfoFromExtraTableText', '$get_table_by_nDx_extratable', '$get_table_by_d66', '$floor', '$%', '$get_table_by_d66_swap', '$raise', '$gsub', '$rollTableMessageDiceText', '$split', '$inspect']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'DiceBot');

    var $nesting = [self].concat($parent_nesting), $DiceBot_initialize$4, $DiceBot_postSet$5, $DiceBot_info$6, $DiceBot_id$7, $DiceBot_gameType$8, $DiceBot_name$9, $DiceBot_gameName$10, $DiceBot_sort_key$11, $DiceBot_help_message$12, $DiceBot_getHelpMessage$13, $DiceBot_prefixes$14, $DiceBot_setSendMode$15, $DiceBot_bcdice$eq$16, $DiceBot_bcdice$17, $DiceBot_rand$18, $DiceBot_roll$19, $DiceBot_marshalSignOfInequality$20, $DiceBot_unlimitedRollDiceType$21, $DiceBot_setSortType$22, $DiceBot_d66$23, $DiceBot_parren_killer$24, $DiceBot_changeText$25, $DiceBot_dice_command$26, $DiceBot_isGetOriginalMessage$27, $DiceBot_removeDiceCommandMessage$28, $DiceBot_rollDiceCommandCatched$29, $DiceBot_rollDiceCommand$30, $DiceBot_dice_command_xRn$31, $DiceBot_check_result$32, $DiceBot_check_nDx$33, $DiceBot_check_1D100$34, $DiceBot_check_1D20$35, $DiceBot_check_nD10$36, $DiceBot_check_2D6$37, $DiceBot_check_nD6$38, $DiceBot_get_table_by_2d6$39, $DiceBot_get_table_by_1d6$40, $DiceBot_get_table_by_nD6$41, $DiceBot_get_table_by_nDx$42, $DiceBot_get_table_by_1d3$43, $DiceBot_getD66$44, $DiceBot_get_table_by_d66_swap$45, $DiceBot_get_table_by_d66$46, $DiceBot_getDiceRolledAdditionalText$47, $DiceBot_getDiceRevision$48, $DiceBot_isD9$49, $DiceBot_getGrichText$50, $DiceBot_check2dCritical$51, $DiceBot_is2dCritical$52, $DiceBot_should_reroll$ques$53, $DiceBot_get_table_by_number$54, $DiceBot_getTableValue$56, $DiceBot_analyzeDiceCommandResultMethod$58, $DiceBot_get_table_by_nDx_extratable$61, $DiceBot_getTableCommandResult$62, $DiceBot_getTableInfoFromExtraTableText$63, $DiceBot_roll_tables$65;

    self.$$prototype.rerollLimitCount = self.$$prototype.d66Type = nil;
    
    Opal.const_set($nesting[0], 'EMPTY_PREFIXES_PATTERN', /(^|\s)(S)?()(\s|$)/i.$freeze());
    Opal.const_set($nesting[0], 'ID', "DiceBot");
    Opal.const_set($nesting[0], 'NAME', "DiceBot");
    Opal.const_set($nesting[0], 'SORT_KEY', "*\u305F\u3044\u3059\u307B\u3064\u3068");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "");
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $setPrefixes$1, $clearPrefixes$2, $inherited$3;

      
      self.$attr_reader("prefixes");
      self.$attr_reader("prefixesPattern");
      
      Opal.def(self, '$setPrefixes', $setPrefixes$1 = function $$setPrefixes(prefixes) {
        var self = this;

        
        self.prefixes = $send(prefixes, 'map', [], "freeze".$to_proc()).$freeze();
        self.prefixesPattern = new RegExp("" + "(^|\\s)(S)?(" + (prefixes.$join("|")) + ")(\\s|$)", 'i').$freeze();
        return self;
      }, $setPrefixes$1.$$arity = 1);
      
      Opal.def(self, '$clearPrefixes', $clearPrefixes$2 = function $$clearPrefixes() {
        var self = this;

        
        self.prefixes = [].$freeze();
        self.prefixesPattern = $$($nesting, 'EMPTY_PREFIXES_PATTERN');
        return self;
      }, $clearPrefixes$2.$$arity = 0);
      self.$private();
      return (Opal.def(self, '$inherited', $inherited$3 = function $$inherited(subclass) {
        var self = this;

        return subclass.$clearPrefixes()
      }, $inherited$3.$$arity = 1), nil) && 'inherited';
    })(Opal.get_singleton_class(self), $nesting);
    self.$clearPrefixes();
    (Opal.class_variable_set($nesting[0], '@@bcdice', nil));
    Opal.const_set($nesting[0], 'DEFAULT_SEND_MODE', 2);
    
    Opal.def(self, '$initialize', $DiceBot_initialize$4 = function $$initialize() {
      var $a, self = this;

      
      self.sendMode = $$($nesting, 'DEFAULT_SEND_MODE');
      self.sortType = 0;
      self.sameDiceRerollCount = 0;
      self.sameDiceRerollType = 0;
      self.d66Type = 1;
      self.isPrintMaxDice = false;
      self.upplerRollThreshold = 0;
      self.unlimitedRollDiceType = 0;
      self.rerollNumber = 0;
      self.defaultSuccessTarget = "";
      self.rerollLimitCount = 10000;
      self.fractionType = "omit";
      if ($truthy(($truthy($a = self.$prefixs()['$empty?']()['$!']()) ? self.$class().$prefixes()['$empty?']() : $a))) {
        
        self.$warn("" + (self.$id()) + ": #prefixs is deprecated. Please use .setPrefixes.");
        return self.$class().$setPrefixes(self.$prefixs());
      } else {
        return nil
      };
    }, $DiceBot_initialize$4.$$arity = 0);
    self.$attr_accessor("rerollLimitCount");
    self.$attr_reader("sendMode", "sameDiceRerollCount", "sameDiceRerollType", "d66Type");
    self.$attr_reader("isPrintMaxDice", "upplerRollThreshold");
    self.$attr_reader("defaultSuccessTarget", "rerollNumber", "fractionType");
    
    Opal.def(self, '$postSet', $DiceBot_postSet$5 = function $$postSet() {
      var self = this;

      return nil
    }, $DiceBot_postSet$5.$$arity = 0);
    
    Opal.def(self, '$info', $DiceBot_info$6 = function $$info() {
      var self = this;

      return $hash2(["gameType", "name", "sortKey", "prefixs", "info"], {"gameType": self.$id(), "name": self.$name(), "sortKey": self.$sort_key(), "prefixs": self.$class().$prefixes(), "info": self.$help_message()})
    }, $DiceBot_info$6.$$arity = 0);
    
    Opal.def(self, '$id', $DiceBot_id$7 = function $$id() {
      var self = this;

      return $$$(self.$class(), 'ID')
    }, $DiceBot_id$7.$$arity = 0);
    
    Opal.def(self, '$gameType', $DiceBot_gameType$8 = function $$gameType() {
      var self = this;

      
      self.$warn("" + (self.$id()) + ": #gameType is deprecated. Please use #id.");
      return self.$id();
    }, $DiceBot_gameType$8.$$arity = 0);
    
    Opal.def(self, '$name', $DiceBot_name$9 = function $$name() {
      var self = this;

      return $$$(self.$class(), 'NAME')
    }, $DiceBot_name$9.$$arity = 0);
    
    Opal.def(self, '$gameName', $DiceBot_gameName$10 = function $$gameName() {
      var self = this;

      
      self.$warn("" + (self.$id()) + ": #gameName is deprecated. Please use #name.");
      return self.$name();
    }, $DiceBot_gameName$10.$$arity = 0);
    
    Opal.def(self, '$sort_key', $DiceBot_sort_key$11 = function $$sort_key() {
      var self = this;

      return $$$(self.$class(), 'SORT_KEY')
    }, $DiceBot_sort_key$11.$$arity = 0);
    
    Opal.def(self, '$help_message', $DiceBot_help_message$12 = function $$help_message() {
      var self = this;

      return $$$(self.$class(), 'HELP_MESSAGE')
    }, $DiceBot_help_message$12.$$arity = 0);
    
    Opal.def(self, '$getHelpMessage', $DiceBot_getHelpMessage$13 = function $$getHelpMessage() {
      var self = this;

      
      self.$warn("" + (self.$id()) + ": #getHelpMessage is deprecated. Please use #help_message.");
      return self.$help_message();
    }, $DiceBot_getHelpMessage$13.$$arity = 0);
    
    Opal.def(self, '$prefixes', $DiceBot_prefixes$14 = function $$prefixes() {
      var self = this;

      return self.$class().$prefixes()
    }, $DiceBot_prefixes$14.$$arity = 0);
    Opal.alias(self, "prefixs", "prefixes");
    
    Opal.def(self, '$setSendMode', $DiceBot_setSendMode$15 = function $$setSendMode(m) {
      var self = this;

      return (self.sendMode = m)
    }, $DiceBot_setSendMode$15.$$arity = 1);
    self.$attr_writer("upplerRollThreshold");
    
    Opal.def(self, '$bcdice=', $DiceBot_bcdice$eq$16 = function(b) {
      var self = this;

      return (Opal.class_variable_set($nesting[0], '@@bcdice', b))
    }, $DiceBot_bcdice$eq$16.$$arity = 1);
    
    Opal.def(self, '$bcdice', $DiceBot_bcdice$17 = function $$bcdice() {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a)
    }, $DiceBot_bcdice$17.$$arity = 0);
    
    Opal.def(self, '$rand', $DiceBot_rand$18 = function $$rand(max) {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$rand(max)
    }, $DiceBot_rand$18.$$arity = 1);
    
    Opal.def(self, '$roll', $DiceBot_roll$19 = function $$roll($a) {
      var $post_args, args, $b, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send((($b = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $b), 'roll', Opal.to_a(args));
    }, $DiceBot_roll$19.$$arity = -1);
    
    Opal.def(self, '$marshalSignOfInequality', $DiceBot_marshalSignOfInequality$20 = function $$marshalSignOfInequality($a) {
      var $post_args, args, $b, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send((($b = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $b), 'marshalSignOfInequality', Opal.to_a(args));
    }, $DiceBot_marshalSignOfInequality$20.$$arity = -1);
    
    Opal.def(self, '$unlimitedRollDiceType', $DiceBot_unlimitedRollDiceType$21 = function $$unlimitedRollDiceType() {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$unlimitedRollDiceType()
    }, $DiceBot_unlimitedRollDiceType$21.$$arity = 0);
    self.$attr_reader("sortType");
    
    Opal.def(self, '$setSortType', $DiceBot_setSortType$22 = function $$setSortType(s) {
      var self = this;

      return (self.sortType = s)
    }, $DiceBot_setSortType$22.$$arity = 1);
    
    Opal.def(self, '$d66', $DiceBot_d66$23 = function $$d66($a) {
      var $post_args, args, $b, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send((($b = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $b), 'getD66Value', Opal.to_a(args));
    }, $DiceBot_d66$23.$$arity = -1);
    
    Opal.def(self, '$parren_killer', $DiceBot_parren_killer$24 = function $$parren_killer(string) {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$parren_killer(string)
    }, $DiceBot_parren_killer$24.$$arity = 1);
    
    Opal.def(self, '$changeText', $DiceBot_changeText$25 = function $$changeText(string) {
      var self = this;

      
      self.$debug("DiceBot.parren_killer_add called");
      return string;
    }, $DiceBot_changeText$25.$$arity = 1);
    
    Opal.def(self, '$dice_command', $DiceBot_dice_command$26 = function $$dice_command(string, nick_e) {
      var $a, $b, self = this, secret_flg = nil, secretMarker = nil, command = nil, output_msg = nil;

      
      if ($truthy(self.$isGetOriginalMessage())) {
        string = (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$getOriginalMessage()};
      self.$debug("dice_command Begin string", string);
      secret_flg = false;
      if ($truthy(self.$class().$prefixesPattern()['$=~'](string))) {
      } else {
        
        self.$debug("not match in prefixes");
        return ["1", secret_flg];
      };
      secretMarker = $$($nesting, 'Regexp').$last_match(2);
      command = $$($nesting, 'Regexp').$last_match(3);
      command = self.$removeDiceCommandMessage(command);
      self.$debug("dicebot after command", command);
      self.$debug("match");
      $b = self.$rollDiceCommandCatched(command), $a = Opal.to_ary($b), (output_msg = ($a[0] == null ? nil : $a[0])), (secret_flg = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(($truthy($a = output_msg['$nil?']()) ? $a : output_msg['$empty?']()))) {
        output_msg = "1"};
      secret_flg = ($truthy($a = secret_flg) ? $a : false);
      if ($truthy(output_msg['$!=']("1"))) {
        output_msg = "" + (nick_e) + ": " + (output_msg)};
      if ($truthy(secretMarker)) {
        if ($truthy(output_msg['$!=']("1"))) {
          secret_flg = true}};
      return [output_msg, secret_flg];
    }, $DiceBot_dice_command$26.$$arity = 2);
    
    Opal.def(self, '$isGetOriginalMessage', $DiceBot_isGetOriginalMessage$27 = function $$isGetOriginalMessage() {
      var self = this;

      return false
    }, $DiceBot_isGetOriginalMessage$27.$$arity = 0);
    
    Opal.def(self, '$removeDiceCommandMessage', $DiceBot_removeDiceCommandMessage$28 = function $$removeDiceCommandMessage(command) {
      var self = this;

      return command.$sub(/[\s\u3000].+/, "")
    }, $DiceBot_removeDiceCommandMessage$28.$$arity = 1);
    
    Opal.def(self, '$rollDiceCommandCatched', $DiceBot_rollDiceCommandCatched$29 = function $$rollDiceCommandCatched(command) {
      var $a, $b, self = this, result = nil, secret_flg = nil, e = nil;

      
      result = nil;
      
      try {
        
        self.$debug("call rollDiceCommand command", command);
        $b = self.$rollDiceCommand(command), $a = Opal.to_ary($b), (result = ($a[0] == null ? nil : $a[0])), (secret_flg = ($a[1] == null ? nil : $a[1])), $b;
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {e = $err;
          try {
            self.$debug("executeCommand exception", e.$to_s(), e.$backtrace().$join("\n"))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      self.$debug("rollDiceCommand result", result);
      return [result, secret_flg];
    }, $DiceBot_rollDiceCommandCatched$29.$$arity = 1);
    
    Opal.def(self, '$rollDiceCommand', $DiceBot_rollDiceCommand$30 = function $$rollDiceCommand(_command) {
      var self = this;

      return nil
    }, $DiceBot_rollDiceCommand$30.$$arity = 1);
    
    Opal.def(self, '$dice_command_xRn', $DiceBot_dice_command_xRn$31 = function $$dice_command_xRn(_string, _nick_e) {
      var self = this;

      return ""
    }, $DiceBot_dice_command_xRn$31.$$arity = 2);
    
    Opal.def(self, '$check_result', $DiceBot_check_result$32 = function $$check_result(total, dice_total, dice_list, sides, cmp_op, target) {
      var $a, self = this, ret = nil, $case = nil;

      
      ret = (function() {$case = [dice_list.$size(), sides];
      if ([1, 100]['$===']($case)) {return self.$check_1D100(total, dice_total, cmp_op, target)}
      else if ([1, 20]['$===']($case)) {return self.$check_1D20(total, dice_total, cmp_op, target)}
      else if ([2, 6]['$===']($case)) {return self.$check_2D6(total, dice_total, dice_list, cmp_op, target)}
      else { return nil }})();
      if ($truthy(($truthy($a = ret['$nil?']()) ? $a : ret['$empty?']()))) {
      } else {
        return ret
      };
      ret = (function() {$case = sides;
      if ((10)['$===']($case)) {return self.$check_nD10(total, dice_total, dice_list, cmp_op, target)}
      else if ((6)['$===']($case)) {return self.$check_nD6(total, dice_total, dice_list, cmp_op, target)}
      else { return nil }})();
      if ($truthy(($truthy($a = ret['$nil?']()) ? $a : ret['$empty?']()))) {
      } else {
        return ret
      };
      return self.$check_nDx(total, cmp_op, target);
    }, $DiceBot_check_result$32.$$arity = 6);
    
    Opal.def(self, '$check_nDx', $DiceBot_check_nDx$33 = function $$check_nDx(total, cmp_op, target) {
      var self = this, success = nil;

      
      if ($truthy(target['$is_a?']($$($nesting, 'String')))) {
        return " \uFF1E \u5931\u6557"};
      success = (function() {if (cmp_op['$==']("!=")) {
        return total['$!='](target)
      } else {
        return total.$send(cmp_op, target)
      }; return nil; })();
      if ($truthy(success)) {
        return " \uFF1E \u6210\u529F"
      } else {
        return " \uFF1E \u5931\u6557"
      };
    }, $DiceBot_check_nDx$33.$$arity = 3);
    
    Opal.def(self, '$check_1D100', $DiceBot_check_1D100$34 = function $$check_1D100(total, dice_total, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_1D100$34.$$arity = 4);
    
    Opal.def(self, '$check_1D20', $DiceBot_check_1D20$35 = function $$check_1D20(total, dice_total, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_1D20$35.$$arity = 4);
    
    Opal.def(self, '$check_nD10', $DiceBot_check_nD10$36 = function $$check_nD10(total, dice_total, dice_list, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_nD10$36.$$arity = 5);
    
    Opal.def(self, '$check_2D6', $DiceBot_check_2D6$37 = function $$check_2D6(total, dice_total, dice_list, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_2D6$37.$$arity = 5);
    
    Opal.def(self, '$check_nD6', $DiceBot_check_nD6$38 = function $$check_nD6(total, dice_total, dice_list, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_nD6$38.$$arity = 5);
    
    Opal.def(self, '$get_table_by_2d6', $DiceBot_get_table_by_2d6$39 = function $$get_table_by_2d6(table) {
      var self = this;

      return self.$get_table_by_nD6(table, 2)
    }, $DiceBot_get_table_by_2d6$39.$$arity = 1);
    
    Opal.def(self, '$get_table_by_1d6', $DiceBot_get_table_by_1d6$40 = function $$get_table_by_1d6(table) {
      var self = this;

      return self.$get_table_by_nD6(table, 1)
    }, $DiceBot_get_table_by_1d6$40.$$arity = 1);
    
    Opal.def(self, '$get_table_by_nD6', $DiceBot_get_table_by_nD6$41 = function $$get_table_by_nD6(table, count) {
      var self = this;

      return self.$get_table_by_nDx(table, count, 6)
    }, $DiceBot_get_table_by_nD6$41.$$arity = 2);
    
    Opal.def(self, '$get_table_by_nDx', $DiceBot_get_table_by_nDx$42 = function $$get_table_by_nDx(table, count, diceType) {
      var $a, $b, self = this, num = nil, text = nil;

      
      $b = self.$roll(count, diceType), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), $b;
      text = self.$getTableValue(table['$[]']($rb_minus(num, count)));
      if ($truthy(text['$nil?']())) {
        return ["1", 0]};
      return [text, num];
    }, $DiceBot_get_table_by_nDx$42.$$arity = 3);
    
    Opal.def(self, '$get_table_by_1d3', $DiceBot_get_table_by_1d3$43 = function $$get_table_by_1d3(table) {
      var $a, $b, self = this, count = nil, num = nil, index = nil, text = nil;

      
      self.$debug("get_table_by_1d3");
      count = 1;
      $b = self.$roll(count, 6), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), $b;
      self.$debug("num", num);
      index = $rb_divide($rb_minus(num, 1), 2);
      self.$debug("index", index);
      text = table['$[]'](index);
      if ($truthy(text['$nil?']())) {
        return ["1", 0]};
      return [text, num];
    }, $DiceBot_get_table_by_1d3$43.$$arity = 1);
    
    Opal.def(self, '$getD66', $DiceBot_getD66$44 = function $$getD66(isSwap) {
      var self = this;

      return self.$bcdice().$getD66(isSwap)
    }, $DiceBot_getD66$44.$$arity = 1);
    
    Opal.def(self, '$get_table_by_d66_swap', $DiceBot_get_table_by_d66_swap$45 = function $$get_table_by_d66_swap(table) {
      var self = this, isSwap = nil, number = nil;

      
      isSwap = true;
      number = self.$bcdice().$getD66(isSwap);
      return [self.$get_table_by_number(number, table), number];
    }, $DiceBot_get_table_by_d66_swap$45.$$arity = 1);
    
    Opal.def(self, '$get_table_by_d66', $DiceBot_get_table_by_d66$46 = function $$get_table_by_d66(table) {
      var $a, $b, self = this, dice1 = nil, dice2 = nil, num = nil, text = nil, indexText = nil;

      
      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice1 = ($a[0] == null ? nil : $a[0])), $b;
      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice2 = ($a[0] == null ? nil : $a[0])), $b;
      num = $rb_plus($rb_times($rb_minus(dice1, 1), 6), $rb_minus(dice2, 1));
      text = table['$[]'](num);
      indexText = "" + (dice1) + (dice2);
      if ($truthy(text['$nil?']())) {
        return ["1", indexText]};
      return [text, indexText];
    }, $DiceBot_get_table_by_d66$46.$$arity = 1);
    
    Opal.def(self, '$getDiceRolledAdditionalText', $DiceBot_getDiceRolledAdditionalText$47 = function $$getDiceRolledAdditionalText(_n1, _n_max, _dice_max) {
      var self = this;

      return ""
    }, $DiceBot_getDiceRolledAdditionalText$47.$$arity = 3);
    
    Opal.def(self, '$getDiceRevision', $DiceBot_getDiceRevision$48 = function $$getDiceRevision(_n_max, _dice_max, _total_n) {
      var self = this;

      return ["", 0]
    }, $DiceBot_getDiceRevision$48.$$arity = 3);
    
    Opal.def(self, '$isD9', $DiceBot_isD9$49 = function $$isD9() {
      var self = this;

      return false
    }, $DiceBot_isD9$49.$$arity = 0);
    
    Opal.def(self, '$getGrichText', $DiceBot_getGrichText$50 = function $$getGrichText(_numberSpot1, _dice_cnt_total, _suc) {
      var self = this;

      return ""
    }, $DiceBot_getGrichText$50.$$arity = 3);
    
    Opal.def(self, '$check2dCritical', $DiceBot_check2dCritical$51 = function $$check2dCritical(critical, dice_new, dice_arry, loop_count) {
      var self = this;

      return nil
    }, $DiceBot_check2dCritical$51.$$arity = 4);
    
    Opal.def(self, '$is2dCritical', $DiceBot_is2dCritical$52 = function $$is2dCritical() {
      var self = this;

      return false
    }, $DiceBot_is2dCritical$52.$$arity = 0);
    
    Opal.def(self, '$should_reroll?', $DiceBot_should_reroll$ques$53 = function(loop_count) {
      var $a, self = this;

      return ($truthy($a = $rb_lt(loop_count, self.rerollLimitCount)) ? $a : self.rerollLimitCount['$=='](0))
    }, $DiceBot_should_reroll$ques$53.$$arity = 1);
    
    Opal.def(self, '$get_table_by_number', $DiceBot_get_table_by_number$54 = function $$get_table_by_number(index, table, default$) {try {

      var $$55, self = this;

      
      
      if (default$ == null) {
        default$ = "1";
      };
      $send(table, 'each', [], ($$55 = function(item){var self = $$55.$$s || this, number = nil;

      
        
        if (item == null) {
          item = nil;
        };
        number = item['$[]'](0);
        if ($truthy($rb_ge(number, index))) {
          Opal.ret(self.$getTableValue(item['$[]'](1)))
        } else {
          return nil
        };}, $$55.$$s = self, $$55.$$arity = 1, $$55));
      return self.$getTableValue(default$);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $DiceBot_get_table_by_number$54.$$arity = -3);
    
    Opal.def(self, '$getTableValue', $DiceBot_getTableValue$56 = function $$getTableValue(data) {try {

      var $$57, self = this, lambdaBlock = nil;

      
      if ($truthy(data['$kind_of?']($$($nesting, 'Proc')))) {
        
        lambdaBlock = $send(self, 'lambda', [], ($$57 = function(){var self = $$57.$$s || this;

        Opal.ret(data.$call())}, $$57.$$s = self, $$57.$$arity = 0, $$57));
        return lambdaBlock.$call();};
      return data;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $DiceBot_getTableValue$56.$$arity = 1);
    
    Opal.def(self, '$analyzeDiceCommandResultMethod', $DiceBot_analyzeDiceCommandResultMethod$58 = function $$analyzeDiceCommandResultMethod(command) {try {

      var $$59, $$60, self = this, methodList = nil;

      
      methodList = $send(self.$public_methods(), 'select', [], ($$59 = function(method){var self = $$59.$$s || this;

      
        
        if (method == null) {
          method = nil;
        };
        return /^get.+DiceCommandResult$/['$==='](method.$to_s());}, $$59.$$s = self, $$59.$$arity = 1, $$59));
      $send(methodList, 'each', [], ($$60 = function(method){var self = $$60.$$s || this, result = nil;

      
        
        if (method == null) {
          method = nil;
        };
        result = self.$send(method, command);
        if ($truthy(result['$nil?']())) {
          return nil
        } else {
          Opal.ret(result)
        };}, $$60.$$s = self, $$60.$$arity = 1, $$60));
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $DiceBot_analyzeDiceCommandResultMethod$58.$$arity = 1);
    
    Opal.def(self, '$get_table_by_nDx_extratable', $DiceBot_get_table_by_nDx_extratable$61 = function $$get_table_by_nDx_extratable(table, count, diceType) {
      var $a, $b, self = this, number = nil, diceText = nil, text = nil;

      
      $b = self.$roll(count, diceType), $a = Opal.to_ary($b), (number = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      text = self.$getTableValue(table['$[]']($rb_minus(number, count)));
      return [text, number, diceText];
    }, $DiceBot_get_table_by_nDx_extratable$61.$$arity = 3);
    
    Opal.def(self, '$getTableCommandResult', $DiceBot_getTableCommandResult$62 = function $$getTableCommandResult(command, tables, isPrintDiceText) {
      var $a, $b, $c, $d, self = this, info = nil, name = nil, type = nil, table = nil, $case = nil, count = nil, diceType = nil, limit = nil, item = nil, value = nil, output = nil, diceText = nil, text = nil, number = nil;

      
      
      if (isPrintDiceText == null) {
        isPrintDiceText = true;
      };
      info = tables['$[]'](command.$upcase());
      if ($truthy(info['$nil?']())) {
        return nil};
      name = info['$[]']("name");
      type = info['$[]']("type").$upcase();
      table = info['$[]']("table");
      if ($truthy(($truthy($a = type['$==']("D66")) ? self.d66Type['$=='](2) : $a))) {
        type = "D66S"};
      $b = (function() {$case = type;
      if (/(\d+)D(\d+)/['$===']($case)) {
      count = $$($nesting, 'Regexp').$last_match(1).$to_i();
      diceType = $$($nesting, 'Regexp').$last_match(2).$to_i();
      limit = $rb_minus($rb_times(diceType, count), $rb_minus(count, 1));
      table = self.$getTableInfoFromExtraTableText(table, limit);
      return self.$get_table_by_nDx_extratable(table, count, diceType);}
      else if ("D66"['$===']($case) || "D66N"['$===']($case)) {
      table = self.$getTableInfoFromExtraTableText(table, 36);
      $d = self.$get_table_by_d66(table), $c = Opal.to_ary($d), (item = ($c[0] == null ? nil : $c[0])), (value = ($c[1] == null ? nil : $c[1])), $d;
      value = value.$to_i();
      output = item['$[]'](1);
      diceText = $rb_plus($rb_plus($rb_divide(value, 10).$floor().$to_s(), ","), value['$%'](10).$to_s());
      return [output, value, diceText];}
      else if ("D66S"['$===']($case)) {
      table = self.$getTableInfoFromExtraTableText(table, 21);
      $d = self.$get_table_by_d66_swap(table), $c = Opal.to_ary($d), (output = ($c[0] == null ? nil : $c[0])), (value = ($c[1] == null ? nil : $c[1])), $d;
      value = value.$to_i();
      diceText = $rb_plus($rb_plus($rb_divide(value, 10).$floor().$to_s(), ","), value['$%'](10).$to_s());
      return [output, value, diceText];}
      else {return self.$raise("" + "invalid dice Type " + (command))}})(), $a = Opal.to_ary($b), (text = ($a[0] == null ? nil : $a[0])), (number = ($a[1] == null ? nil : $a[1])), (diceText = ($a[2] == null ? nil : $a[2])), $b;
      text = text.$gsub("\\n", "\n");
      text = (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$rollTableMessageDiceText(text);
      if ($truthy(text['$nil?']())) {
        return nil};
      if ($truthy(($truthy($a = isPrintDiceText) ? diceText['$nil?']()['$!']() : $a))) {
        return "" + (name) + "(" + (number) + "[" + (diceText) + "]) \uFF1E " + (text)};
      return "" + (name) + "(" + (number) + ") \uFF1E " + (text);
    }, $DiceBot_getTableCommandResult$62.$$arity = -3);
    
    Opal.def(self, '$getTableInfoFromExtraTableText', $DiceBot_getTableInfoFromExtraTableText$63 = function $$getTableInfoFromExtraTableText(text, count) {
      var $$64, self = this, newTable = nil;

      
      
      if (count == null) {
        count = nil;
      };
      if ($truthy(text['$is_a?']($$($nesting, 'String')))) {
        text = text.$split(/\n/)};
      newTable = $send(text, 'map', [], ($$64 = function(item){var self = $$64.$$s || this, $a;

      
        
        if (item == null) {
          item = nil;
        };
        if ($truthy(($truthy($a = item['$is_a?']($$($nesting, 'String'))) ? /^(\d+):(.*)/['$==='](item) : $a))) {
          return [$$($nesting, 'Regexp').$last_match(1).$to_i(), $$($nesting, 'Regexp').$last_match(2)]
        } else {
          return item
        };}, $$64.$$s = self, $$64.$$arity = 1, $$64));
      if ($truthy(count['$nil?']())) {
      } else if ($truthy(newTable.$size()['$!='](count))) {
        self.$raise("" + "invalid table size:" + (newTable.$size()) + "\n" + (newTable.$inspect()))};
      return newTable;
    }, $DiceBot_getTableInfoFromExtraTableText$63.$$arity = -2);
    return (Opal.def(self, '$roll_tables', $DiceBot_roll_tables$65 = function $$roll_tables(command, tables) {
      var self = this, table = nil;

      
      table = tables['$[]'](command.$upcase());
      if ($truthy(table)) {
      } else {
        return nil
      };
      return table.$roll(self.$bcdice()).$to_s();
    }, $DiceBot_roll_tables$65.$$arity = 2), nil) && 'roll_tables';
  })($nesting[0], null, $nesting)
})(Opal);
Opal.loaded(["diceBot/DiceBot.js"]);
/* Generated by Opal 1.0.3 */
Opal.modules["utils/ArithmeticEvaluator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$tokenize', '$expr', '$private', '$split', '$gsub', '$mul', '$loop', '$consume', '$+', '$-', '$unary', '$*', '$div', '$zero?', '$===', '$ceil', '$/', '$to_f', '$round', '$floor', '$-@', '$term', '$expect', '$expect_number', '$!=', '$[]', '$integer?', '$to_i', '$!', '$nil?', '$match']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ArithmeticEvaluator');

    var $nesting = [self].concat($parent_nesting), $ArithmeticEvaluator_eval$1, $ArithmeticEvaluator_tokenize$2, $ArithmeticEvaluator_add$4, $ArithmeticEvaluator_mul$6, $ArithmeticEvaluator_div$8, $ArithmeticEvaluator_unary$9, $ArithmeticEvaluator_term$10, $ArithmeticEvaluator_consume$11, $ArithmeticEvaluator_expect$12, $ArithmeticEvaluator_expect_number$13, $ArithmeticEvaluator_integer$ques$14;

    self.$$prototype.error = self.$$prototype.round_type = self.$$prototype.tokens = self.$$prototype.idx = nil;
    
    
    Opal.def(self, '$eval', $ArithmeticEvaluator_eval$1 = function(expr, round_type) {
      var self = this, ret = nil;

      
      
      if (round_type == null) {
        round_type = "omit";
      };
      self.tokens = self.$tokenize(expr);
      self.idx = 0;
      self.error = false;
      self.round_type = round_type;
      ret = self.$expr();
      if ($truthy(self.error)) {
        return 0
      } else {
        return ret
      };
    }, $ArithmeticEvaluator_eval$1.$$arity = -2);
    self.$private();
    
    Opal.def(self, '$tokenize', $ArithmeticEvaluator_tokenize$2 = function $$tokenize(expr) {
      var $$3, self = this;

      return $send(expr, 'gsub', [/[\(\)\+\-\*\/]/], ($$3 = function(e){var self = $$3.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return "" + " " + (e) + " ";}, $$3.$$s = self, $$3.$$arity = 1, $$3)).$split(" ")
    }, $ArithmeticEvaluator_tokenize$2.$$arity = 1);
    
    Opal.def(self, '$add', $ArithmeticEvaluator_add$4 = function $$add() {
      var $$5, self = this, ret = nil;

      
      ret = self.$mul();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$5 = function(){var self = $$5.$$s || this;

      if ($truthy(self.$consume("+"))) {
          return (ret = $rb_plus(ret, self.$mul()))
        } else if ($truthy(self.$consume("-"))) {
          return (ret = $rb_minus(ret, self.$mul()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$5.$$s = self, $$5.$$brk = $brk, $$5.$$arity = 0, $$5))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_add$4.$$arity = 0);
    Opal.alias(self, "expr", "add");
    
    Opal.def(self, '$mul', $ArithmeticEvaluator_mul$6 = function $$mul() {
      var $$7, self = this, ret = nil;

      
      ret = self.$unary();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$7 = function(){var self = $$7.$$s || this;

      if ($truthy(self.$consume("*"))) {
          return (ret = $rb_times(ret, self.$unary()))
        } else if ($truthy(self.$consume("/"))) {
          return (ret = self.$div(ret, self.$unary()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$7.$$s = self, $$7.$$brk = $brk, $$7.$$arity = 0, $$7))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_mul$6.$$arity = 0);
    
    Opal.def(self, '$div', $ArithmeticEvaluator_div$8 = function $$div(left, right) {
      var self = this, $case = nil;

      
      if ($truthy(right['$zero?']())) {
        
        self.error = true;
        return 0;};
      return (function() {$case = self.round_type;
      if ("roundUp"['$===']($case)) {return $rb_divide(left.$to_f(), right).$ceil()}
      else if ("roundOff"['$===']($case)) {return $rb_divide(left.$to_f(), right).$round()}
      else {return $rb_divide(left, right).$floor()}})();
    }, $ArithmeticEvaluator_div$8.$$arity = 2);
    
    Opal.def(self, '$unary', $ArithmeticEvaluator_unary$9 = function $$unary() {
      var self = this;

      if ($truthy(self.$consume("+"))) {
        return self.$unary()
      } else if ($truthy(self.$consume("-"))) {
        return self.$unary()['$-@']()
      } else {
        return self.$term()
      }
    }, $ArithmeticEvaluator_unary$9.$$arity = 0);
    
    Opal.def(self, '$term', $ArithmeticEvaluator_term$10 = function $$term() {
      var self = this, ret = nil;

      if ($truthy(self.$consume("("))) {
        
        ret = self.$expr();
        self.$expect(")");
        return ret;
      } else {
        return self.$expect_number()
      }
    }, $ArithmeticEvaluator_term$10.$$arity = 0);
    
    Opal.def(self, '$consume', $ArithmeticEvaluator_consume$11 = function $$consume(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        return false};
      self.idx = $rb_plus(self.idx, 1);
      return true;
    }, $ArithmeticEvaluator_consume$11.$$arity = 1);
    
    Opal.def(self, '$expect', $ArithmeticEvaluator_expect$12 = function $$expect(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        self.error = true};
      return (self.idx = $rb_plus(self.idx, 1));
    }, $ArithmeticEvaluator_expect$12.$$arity = 1);
    
    Opal.def(self, '$expect_number', $ArithmeticEvaluator_expect_number$13 = function $$expect_number() {
      var self = this, ret = nil;

      
      if ($truthy(self['$integer?'](self.tokens['$[]'](self.idx)))) {
      } else {
        
        self.error = true;
        self.idx = $rb_plus(self.idx, 1);
        return 0;
      };
      ret = self.tokens['$[]'](self.idx).$to_i();
      self.idx = $rb_plus(self.idx, 1);
      return ret;
    }, $ArithmeticEvaluator_expect_number$13.$$arity = 0);
    return (Opal.def(self, '$integer?', $ArithmeticEvaluator_integer$ques$14 = function(str) {
      var self = this;

      return /^\d+$/.$match(str)['$nil?']()['$!']()
    }, $ArithmeticEvaluator_integer$ques$14.$$arity = 1), nil) && 'integer?';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/modifier_formatter"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$>', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ModifierFormatter');

    var $nesting = [self].concat($parent_nesting), $ModifierFormatter_format_modifier$1;

    
    Opal.def(self, '$format_modifier', $ModifierFormatter_format_modifier$1 = function $$format_modifier(modifier) {
      var self = this;

      if (modifier['$=='](0)) {
        return ""
      } else if ($truthy($rb_gt(modifier, 0))) {
        return "" + "+" + (modifier)
      } else {
        return modifier.$to_s()
      }
    }, $ModifierFormatter_format_modifier$1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$map', '$to_proc', '$join', '$escape', '$prepare_help_msg_for_aliases_for_srs_roll', '$concatenate_help_messages', '$private', '$clear_aliases_for_srs_roll', '$extend', '$setPrefixes', '$help_message', '$class', '$freeze', '$new', '$format_modifier', '$modifier', '$target_value', '$critical_value', '$fumble_value', '$replace_alias_for_srs_roll_with_2d6', '$parse', '$execute_srs_roll', '$===', '$aliases_re_for_srs_roll_with_target_value', '$last_match', '$aliases_re_for_srs_roll_without_target_value', '$parse_srs_roll_with_target_value', '$parse_srs_roll_without_target_value', '$eval', '$to_sym', '$eval_modifier', '$[]', '$to_i', '$roll', '$&', '$+', '$compare_result', '$compact', '$>=', '$<=']);
  
  self.$require("diceBot/DiceBot");
  self.$require("utils/ArithmeticEvaluator");
  self.$require("utils/modifier_formatter");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SRS');

    var $nesting = [self].concat($parent_nesting), $SRS_initialize$12, $SRS_help_message$13, $SRS$14, $SRS_rollDiceCommand$16, $SRS_replace_alias_for_srs_roll_with_2d6$17, $SRS_parse$18, $SRS_eval_modifier$19, $SRS_parse_srs_roll_with_target_value$20, $SRS_parse_srs_roll_without_target_value$21, $SRS_execute_srs_roll$22, $SRS_compare_result$23;

    self.$$prototype.fractionType = self.$$prototype.sortType = nil;
    
    Opal.const_set($nesting[0], 'ID', "SRS");
    Opal.const_set($nesting[0], 'NAME', "Standard RPG System");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u3059\u305F\u3093\u305F\u3042\u3068RPG\u3057\u3059\u3066\u3080");
    self.$include($$($nesting, 'ModifierFormatter'));
    Opal.const_set($nesting[0], 'HELP_MESSAGE_1', "" + "\u30FB\u5224\u5B9A\n" + "\u3000\u30FB\u901A\u5E38\u5224\u5B9A\uFF1A2D6+m>=t[c,f]\n" + "\u3000\u3000\u4FEE\u6B63\u5024m\u3001\u76EE\u6A19\u5024t\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024c\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u5024f\u3067\u5224\u5B9A\u30ED\u30FC\u30EB\u3092\u884C\u3044\u307E\u3059\u3002\n" + "\u3000\u3000\u4FEE\u6B63\u5024\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u5024\u306F\u7701\u7565\u53EF\u80FD\u3067\u3059\uFF08[]\u3054\u3068\u7701\u7565\u53EF\uFF09\u3002\n" + "\u3000\u3000\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u5024\u306E\u65E2\u5B9A\u5024\u306F\u3001\u305D\u308C\u305E\u308C12\u30012\u3067\u3059\u3002\n" + "\u3000\u3000\u81EA\u52D5\u6210\u529F\u3001\u81EA\u52D5\u5931\u6557\u3001\u6210\u529F\u3001\u5931\u6557\u3092\u81EA\u52D5\u8868\u793A\u3057\u307E\u3059\u3002\n" + "\n" + "\u3000\u3000\u4F8B) 2d6>=10\u3000\u3000\u3000\u3000\u3000\u4FEE\u6B63\u50240\u3001\u76EE\u6A19\u502410\u3067\u5224\u5B9A\n" + "\u3000\u3000\u4F8B) 2d6+2>=10\u3000\u3000\u3000\u3000\u4FEE\u6B63\u5024+2\u3001\u76EE\u6A19\u502410\u3067\u5224\u5B9A\n" + "\u3000\u3000\u4F8B) 2d6+2>=10[11]\u3000\u3000\u2191\u3092\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u502411\u3067\u5224\u5B9A\n" + "\u3000\u3000\u4F8B) 2d6+2>=10[12,4]\u3000\u2191\u3092\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u502412\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u50244\u3067\u5224\u5B9A\n");
    Opal.const_set($nesting[0], 'HELP_MESSAGE_2', "" + "\u3000\u30FB\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u304A\u3088\u3073\u30D5\u30A1\u30F3\u30D6\u30EB\u306E\u307F\u306E\u5224\u5B9A\uFF1A2D6+m[c,f]\n" + "\u3000\u3000\u76EE\u6A19\u5024\u3092\u6307\u5B9A\u305B\u305A\u3001\u4FEE\u6B63\u5024m\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024c\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u5024f\u3067\u5224\u5B9A\u30ED\u30FC\u30EB\u3092\u884C\u3044\u307E\u3059\u3002\n" + "\u3000\u3000\u4FEE\u6B63\u5024\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u5024\u306F\u7701\u7565\u53EF\u80FD\u3067\u3059\uFF08[]\u306F\u7701\u7565\u4E0D\u53EF\uFF09\u3002\n" + "\u3000\u3000\u81EA\u52D5\u6210\u529F\u3001\u81EA\u52D5\u5931\u6557\u3092\u81EA\u52D5\u8868\u793A\u3057\u307E\u3059\u3002\n" + "\n" + "\u3000\u3000\u4F8B) 2d6[]\u3000\u3000\u3000\u3000\u4FEE\u6B63\u50240\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u502412\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u50242\u3067\u5224\u5B9A\n" + "\u3000\u3000\u4F8B) 2d6+2[11]\u3000\u3000\u4FEE\u6B63\u5024+2\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u502411\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u50242\u3067\u5224\u5B9A\n" + "\u3000\u3000\u4F8B) 2d6+2[12,4]\u3000\u4FEE\u6B63\u5024+2\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u502412\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u50244\u3067\u5224\u5B9A\n");
    Opal.const_set($nesting[0], 'HELP_MESSAGE_3', "\u30FBD66\u30C0\u30A4\u30B9\u3042\u308A\uFF08\u5165\u308C\u66FF\u3048\u306A\u3057)\n");
    Opal.const_set($nesting[0], 'DEFAULT_HELP_MESSAGE', "" + ($$($nesting, 'HELP_MESSAGE_1')) + "\n" + ($$($nesting, 'HELP_MESSAGE_2')) + "\n" + ($$($nesting, 'HELP_MESSAGE_3')));
    (function($base, $parent_nesting) {
      var self = $module($base, 'ClassMethods');

      var $nesting = [self].concat($parent_nesting), $ClassMethods_set_aliases_for_srs_roll$1, $ClassMethods_clear_aliases_for_srs_roll$3, $ClassMethods_prepare_help_msg_for_aliases_for_srs_roll$4, $ClassMethods_concatenate_help_messages$7;

      
      self.$attr_reader("help_message");
      self.$attr_reader("aliases_re_for_srs_roll_with_target_value");
      self.$attr_reader("aliases_re_for_srs_roll_without_target_value");
      
      Opal.def(self, '$set_aliases_for_srs_roll', $ClassMethods_set_aliases_for_srs_roll$1 = function $$set_aliases_for_srs_roll($a) {
        var $post_args, aliases, $$2, self = this, aliases_upcase = nil, aliases_part = nil;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        aliases = $post_args;;
        aliases_upcase = $send(aliases, 'map', [], "upcase".$to_proc());
        aliases_part = $send(aliases_upcase, 'map', [], ($$2 = function(a){var self = $$2.$$s || this;

        
          
          if (a == null) {
            a = nil;
          };
          return $$($nesting, 'Regexp').$escape(a);}, $$2.$$s = self, $$2.$$arity = 1, $$2)).$join("|");
        self.aliases_re_for_srs_roll_with_target_value = new RegExp("" + "^(?:" + (aliases_part) + ")((?:[-+][-+\\d]+)?>=\\d+(?:\\[\\d*(?:,\\d+)?\\])?)$");
        self.aliases_re_for_srs_roll_without_target_value = new RegExp("" + "^(?:" + (aliases_part) + ")([-+][-+\\d]+)?(\\[\\d*(?:,\\d+)?\\])?$");
        self.$prepare_help_msg_for_aliases_for_srs_roll(aliases_upcase);
        self.help_message = self.$concatenate_help_messages();
        return self;
      }, $ClassMethods_set_aliases_for_srs_roll$1.$$arity = -1);
      
      Opal.def(self, '$clear_aliases_for_srs_roll', $ClassMethods_clear_aliases_for_srs_roll$3 = function $$clear_aliases_for_srs_roll() {
        var self = this;

        
        self.aliases_re_for_srs_roll_with_target_value = nil;
        self.aliases_re_for_srs_roll_without_target_value = nil;
        self.help_message = $$$($$($nesting, 'SRS'), 'DEFAULT_HELP_MESSAGE');
        return self;
      }, $ClassMethods_clear_aliases_for_srs_roll$3.$$arity = 0);
      self.$private();
      
      Opal.def(self, '$prepare_help_msg_for_aliases_for_srs_roll', $ClassMethods_prepare_help_msg_for_aliases_for_srs_roll$4 = function $$prepare_help_msg_for_aliases_for_srs_roll(aliases) {
        var $$5, $$6, self = this;

        
        self.help_msg_for_aliases_for_srs_roll_with_target_value = $send(aliases, 'map', [], ($$5 = function(a){var self = $$5.$$s || this;

        
          
          if (a == null) {
            a = nil;
          };
          return "" + "\u3000\u3000\u4F8B) " + (a) + "+2>=10\u3000\u3000\u3000\u3000 2d6+2>=10\u3068\u540C\u3058\uFF08" + (a) + "\u304C2D6\u306E\u30B7\u30E7\u30FC\u30C8\u30AB\u30C3\u30C8\u30B3\u30DE\u30F3\u30C9\uFF09\n";}, $$5.$$s = self, $$5.$$arity = 1, $$5)).$join();
        self.help_msg_for_aliases_for_srs_roll_without_target_value = $send(aliases, 'map', [], ($$6 = function(a){var self = $$6.$$s || this;

        
          
          if (a == null) {
            a = nil;
          };
          return "" + ("" + "\u3000\u3000\u4F8B) " + (a) + "\u3000\u3000\u3000\u3000\u3000 2d6[]\u3068\u540C\u3058\uFF08" + (a) + "\u304C2D6\u306E\u30B7\u30E7\u30FC\u30C8\u30AB\u30C3\u30C8\u30B3\u30DE\u30F3\u30C9\uFF09\n") + ("" + "\u3000\u3000\u4F8B) " + (a) + "+2[12,4]\u3000 2d6+2[12,4]\u3068\u540C\u3058\uFF08" + (a) + "\u304C2D6\u306E\u30B7\u30E7\u30FC\u30C8\u30AB\u30C3\u30C8\u30B3\u30DE\u30F3\u30C9\uFF09\n");}, $$6.$$s = self, $$6.$$arity = 1, $$6)).$join();
        return self;
      }, $ClassMethods_prepare_help_msg_for_aliases_for_srs_roll$4.$$arity = 1);
      
      Opal.def(self, '$concatenate_help_messages', $ClassMethods_concatenate_help_messages$7 = function $$concatenate_help_messages() {
        var self = this;
        if (self.help_msg_for_aliases_for_srs_roll_with_target_value == null) self.help_msg_for_aliases_for_srs_roll_with_target_value = nil;
        if (self.help_msg_for_aliases_for_srs_roll_without_target_value == null) self.help_msg_for_aliases_for_srs_roll_without_target_value = nil;

        return "" + ("" + ($$$($$($nesting, 'SRS'), 'HELP_MESSAGE_1'))) + ("" + (self.help_msg_for_aliases_for_srs_roll_with_target_value) + "\n") + ("" + ($$$($$($nesting, 'SRS'), 'HELP_MESSAGE_2'))) + ("" + (self.help_msg_for_aliases_for_srs_roll_without_target_value) + "\n") + ("" + ($$$($$($nesting, 'SRS'), 'HELP_MESSAGE_3')))
      }, $ClassMethods_concatenate_help_messages$7.$$arity = 0);
    })($nesting[0], $nesting);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $inherited$8, $help_message$9, $aliases_re_for_srs_roll_with_target_value$10, $aliases_re_for_srs_roll_without_target_value$11;

      
      
      Opal.def(self, '$inherited', $inherited$8 = function $$inherited(subclass) {
        var self = this;

        return subclass.$extend($$($nesting, 'ClassMethods')).$clear_aliases_for_srs_roll()
      }, $inherited$8.$$arity = 1);
      
      Opal.def(self, '$help_message', $help_message$9 = function $$help_message() {
        var self = this;

        return $$($nesting, 'DEFAULT_HELP_MESSAGE')
      }, $help_message$9.$$arity = 0);
      
      Opal.def(self, '$aliases_re_for_srs_roll_with_target_value', $aliases_re_for_srs_roll_with_target_value$10 = function $$aliases_re_for_srs_roll_with_target_value() {
        var self = this;

        return nil
      }, $aliases_re_for_srs_roll_with_target_value$10.$$arity = 0);
      return (Opal.def(self, '$aliases_re_for_srs_roll_without_target_value', $aliases_re_for_srs_roll_without_target_value$11 = function $$aliases_re_for_srs_roll_without_target_value() {
        var self = this;

        return nil
      }, $aliases_re_for_srs_roll_without_target_value$11.$$arity = 0), nil) && 'aliases_re_for_srs_roll_without_target_value';
    })(Opal.get_singleton_class(self), $nesting);
    self.$setPrefixes(["2D6.*"]);
    
    Opal.def(self, '$initialize', $SRS_initialize$12 = function $$initialize() {
      var $iter = $SRS_initialize$12.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $SRS_initialize$12.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $SRS_initialize$12, false), $zuper, $iter);
      self.sendMode = 2;
      self.sortType = 1;
      return (self.d66Type = 1);
    }, $SRS_initialize$12.$$arity = 0);
    
    Opal.def(self, '$help_message', $SRS_help_message$13 = function $$help_message() {
      var self = this;

      return self.$class().$help_message()
    }, $SRS_help_message$13.$$arity = 0);
    Opal.const_set($nesting[0], 'DEFAULT_CRITICAL_VALUE', 12);
    Opal.const_set($nesting[0], 'DEFAULT_FUMBLE_VALUE', 2);
    Opal.const_set($nesting[0], 'SRS_ROLL_WITH_TARGET_VALUE_RE', /^2D6([-+][-+\d]+)?>=(\d+)(?:\[(\d+)?(?:,(\d+))?\])?$/.$freeze());
    Opal.const_set($nesting[0], 'SRS_ROLL_WITHOUT_TARGET_VALUE_RE', /^2D6([-+][-+\d]+)?\[(\d+)?(?:,(\d+))?\]$/.$freeze());
    Opal.const_set($nesting[0], 'SRS_ROLL_DEFAULT_THRESHOLDS', "" + "[" + ($$($nesting, 'DEFAULT_CRITICAL_VALUE')) + "," + ($$($nesting, 'DEFAULT_FUMBLE_VALUE')) + "]");
    Opal.const_set($nesting[0], 'SRSRollNode', $send($$($nesting, 'Struct'), 'new', ["modifier", "critical_value", "fumble_value", "target_value"], ($SRS$14 = function(){var self = $SRS$14.$$s || this, $to_s$15;

    
      self.$include($$($nesting, 'ModifierFormatter'));
      return (Opal.def(self, '$to_s', $to_s$15 = function $$to_s() {
        var self = this, lhs = nil, expression = nil;

        
        lhs = "" + "2D6" + (self.$format_modifier(self.$modifier()));
        expression = (function() {if ($truthy(self.$target_value())) {
          return "" + (lhs) + ">=" + (self.$target_value())
        } else {
          return lhs
        }; return nil; })();
        return "" + (expression) + "[" + (self.$critical_value()) + "," + (self.$fumble_value()) + "]";
      }, $to_s$15.$$arity = 0), nil) && 'to_s';}, $SRS$14.$$s = self, $SRS$14.$$arity = 0, $SRS$14)));
    
    Opal.def(self, '$rollDiceCommand', $SRS_rollDiceCommand$16 = function $$rollDiceCommand(command) {
      var self = this, alias_replaced_with_2d6 = nil, node = nil;

      
      alias_replaced_with_2d6 = self.$replace_alias_for_srs_roll_with_2d6(command);
      if ($truthy((node = self.$parse(alias_replaced_with_2d6)))) {
        return self.$execute_srs_roll(node)};
      return nil;
    }, $SRS_rollDiceCommand$16.$$arity = 1);
    self.$private();
    
    Opal.def(self, '$replace_alias_for_srs_roll_with_2d6', $SRS_replace_alias_for_srs_roll_with_2d6$17 = function $$replace_alias_for_srs_roll_with_2d6(input) {
      var $a, self = this, $case = nil, modifier = nil, thresholds = nil;

      return (function() {$case = input;
      if (self.$class().$aliases_re_for_srs_roll_with_target_value()['$===']($case)) {return "" + "2D6" + ($$($nesting, 'Regexp').$last_match(1))}
      else if (self.$class().$aliases_re_for_srs_roll_without_target_value()['$===']($case)) {
      modifier = $$($nesting, 'Regexp').$last_match(1);
      thresholds = ($truthy($a = $$($nesting, 'Regexp').$last_match(2)) ? $a : $$($nesting, 'SRS_ROLL_DEFAULT_THRESHOLDS'));
      return "" + "2D6" + (modifier) + (thresholds);}
      else {return input}})()
    }, $SRS_replace_alias_for_srs_roll_with_2d6$17.$$arity = 1);
    
    Opal.def(self, '$parse', $SRS_parse$18 = function $$parse(command) {
      var self = this, $case = nil;

      return (function() {$case = command;
      if ($$($nesting, 'SRS_ROLL_WITH_TARGET_VALUE_RE')['$===']($case)) {return self.$parse_srs_roll_with_target_value($$($nesting, 'Regexp').$last_match())}
      else if ($$($nesting, 'SRS_ROLL_WITHOUT_TARGET_VALUE_RE')['$===']($case)) {return self.$parse_srs_roll_without_target_value($$($nesting, 'Regexp').$last_match())}
      else {return nil}})()
    }, $SRS_parse$18.$$arity = 1);
    
    Opal.def(self, '$eval_modifier', $SRS_eval_modifier$19 = function $$eval_modifier(modifier_str) {
      var self = this;

      
      if ($truthy(modifier_str)) {
      } else {
        return 0
      };
      return $$($nesting, 'ArithmeticEvaluator').$new().$eval(modifier_str, self.fractionType.$to_sym());
    }, $SRS_eval_modifier$19.$$arity = 1);
    
    Opal.def(self, '$parse_srs_roll_with_target_value', $SRS_parse_srs_roll_with_target_value$20 = function $$parse_srs_roll_with_target_value(m) {
      var $a, $b, self = this, modifier = nil, target_value = nil, critical_value = nil, fumble_value = nil;

      
      modifier = self.$eval_modifier(m['$[]'](1));
      target_value = m['$[]'](2).$to_i();
      critical_value = ($truthy($a = ($truthy($b = m['$[]'](3)) ? m['$[]'](3).$to_i() : $b)) ? $a : $$($nesting, 'DEFAULT_CRITICAL_VALUE'));
      fumble_value = ($truthy($a = ($truthy($b = m['$[]'](4)) ? m['$[]'](4).$to_i() : $b)) ? $a : $$($nesting, 'DEFAULT_FUMBLE_VALUE'));
      return $$($nesting, 'SRSRollNode').$new(modifier, critical_value, fumble_value, target_value);
    }, $SRS_parse_srs_roll_with_target_value$20.$$arity = 1);
    
    Opal.def(self, '$parse_srs_roll_without_target_value', $SRS_parse_srs_roll_without_target_value$21 = function $$parse_srs_roll_without_target_value(m) {
      var $a, $b, self = this, modifier = nil, critical_value = nil, fumble_value = nil;

      
      modifier = self.$eval_modifier(m['$[]'](1));
      critical_value = ($truthy($a = ($truthy($b = m['$[]'](2)) ? m['$[]'](2).$to_i() : $b)) ? $a : $$($nesting, 'DEFAULT_CRITICAL_VALUE'));
      fumble_value = ($truthy($a = ($truthy($b = m['$[]'](3)) ? m['$[]'](3).$to_i() : $b)) ? $a : $$($nesting, 'DEFAULT_FUMBLE_VALUE'));
      return $$($nesting, 'SRSRollNode').$new(modifier, critical_value, fumble_value, nil);
    }, $SRS_parse_srs_roll_without_target_value$21.$$arity = 1);
    
    Opal.def(self, '$execute_srs_roll', $SRS_execute_srs_roll$22 = function $$execute_srs_roll(srs_roll) {
      var $a, $b, self = this, sum = nil, dice_str = nil, modified_sum = nil, parts = nil;

      
      $b = self.$roll(2, 6, self.sortType['$&'](1)), $a = Opal.to_ary($b), (sum = ($a[0] == null ? nil : $a[0])), (dice_str = ($a[1] == null ? nil : $a[1])), $b;
      modified_sum = $rb_plus(sum, srs_roll.$modifier());
      parts = ["" + "(" + (srs_roll) + ")", "" + (sum) + "[" + (dice_str) + "]" + (self.$format_modifier(srs_roll.$modifier())), modified_sum, self.$compare_result(srs_roll, sum, modified_sum)];
      return parts.$compact().$join(" \uFF1E ");
    }, $SRS_execute_srs_roll$22.$$arity = 1);
    return (Opal.def(self, '$compare_result', $SRS_compare_result$23 = function $$compare_result(srs_roll, sum, modified_sum) {
      var self = this;

      
      if ($truthy($rb_ge(sum, srs_roll.$critical_value()))) {
        return "\u81EA\u52D5\u6210\u529F"};
      if ($truthy($rb_le(sum, srs_roll.$fumble_value()))) {
        return "\u81EA\u52D5\u5931\u6557"};
      if ($truthy(srs_roll.$target_value())) {
        return (function() {if ($truthy($rb_ge(modified_sum, srs_roll.$target_value()))) {
          return "\u6210\u529F"
        } else {
          return "\u5931\u6557"
        }; return nil; })()};
      return nil;
    }, $SRS_compare_result$23.$$arity = 3), nil) && 'compare_result';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting);
})(Opal);
Opal.loaded(["diceBot/SRS.js"]);
/* Generated by Opal 1.0.3 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$setPrefixes', '$set_aliases_for_srs_roll']);
  
  self.$require("diceBot/SRS");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'EtrianOdysseySRS');

    var $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'ID', "EtrianOdysseySRS");
    Opal.const_set($nesting[0], 'NAME', "\u4E16\u754C\u6A39\u306E\u8FF7\u5BAESRS");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u305B\u304B\u3044\u3057\u3086\u306E\u3081\u3044\u304D\u3086\u3046SRS");
    self.$setPrefixes(["2D6.*", "EO.*", "SQ.*"]);
    return self.$set_aliases_for_srs_roll("EO", "SQ");
  })($nesting[0], $$($nesting, 'SRS'), $nesting);
})(Opal);
>>>>>>> 0dfe93a1d368ac1ad3ef24167156b31a70848848
