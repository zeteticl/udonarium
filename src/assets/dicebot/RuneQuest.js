/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$round', '$/', '$to_f', '$<=', '$>=', '$+']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RuneQuest');

    var $nesting = [self].concat($parent_nesting), $RuneQuest_check_1D100$1;

    
    Opal.const_set($nesting[0], 'ID', "RuneQuest");
    Opal.const_set($nesting[0], 'NAME', "\u30EB\u30FC\u30F3\u30AF\u30A8\u30B9\u30C8");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u308B\u3046\u3093\u304F\u3048\u3059\u3068");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u3001\u30A8\u30D5\u30A7\u30AF\u30C6\u30A3\u30D6(\u52B9\u679C\u7684\u6210\u529F)\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u306E\u81EA\u52D5\u5224\u5B9A\u3092\u884C\u3044\u307E\u3059\u3002\n");
    return (Opal.def(self, '$check_1D100', $RuneQuest_check_1D100$1 = function $$check_1D100(total, _dice_total, cmp_op, target) {
      var $a, self = this, critical_value = nil;

      
      if (cmp_op['$==']("<=")) {
      } else {
        return nil
      };
      critical_value = $rb_divide(target.$to_f(), 20).$round();
      if ($truthy(($truthy($a = $rb_le(total, 1)) ? $a : $rb_le(total, critical_value)))) {
        return " \uFF1E \u6C7A\u5B9A\u7684\u6210\u529F"
      } else if ($truthy($rb_ge(total, 100))) {
        return " \uFF1E \u81F4\u547D\u7684\u5931\u6557"
      } else if ($truthy($rb_le(total, $rb_divide(target.$to_f(), 5).$round()))) {
        return " \uFF1E \u52B9\u679C\u7684\u6210\u529F"
      } else if ($truthy($rb_le(total, target))) {
        return " \uFF1E \u6210\u529F"
      } else if ($truthy($rb_ge(total, $rb_plus(95, critical_value)))) {
        return " \uFF1E \u81F4\u547D\u7684\u5931\u6557"
      } else {
        return " \uFF1E \u5931\u6557"
      };
    }, $RuneQuest_check_1D100$1.$$arity = 4), nil) && 'check_1D100';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
