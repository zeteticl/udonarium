/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$gsub', '$last_match', '$bbt_check', '$debug', '$match', '$[]', '$to_i', '$nil?', '$parren_killer', '$+', '$<=', '$each', '$scan', '$min', '$split', '$<', '$size', '$push', '$-', '$>', '$roll', '$&', '$sortType', '$collect', '$empty?', '$sort!', '$dup', '$max', '$[]=', '$!=', '$join', '$==', '$>=', '$to_s', '$sendMode', '$=~', '$comparison_operator', '$check_result', '$===', '$bbt_emotion_table', '$bbt_exposure_table', '$bbt_face_table', '$get_table_by_d66', '$get_table_by_1d6']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'BeastBindTrinity');

    var $nesting = [self].concat($parent_nesting), $BeastBindTrinity_initialize$1, $BeastBindTrinity_changeText$2, $BeastBindTrinity_dice_command_xRn$12, $BeastBindTrinity_bbt_check$13, $BeastBindTrinity_rollDiceCommand$19, $BeastBindTrinity_bbt_emotion_table$20, $BeastBindTrinity_bbt_exposure_table$21, $BeastBindTrinity_bbt_face_table$22;

    self.$$prototype.nick_e = nil;
    
    Opal.const_set($nesting[0], 'ID', "BeastBindTrinity");
    Opal.const_set($nesting[0], 'NAME', "\u30D3\u30FC\u30B9\u30C8\u30D0\u30A4\u30F3\u30C9 \u30C8\u30EA\u30CB\u30C6\u30A3");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u3072\u3044\u3059\u3068\u306F\u3044\u3093\u3068\u3068\u308A\u306B\u3066\u3044");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u30FB\u5224\u5B9A\u3000(nBB+m%w@x#y$z&v)\n" + "\u3000n\u500B\u306ED6\u3092\u632F\u308A\u3001\u51FA\u76EE\u306E\u5927\u304D\u30442\u500B\u304B\u3089\u9054\u6210\u5024\u3092\u7B97\u51FA\u3002\u4FEE\u6B63m\u3082\u53EF\u80FD\u3002\n" + "\n" + "\u3000%w\u3001@x\u3001#y\u3001$z\u3001&v\u306F\u3059\u3079\u3066\u7701\u7565\u53EF\u80FD\u3002\n" + "\uFF1E%w\uFF1A\u73FE\u5728\u306E\u4EBA\u9593\u6027\u304C w \u3067\u3042\u308B\u3068\u3057\u3066\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024(C\u5024)\u3092\u8A08\u7B97\u3002\n" + "\u30FB\u7701\u7565\u3057\u305F\u5834\u5408\u3001C\u5024=12\u3068\u3057\u3066\u9054\u6210\u5024\u3092\u7B97\u51FA\u3059\u308B\u3002\n" + "\uFF1E@x\uFF1A\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u4FEE\u6B63\u3002\uFF08\u52A0\u6E1B\u5F0F\u3067\u3082\u5165\u529B\u53EF\u80FD\uFF09\n" + "\u30FBx\u306B\u76F4\u63A5\u6570\u5B57\u3092\u66F8\u304F\u3068\u3001C\u5024\u3092\u305D\u306E\u6570\u5B57\u306B\u4E0A\u66F8\u304D\u3059\u308B\u3002\n" + "\u3000\u300C\u7D76\u5BFE\u306B\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u3057\u306A\u3044\u300D\u72B6\u614B\u306F\u3001@13\u306A\u3069 x\u309213\u4EE5\u4E0A\u306B\u6307\u5B9A\u3059\u308B\u3053\u3068\u3002\n" + "\u30FBx\u306E\u5148\u982D\u304C\u300C+\u300D\u304B\u300C-\u300D\u306A\u3089\u3001\u8A08\u7B97\u3057\u305FC\u5024\u306B\u305D\u306E\u5024\u3092\u52A0\u7B97\u3002\u4F8B\uFF09@-1\u3001@+2\n" + "\u3000\u3053\u306E\u65B9\u6CD5\u3067C\u5024\u3092\u30D7\u30E9\u30B9\u3059\u308B\u5834\u5408\u3001\u4E0A\u9650\u306F12\u3068\u306A\u308B\u3002\n" + "\uFF1E#y\u3001#Ay\uFF1A\u30D5\u30A1\u30F3\u30D6\u30EB\u5024\u4FEE\u6B63\u3002\uFF08\u52A0\u6E1B\u5F0F\u3067\u3082\u5165\u529B\u53EF\u80FD\uFF09\n" + "\u30FBy\u306B\u76F4\u63A5\u6570\u5B57\u3092\u66F8\u304F\u3068\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u5024\u3092\u305D\u306E\u6570\u5B57\u306B\u8A2D\u5B9A\u3002\n" + "\u30FBy\u306E\u6570\u5B57\u306E\u5148\u982D\u304C\u300C+\u300D\u304B\u300C-\u300D\u306A\u3089\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u5024=2\u306B\u305D\u306E\u6570\u5B57\u3092\u52A0\u7B97\u3002\u4F8B\uFF09#+2\n" + "\u30FB\u203B#Ay\u3068\u3059\u308B\u3068\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u3057\u3066\u3082\u9054\u6210\u5024\u3092\u901A\u5E38\u901A\u308A\u7B97\u51FA\u3002\u3000\u4F8B\uFF09#A+1\n" + "\uFF1E$z\uFF1A\u30C0\u30A4\u30B9\u306E\u51FA\u76EE\u3092z\u306B\u56FA\u5B9A\u3057\u3066\u5224\u5B9A\u3059\u308B\u3002\u8907\u6570\u6307\u5B9A\u53EF\u3002\n" + "\u3000\u3000\u3000\u300A\u904B\u547D\u6B6A\u66F2\u300B\u306A\u3069\u300C\u30C0\u30A4\u30B9\u306E\uFF11\u500B\u3092\u632F\u308A\u76F4\u3059\u300D\u52B9\u679C\u7B49\u306B\u4F7F\u7528\u3059\u308B\u3002\n" + "\u3000\u4F8B\uFF092BB$1 \u2192\u30C0\u30A4\u30B9\u30922\u500B\u632F\u308B\u5224\u5B9A\u3067\u3001\u30C0\u30A4\u30B91\u500B\u306E\u51FA\u76EE\u30921\u3067\u56FA\u5B9A\n" + "\u3000\u4F8B\uFF092BB$16\u2192\u30C0\u30A4\u30B9\u30922\u500B\u632F\u308B\u5224\u5B9A\u3067\u3001\u30C0\u30A4\u30B9\u306E\u51FA\u76EE\u30921\u30686\u3067\u56FA\u5B9A\n" + "\uFF1E&v\uFF1A\u51FA\u76EE\u304Cv\u672A\u6E80\u306E\u30C0\u30A4\u30B9\u304C\u3042\u308C\u3070\u3001\u51FA\u76EE\u304Cv\u3060\u3063\u305F\u3082\u306E\u3068\u3057\u3066\u9054\u6210\u5024\u3092\u8A08\u7B97\u3059\u308B\u3002\n" + "\u3000\u4F8B\uFF092BB&3 \u2192\u51FA\u76EE3\u672A\u6E80\uFF08\u2192\u51FA\u76EE1\u30012\uFF09\u3092\u51FA\u76EE3\u3060\u3063\u305F\u3082\u306E\u3068\u3057\u3066\u8A08\u7B97\u3002\n" + "\n" + "\u30FBD66\u30C0\u30A4\u30B9\u3042\u308A\n" + "\u30FB\u9082\u9005\u8868\uFF1AEMO\n" + "\u30FB\u66B4\u9732\u8868\uFF1AEXPO_A\u3000\u3000\u30FB\u9B54\u7363\u5316\u66B4\u9732\u8868\uFF1AEXPO_B\n" + "\u30FB\u30A2\u30A4\u30C9\u30EB\u5C02\u7528\u66B4\u9732\u8868\uFF1AEXPO_I\n" + "\u30FB\u30A2\u30A4\u30C9\u30EB\u5C02\u7528\u9B54\u7363\u5316\u66B4\u9732\u8868\uFF1AEXPO_J\n" + "\u30FB\u6B63\u4F53\u5224\u660E\u30C1\u30E3\u30FC\u30C8A\uFF5EC\uFF1AFACE_A\u3001FACE_B\u3001FACE_C\n");
    self.$setPrefixes(["\\d+BB", "EMO", "EXPO_.", "FACE_."]);
    
    Opal.def(self, '$initialize', $BeastBindTrinity_initialize$1 = function $$initialize() {
      var $iter = $BeastBindTrinity_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $BeastBindTrinity_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $BeastBindTrinity_initialize$1, false), $zuper, $iter);
      self.sendMode = 2;
      self.sortType = 0;
      return (self.d66Type = 2);
    }, $BeastBindTrinity_initialize$1.$$arity = 0);
    
    Opal.def(self, '$changeText', $BeastBindTrinity_changeText$2 = function $$changeText(string) {
      var $$3, $$4, $$5, $$6, $$7, $$8, $$9, $$10, $$11, self = this;

      
      string = $send(string, 'gsub', [/(\d+)BB6/i], ($$3 = function(){var self = $$3.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + "R6"}, $$3.$$s = self, $$3.$$arity = 0, $$3));
      string = $send(string, 'gsub', [/(\d+)BB/i], ($$4 = function(){var self = $$4.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + "R6"}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      string = $send(string, 'gsub', [/(\d+)BF6/i], ($$5 = function(){var self = $$5.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + "Q6"}, $$5.$$s = self, $$5.$$arity = 0, $$5));
      string = $send(string, 'gsub', [/(\d+)BF/i], ($$6 = function(){var self = $$6.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + "Q6"}, $$6.$$s = self, $$6.$$arity = 0, $$6));
      string = $send(string, 'gsub', [/\%([\-\d]+)/i], ($$7 = function(){var self = $$7.$$s || this;

      return "" + "[H:" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$7.$$s = self, $$7.$$arity = 0, $$7));
      string = $send(string, 'gsub', [/\@([\+\-\d]+)/i], ($$8 = function(){var self = $$8.$$s || this;

      return "" + "[C" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$8.$$s = self, $$8.$$arity = 0, $$8));
      string = $send(string, 'gsub', [/\#([A]?[\+\-\d]+)/i], ($$9 = function(){var self = $$9.$$s || this;

      return "" + "[F" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$9.$$s = self, $$9.$$arity = 0, $$9));
      string = $send(string, 'gsub', [/\$([1-6]+)/i], ($$10 = function(){var self = $$10.$$s || this;

      return "" + "[S" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$10.$$s = self, $$10.$$arity = 0, $$10));
      string = $send(string, 'gsub', [/\&(\d)/i], ($$11 = function(){var self = $$11.$$s || this;

      return "" + "[U" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$11.$$s = self, $$11.$$arity = 0, $$11));
      return string;
    }, $BeastBindTrinity_changeText$2.$$arity = 1);
    
    Opal.def(self, '$dice_command_xRn', $BeastBindTrinity_dice_command_xRn$12 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      
      self.nick_e = nick_e;
      return self.$bbt_check(string);
    }, $BeastBindTrinity_dice_command_xRn$12.$$arity = 2);
    
    Opal.def(self, '$bbt_check', $BeastBindTrinity_bbt_check$13 = function $$bbt_check(string) {
      var $$14, $$15, $$16, $a, $b, $$17, $$18, self = this, output = nil, m = nil, humanity = nil, critical = nil, fumble = nil, dicesubs = nil, nofumble = nil, dicepull = nil, pul_flg = nil, dice_c = nil, bonus = nil, signOfInequality = nil, diff = nil, bonusText = nil, str_critical = nil, str_fumble = nil, str_dicesubs = nil, n_cri = nil, n_fum = nil, dice_now = nil, dice_str = nil, total_n = nil, cri_flg = nil, cri_bonus = nil, fum_flg = nil, dice_tc = nil, _ = nil, dice_num = nil, dice_num_old = nil, dold_str = nil, showstring = nil, cmp_op = nil, dice_list = nil;

      
      output = "1";
      self.$debug("bbt string", string);
      if ($truthy((m = /(^|\s)S?((\d+)R6([\+\-\d]*)(\[H:([\-\d]+)\])?(\[C([\+\-\d]+)\])?(\[F(A)?([\+\-\d]+)\])?(\[S([1-6]+)\])?(\[U([1-6])\])?(([>=]+)(\d+))?)(\s|$)/i.$match(string)))) {
      } else {
        
        self.$debug("not mutch");
        return output;
      };
      humanity = 99;
      critical = 12;
      fumble = 2;
      dicesubs = [];
      nofumble = false;
      dicepull = false;
      pul_flg = false;
      string = m['$[]'](2);
      dice_c = m['$[]'](3).$to_i();
      bonus = 0;
      signOfInequality = "";
      diff = 0;
      bonusText = m['$[]'](4);
      if ($truthy(bonusText['$nil?']())) {
      } else {
        bonus = self.$parren_killer($rb_plus($rb_plus("(0", bonusText), ")")).$to_i()
      };
      if ($truthy(m['$[]'](5))) {
        
        if ($truthy(m['$[]'](6))) {
          humanity = m['$[]'](6).$to_i()};
        self.$debug("" + "\u25BC\u73FE\u5728\u4EBA\u9593\u6027 \u53D6\u5F97 " + (humanity));
        if ($truthy($rb_le(humanity, 0))) {
          
          critical = 9;
          self.$debug("" + "\u25BC\u73FE\u5728\u4EBA\u9593\u6027\u304B\u3089C\u5024\u53D6\u5F97 " + (critical));
        } else if ($truthy($rb_le(humanity, 20))) {
          
          critical = 10;
          self.$debug("" + "\u25BC\u73FE\u5728\u4EBA\u9593\u6027\u304B\u3089C\u5024\u53D6\u5F97 " + (critical));
        } else if ($truthy($rb_le(humanity, 40))) {
          
          critical = 11;
          self.$debug("" + "\u25BC\u73FE\u5728\u4EBA\u9593\u6027\u304B\u3089C\u5024\u53D6\u5F97 " + (critical));};};
      if ($truthy(m['$[]'](7))) {
        
        if ($truthy(m['$[]'](8))) {
          str_critical = m['$[]'](8)};
        self.$debug("" + "\u25BCC\u5024\u6587\u5B57\u5217 \u53D6\u5F97 " + (str_critical));};
      if ($truthy(m['$[]'](9))) {
        
        if ($truthy(m['$[]'](10))) {
          nofumble = true};
        self.$debug("" + "\u25BCF\u5024\u8010\u6027 " + (nofumble));
        if ($truthy(m['$[]'](11))) {
          str_fumble = m['$[]'](11)};
        self.$debug("" + "\u25BCF\u5024\u6587\u5B57\u5217 \u53D6\u5F97 " + (str_fumble));};
      if ($truthy(m['$[]'](12))) {
        
        if ($truthy(m['$[]'](13))) {
          str_dicesubs = m['$[]'](13)};
        self.$debug("" + "\u25BC\u51FA\u76EE\u4E88\u7D04\u7528\u306E\u6587\u5B57\u5217 \u53D6\u5F97 " + (str_dicesubs));};
      if ($truthy(m['$[]'](14))) {
        
        if ($truthy(m['$[]'](15))) {
          dicepull = m['$[]'](15).$to_i()};
        self.$debug("" + "\u25BC\u51FA\u76EE\u5F15\u304D\u4E0A\u3052\u30E2\u30FC\u30C9 \u53D6\u5F97 " + (dicepull));};
      if ($truthy(m['$[]'](17))) {
        signOfInequality = m['$[]'](17)};
      if ($truthy(m['$[]'](18))) {
        diff = m['$[]'](18).$to_i()};
      if ($truthy(str_critical)) {
        
        n_cri = 0;
        $send(str_critical.$scan(/[\+\-]?\d+/), 'each', [], ($$14 = function(num){var self = $$14.$$s || this;

        
          
          if (num == null) {
            num = nil;
          };
          return (n_cri = $rb_plus(n_cri, num.$to_i()));}, $$14.$$s = self, $$14.$$arity = 1, $$14));
        self.$debug("" + "\u25BCC\u5024\u6307\u5B9A\u7B26 \u7B97\u51FA " + (n_cri));
        critical = (function() {if ($truthy(str_critical.$match(/^[\+\-][\+\-\d]+/))) {
          return [$rb_plus(critical, n_cri), 12].$min()
        } else {
          return n_cri
        }; return nil; })();
        self.$debug("" + "\u25BC\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024 " + (critical));};
      if ($truthy(str_fumble)) {
        
        n_fum = 0;
        $send(str_fumble.$scan(/[\+\-]?\d+/), 'each', [], ($$15 = function(num){var self = $$15.$$s || this;

        
          
          if (num == null) {
            num = nil;
          };
          return (n_fum = $rb_plus(n_fum, num.$to_i()));}, $$15.$$s = self, $$15.$$arity = 1, $$15));
        self.$debug("" + "\u25BCF\u5024\u6307\u5B9A\u7B26 \u7B97\u51FA " + (n_fum));
        fumble = (function() {if ($truthy(str_fumble.$match(/^[\+\-][\+\-\d]+/))) {
          return $rb_plus(fumble, n_fum)
        } else {
          return n_fum
        }; return nil; })();
        self.$debug("" + "\u25BC\u30D5\u30A1\u30F3\u30D6\u30EB\u5024 " + (fumble));};
      if ($truthy(str_dicesubs)) {
        
        $send(str_dicesubs.$split(/(?:)/), 'each', [], ($$16 = function(i){var self = $$16.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          if ($truthy($rb_lt(dicesubs.$size(), dice_c))) {
            return dicesubs.$push(i.$to_i())
          } else {
            return nil
          };}, $$16.$$s = self, $$16.$$arity = 1, $$16));
        self.$debug("" + "\u25BC\u30C0\u30A4\u30B9\u51FA\u76EE\u4E88\u7D04 " + (dicesubs));};
      dice_now = 0;
      dice_str = "";
      total_n = 0;
      cri_flg = false;
      cri_bonus = 0;
      fum_flg = false;
      dice_tc = $rb_minus(dice_c, dicesubs.$size());
      if ($truthy($rb_gt(dice_tc, 0))) {
        
        $b = self.$roll(dice_tc, 6, self.$sortType()['$&'](1)), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (dice_str = ($a[1] == null ? nil : $a[1])), $b;
        dice_num = $send($rb_plus(dice_str.$split(/,/), dicesubs), 'collect', [], ($$17 = function(n){var self = $$17.$$s || this;

        
          
          if (n == null) {
            n = nil;
          };
          return n.$to_i();}, $$17.$$s = self, $$17.$$arity = 1, $$17));
      } else if ($truthy(dicesubs['$empty?']())) {
        return "ERROR:\u632F\u308B\u30C0\u30A4\u30B9\u306E\u6570\u304C0\u500B\u3067\u3059"
      } else {
        dice_num = dicesubs
      };
      dice_num['$sort!']();
      if ($truthy(dicepull)) {
        
        self.$debug("" + "\u25BC\u51FA\u76EE\u5F15\u304D\u4E0A\u3052 " + (dicepull));
        dice_num_old = dice_num.$dup();
        $send(Opal.Range.$new(0,dice_num.$size(), true), 'each', [], ($$18 = function(i){var self = $$18.$$s || this, $writer = nil;

        
          
          if (i == null) {
            i = nil;
          };
          $writer = [i, [dice_num['$[]'](i), dicepull].$max()];
          $send(dice_num, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$18.$$s = self, $$18.$$arity = 1, $$18));
        pul_flg = dice_num['$!='](dice_num_old);
        self.$debug("" + "\u25BC\u51FA\u76EE\u5F15\u304D\u4E0A\u3052\u306E\u6709\u7121\u306B\u3064\u3044\u3066 " + (pul_flg));
        dice_num['$sort!']();
        dold_str = dice_num_old.$join(",");};
      dice_str = dice_num.$join(",");
      if (dice_c['$=='](1)) {
        dice_now = dice_num['$[]']($rb_minus(dice_c, 1))
      } else {
        dice_now = $rb_plus(dice_num['$[]']($rb_minus(dice_c, 2)), dice_num['$[]']($rb_minus(dice_c, 1)))
      };
      if ($truthy($rb_ge(dice_now, critical))) {
        
        cri_flg = true;
        cri_bonus = 20;};
      total_n = [$rb_plus($rb_plus(dice_now, bonus), cri_bonus), 0].$max();
      if ($truthy($rb_ge(fumble, dice_now))) {
        
        fum_flg = true;
        if ($truthy(nofumble)) {
        } else {
          total_n = 0
        };};
      dice_str = "" + "[" + (dice_str) + "]";
      output = "";
      if ($truthy(pul_flg)) {
        output = $rb_plus(output, "" + "[" + (dold_str) + "] \uFF1E ")};
      output = $rb_plus(output, "" + (dice_now) + (dice_str));
      if ($truthy((($a = fum_flg['$=='](true)) ? nofumble['$=='](false) : fum_flg['$=='](true)))) {
        output = $rb_plus(output, "\u3010\u30D5\u30A1\u30F3\u30D6\u30EB\u3011")
      } else {
        
        if ($truthy(fum_flg)) {
          output = $rb_plus(output, "\u3010\u30D5\u30A1\u30F3\u30D6\u30EB\u3011")};
        if ($truthy($rb_gt(bonus, 0))) {
          output = $rb_plus(output, "" + "+" + (bonus))
        } else if ($truthy($rb_lt(bonus, 0))) {
          output = $rb_plus(output, bonus.$to_s())};
        if ($truthy(cri_flg)) {
          output = $rb_plus(output, "" + "+" + (cri_bonus) + "\u3010\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u3011")};
      };
      showstring = "" + (dice_c) + "R6";
      if ($truthy($rb_gt(bonus, 0))) {
        showstring = $rb_plus(showstring, "" + "+" + (bonus))
      } else if ($truthy($rb_lt(bonus, 0))) {
        showstring = $rb_plus(showstring, bonus.$to_s())};
      showstring = $rb_plus(showstring, "" + "[C" + (critical) + ",F" + (fumble) + "]");
      if ($truthy(signOfInequality['$!='](""))) {
        showstring = $rb_plus(showstring, "" + (signOfInequality) + (diff))};
      if ($truthy($rb_gt(self.$sendMode(), 0))) {
        if ($truthy(/[^\d\[\]]+/['$=~'](output))) {
          output = "" + (self.nick_e) + ": (" + (showstring) + ") \uFF1E " + (output) + " \uFF1E " + (total_n)
        } else {
          output = "" + (self.nick_e) + ": (" + (showstring) + ") \uFF1E " + (total_n)
        }
      } else {
        output = "" + (self.nick_e) + ": (" + (showstring) + ") \uFF1E " + (total_n)
      };
      if ($truthy(signOfInequality['$!='](""))) {
        
        cmp_op = $$($nesting, 'Normalize').$comparison_operator(signOfInequality);
        dice_list = dice_num;
        output = $rb_plus(output, self.$check_result(total_n, dice_now, dice_list, 6, cmp_op, diff));};
      return output;
    }, $BeastBindTrinity_bbt_check$13.$$arity = 1);
    
    Opal.def(self, '$rollDiceCommand', $BeastBindTrinity_rollDiceCommand$19 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, output = nil, type = nil, total_n = nil, $case = nil, tabletype = nil;

      
      output = "1";
      type = "";
      total_n = 0;
      $case = command;
      if (/^EMO/i['$===']($case)) {
      type = "\u9082\u9005\u8868";
      $b = self.$bbt_emotion_table(), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (total_n = ($a[1] == null ? nil : $a[1])), $b;}
      else if (/^EXPO_([ABIJ])/['$===']($case)) {
      $case = $$($nesting, 'Regexp').$last_match(1);
      if (/A/['$===']($case)) {
      type = "\u66B4\u9732\u8868";
      tabletype = 1;}
      else if (/B/['$===']($case)) {
      type = "\u9B54\u7363\u5316\u66B4\u9732\u8868";
      tabletype = 2;}
      else if (/I/['$===']($case)) {
      type = "\u30A2\u30A4\u30C9\u30EB\u5C02\u7528\u66B4\u9732\u8868";
      tabletype = 3;}
      else if (/J/['$===']($case)) {
      type = "\u30A2\u30A4\u30C9\u30EB\u5C02\u7528\u9B54\u7363\u5316\u66B4\u9732\u8868";
      tabletype = 4;};
      $b = self.$bbt_exposure_table(tabletype), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (total_n = ($a[1] == null ? nil : $a[1])), $b;}
      else if (/^FACE_([ABC])/['$===']($case)) {
      $case = $$($nesting, 'Regexp').$last_match(1);
      if (/A/['$===']($case)) {
      type = "\u6B63\u4F53\u5224\u660E\u30C1\u30E3\u30FC\u30C8A";
      tabletype = 1;}
      else if (/B/['$===']($case)) {
      type = "\u6B63\u4F53\u5224\u660E\u30C1\u30E3\u30FC\u30C8B";
      tabletype = 2;}
      else if (/C/['$===']($case)) {
      type = "\u6B63\u4F53\u5224\u660E\u30C1\u30E3\u30FC\u30C8C";
      tabletype = 3;};
      $b = self.$bbt_face_table(tabletype), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (total_n = ($a[1] == null ? nil : $a[1])), $b;};
      if ($truthy(output['$!=']("1"))) {
        output = "" + (type) + "(" + (total_n) + ") \uFF1E " + (output)};
      return output;
    }, $BeastBindTrinity_rollDiceCommand$19.$$arity = 1);
    
    Opal.def(self, '$bbt_emotion_table', $BeastBindTrinity_bbt_emotion_table$20 = function $$bbt_emotion_table() {
      var self = this, table = nil;

      
      table = ["\u5BB6\u65CF", "\u5BB6\u65CF", "\u4FE1\u983C", "\u4FE1\u983C", "\u5FD8\u5374", "\u5FD8\u5374", "\u6148\u611B", "\u6148\u611B", "\u61A7\u61AC", "\u61A7\u61AC", "\u611F\u9298", "\u611F\u9298", "\u540C\u5FD7", "\u540C\u5FD7", "\u5E7C\u5B50", "\u5E7C\u5B50", "\u8208\u5473", "\u8208\u5473", "\u30D3\u30B8\u30CD\u30B9", "\u30D3\u30B8\u30CD\u30B9", "\u5E2B\u4E8B", "\u5E2B\u4E8B", "\u597D\u6575\u624B", "\u597D\u6575\u624B", "\u53CB\u60C5", "\u53CB\u60C5", "\u5FE0\u8AA0", "\u5FE0\u8AA0", "\u6050\u6016", "\u6050\u6016", "\u57F7\u7740", "\u57F7\u7740", "\u8EFD\u8511", "\u8EFD\u8511", "\u618E\u60AA", "\u618E\u60AA"];
      return self.$get_table_by_d66(table);
    }, $BeastBindTrinity_bbt_emotion_table$20.$$arity = 0);
    
    Opal.def(self, '$bbt_exposure_table', $BeastBindTrinity_bbt_exposure_table$21 = function $$bbt_exposure_table(type) {
      var self = this, $case = nil, table = nil;

      
      $case = type;
      if ((1)['$===']($case)) {table = ["\u5642\u306B\u306A\u308B\u304C\u3059\u3050\u5FD8\u308C\u3089\u308C\u308B", "\u90FD\u5E02\u4F1D\u8AAC\u3068\u3057\u3066\u51E6\u7406\u3055\u308C\u308B", "\u30EF\u30A4\u30C9\u30B7\u30E7\u30FC\u3092\u306B\u304E\u308F\u3059", "\u30B7\u30CA\u30EA\u30AA\u4E2D\uFF3B\u8FEB\u5BB3\u72B6\u614B\uFF3D\u306B\u306A\u308B", "\u7D46\u306E\u5BFE\u8C61\u3072\u3068\u308A\u306B\u6B63\u4F53\u304C\u77E5\u3089\u308C\u308B", "\u9B54\u7363\u5316\u66B4\u9732\u8868\u3078"]}
      else if ((2)['$===']($case)) {table = ["\u30C8\u30F3\u30C7\u30E2\u696D\u754C\u306E\u4F1D\u8AAC\u306B\u306A\u308B", "\u30B7\u30CA\u30EA\u30AA\u4E2D\uFF3B\u8FEB\u5BB3\u72B6\u614B\uFF3D\u306B\u306A\u308B", "\u30B7\u30CA\u30EA\u30AA\u4E2D\uFF3B\u8FEB\u5BB3\u72B6\u614B\uFF3D\u306B\u306A\u308B", "\u7D46\u306E\u5BFE\u8C61\u3072\u3068\u308A\u306B\u6B63\u4F53\u304C\u77E5\u3089\u308C\u308B", "\u7D46\u306E\u5BFE\u8C61\u3072\u3068\u308A\u306B\u6B63\u4F53\u304C\u77E5\u3089\u308C\u308B", "\u81EA\u885B\u968A\u9000\u9B54\u90E8\u968A\u00D72D6\u4F53\u306E\u8972\u6483"]}
      else if ((3)['$===']($case)) {table = ["\u6109\u5FEB\u306A\u4F1D\u8AAC\u3068\u3057\u3066\u4EBA\u6C17\u306B\u306A\u308B", "\u30EF\u30A4\u30C9\u30B7\u30E7\u30FC\u3092\u306B\u304E\u308F\u3059", "\u708E\u4E0A\u3002\u30B7\u30CA\u30EA\u30AA\u4E2D\uFF3B\u8FEB\u5BB3\u72B6\u614B\uFF3D", "\u6240\u5C5E\u4E8B\u52D9\u6240\u306B2D6\u6642\u9593\u8AAC\u6559\u3055\u308C\u308B", "\u7D46\u306E\u5BFE\u8C61\u3072\u3068\u308A\u306B\u6B63\u4F53\u304C\u77E5\u3089\u308C\u308B", "\u30A2\u30A4\u30C9\u30EB\u5C02\u7528\u9B54\u7363\u5316\u66B4\u9732\u8868\u3078"]}
      else if ((4)['$===']($case)) {table = ["\u30B7\u30CA\u30EA\u30AA\u4E2D\uFF3B\u8FEB\u5BB3\u72B6\u614B\uFF3D\u306B\u306A\u308B", "\u30B7\u30CA\u30EA\u30AA\u4E2D\uFF3B\u8FEB\u5BB3\u72B6\u614B\uFF3D\u306B\u306A\u308B", "\u7D46\u306E\u5BFE\u8C61\u3072\u3068\u308A\u306B\u6B63\u4F53\u304C\u77E5\u3089\u308C\u308B", "\u4E8B\u52D9\u6240\u304B\u3089\u5951\u7D04\u3092\u89E3\u9664\u3055\u308C\u308B", "\u7D46\u306E\u5BFE\u8C61\u3072\u3068\u308A\u306B\u6B63\u4F53\u304C\u77E5\u3089\u308C\u308B", "1D6\u672C\u306E\u30EC\u30AE\u30E5\u30E9\u30FC\u756A\u7D44\u3092\u5931\u3046"]};
      return self.$get_table_by_1d6(table);
    }, $BeastBindTrinity_bbt_exposure_table$21.$$arity = 1);
    return (Opal.def(self, '$bbt_face_table', $BeastBindTrinity_bbt_face_table$22 = function $$bbt_face_table(type) {
      var self = this, $case = nil, table = nil;

      
      $case = type;
      if ((1)['$===']($case)) {table = ["\u3042\u306A\u305F\u3092\u53D7\u3051\u5165\u308C\u3066\u304F\u308C\u308B", "\u3042\u306A\u305F\u3092\u53D7\u3051\u5165\u308C\u3066\u304F\u308C\u308B", "\u7D46\u304C\uFF08\u62D2\u7D76\uFF09\u306B\u66F8\u304D\u63DB\u308F\u308B", "\u7D46\u304C\u30A8\u30B4\u306B\u66F8\u304D\u63DB\u308F\u308B", "\u6C17\u7D76\u3057\u305D\u306E\u4E8B\u5B9F\u3092\u5FD8\u308C\u308B", "\u7CBE\u795E\u5D29\u58CA\u3059\u308B"]}
      else if ((2)['$===']($case)) {table = ["\u3042\u306A\u305F\u3092\u53D7\u3051\u5165\u308C\u3066\u304F\u308C\u308B", "\u72C2\u4E71\u3057\u653B\u6483\u3057\u3066\u304F\u308B", "\u9000\u5834\u3002\u305D\u306E\u5834\u304B\u3089\u9003\u4EA1\u3002\u66B4\u9732\u8868\u3078", "\u7D46\u304C\u30A8\u30B4\u306B\u66F8\u304D\u63DB\u308F\u308B", "\u7CBE\u795E\u5D29\u58CA\u3059\u308B", "\u7CBE\u795E\u5D29\u58CA\u3059\u308B"]}
      else if ((3)['$===']($case)) {table = ["\u3042\u306A\u305F\u3092\u53D7\u3051\u5165\u308C\u3066\u304F\u308C\u308B", "\u9000\u5834\u3002\u305D\u306E\u5834\u304B\u3089\u9003\u4EA1\u3002\u66B4\u9732\u8868\u3078", "\u9000\u5834\u3002\u305D\u306E\u5834\u304B\u3089\u9003\u4EA1\u3002\u66B4\u9732\u8868\u3078", "\u7D46\u304C\u30A8\u30B4\u306B\u66F8\u304D\u63DB\u308F\u308B", "\u7CBE\u795E\u5D29\u58CA\u3059\u308B", "\u7CBE\u795E\u5D29\u58CA\u3059\u308B"]};
      return self.$get_table_by_1d6(table);
    }, $BeastBindTrinity_bbt_face_table$22.$$arity = 1), nil) && 'bbt_face_table';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
