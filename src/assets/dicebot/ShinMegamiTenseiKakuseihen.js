/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$split_tens', '$+', '$*', '$getCheckResultText', '$min', '$%', '$max', '$floor', '$/', '$getCheckResult', '$format', '$>=', '$getSuccessResult', '$getFailResult']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ShinMegamiTenseiKakuseihen');

    var $nesting = [self].concat($parent_nesting), $ShinMegamiTenseiKakuseihen_check_1D100$1, $ShinMegamiTenseiKakuseihen_split_tens$2, $ShinMegamiTenseiKakuseihen_getCheckResultText$3, $ShinMegamiTenseiKakuseihen_getCheckResult$4, $ShinMegamiTenseiKakuseihen_getSuccessResult$5, $ShinMegamiTenseiKakuseihen_getFailResult$6;

    
    Opal.const_set($nesting[0], 'ID', "SMTKakuseihen");
    Opal.const_set($nesting[0], 'NAME', "\u771F\u30FB\u5973\u795E\u8EE2\u751FTRPG\u3000\u899A\u9192\u7BC7");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u3057\u3093\u3081\u304B\u307F\u3066\u3093\u305B\u3044TRPG\u304B\u304F\u305B\u3044\u3078\u3093");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u30FB\u5224\u5B9A\n" + "1D100<=(\u76EE\u6A19\u5024) \u3067\u30B9\u30EF\u30C3\u30D7\u30FB\u901A\u5E38\u30FB\u9006\u30B9\u30EF\u30C3\u30D7\u5224\u5B9A\u3092\u5224\u5B9A\u3002\n" + "\u5A01\u529B\u30C0\u30A4\u30B9\u306F nU6[6] (n\u306F\u30C0\u30A4\u30B9\u500B\u6570)\u3067\u30ED\u30FC\u30EB\u53EF\u80FD\u3067\u3059\u3002\n");
    
    Opal.def(self, '$check_1D100', $ShinMegamiTenseiKakuseihen_check_1D100$1 = function $$check_1D100(total, dice_total, cmp_op, target) {
      var $a, $b, self = this, dice1 = nil, dice2 = nil, total1 = nil, total2 = nil, isRepdigit = nil, result = nil;

      
      if (cmp_op['$==']("<=")) {
      } else {
        return ""
      };
      $b = self.$split_tens(dice_total), $a = Opal.to_ary($b), (dice1 = ($a[0] == null ? nil : $a[0])), (dice2 = ($a[1] == null ? nil : $a[1])), $b;
      total1 = $rb_plus($rb_times(dice1, 10), dice2);
      total2 = $rb_plus($rb_times(dice2, 10), dice1);
      isRepdigit = dice1['$=='](dice2);
      result = " \uFF1E \u30B9\u30EF\u30C3\u30D7";
      result = $rb_plus(result, self.$getCheckResultText(target, [total1, total2].$min(), isRepdigit));
      result = $rb_plus(result, "\uFF0F\u901A\u5E38");
      result = $rb_plus(result, self.$getCheckResultText(target, total['$%'](100), isRepdigit));
      result = $rb_plus(result, "\uFF0F\u9006\u30B9\u30EF\u30C3\u30D7");
      result = $rb_plus(result, self.$getCheckResultText(target, [total1, total2].$max(), isRepdigit));
      return result;
    }, $ShinMegamiTenseiKakuseihen_check_1D100$1.$$arity = 4);
    
    Opal.def(self, '$split_tens', $ShinMegamiTenseiKakuseihen_split_tens$2 = function $$split_tens(value) {
      var self = this, ones = nil, tens = nil;

      
      value = value['$%'](100);
      ones = $rb_divide(value, 10).$floor();
      tens = value['$%'](10);
      return [ones, tens];
    }, $ShinMegamiTenseiKakuseihen_split_tens$2.$$arity = 1);
    
    Opal.def(self, '$getCheckResultText', $ShinMegamiTenseiKakuseihen_getCheckResultText$3 = function $$getCheckResultText(diff, total, isRepdigit) {
      var self = this, checkResult = nil, text = nil;

      
      checkResult = self.$getCheckResult(diff, total, isRepdigit);
      text = $rb_plus(self.$format("(%02d)", total), checkResult);
      return text;
    }, $ShinMegamiTenseiKakuseihen_getCheckResultText$3.$$arity = 3);
    
    Opal.def(self, '$getCheckResult', $ShinMegamiTenseiKakuseihen_getCheckResult$4 = function $$getCheckResult(diff, total, isRepdigit) {
      var self = this;

      
      if ($truthy($rb_ge(diff, total))) {
        return self.$getSuccessResult(isRepdigit)};
      return self.$getFailResult(isRepdigit);
    }, $ShinMegamiTenseiKakuseihen_getCheckResult$4.$$arity = 3);
    
    Opal.def(self, '$getSuccessResult', $ShinMegamiTenseiKakuseihen_getSuccessResult$5 = function $$getSuccessResult(isRepdigit) {
      var self = this;

      
      if ($truthy(isRepdigit)) {
        return "\u7D76\u5BFE\u6210\u529F"};
      return "\u6210\u529F";
    }, $ShinMegamiTenseiKakuseihen_getSuccessResult$5.$$arity = 1);
    return (Opal.def(self, '$getFailResult', $ShinMegamiTenseiKakuseihen_getFailResult$6 = function $$getFailResult(isRepdigit) {
      var self = this;

      
      if ($truthy(isRepdigit)) {
        return "\u7D76\u5BFE\u5931\u6557"};
      return "\u5931\u6557";
    }, $ShinMegamiTenseiKakuseihen_getFailResult$6.$$arity = 1), nil) && 'getFailResult';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
