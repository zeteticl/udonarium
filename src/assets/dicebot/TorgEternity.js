/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$analyzeDiceCommandResultMethod', '$gsub', '$last_match', '$torg_check', '$=~', '$debug', '$to_i', '$parren_killer', '$torg_eternity_dice', '$get_torg_eternity_bonus', '$>', '$+', '$to_s', '$!=', '$!', '$nil?', '$==', '$format', '$match', '$get_torg_eternity_modifier', '$<=', '$get_torg_eternity_damage_bonus_dice', '$<', '$get_torg_eternity_success_level', '$get_torg_eternity_damage_result', '$empty?', '$each', '$[]', '$roll', '$shift', '$&', '$-', '$get_torg_eternity_table_result', '$/']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'TorgEternity');

    var $nesting = [self].concat($parent_nesting), $TorgEternity_initialize$1, $TorgEternity_rollDiceCommand$2, $TorgEternity_changeText$3, $TorgEternity_dice_command_xRn$5, $TorgEternity_torg_check$6, $TorgEternity_getRolld20DiceCommandResult$7, $TorgEternity_getUpRollDiceCommandResult$8, $TorgEternity_getPossibilityRollDiceCommandResult$9, $TorgEternity_getBonusDamageDiceCommandResult$10, $TorgEternity_getSuccessLevelDiceCommandResult$11, $TorgEternity_getDamageResultDiceCommandResult$12, $TorgEternity_getRollBonusDiceCommandResult$13, $TorgEternity_get_torg_eternity_table_result$14, $TorgEternity_get_torg_eternity_modifier$16, $TorgEternity_torg_eternity_dice$17, $TorgEternity_get_torg_eternity_damage_bonus_dice$18, $TorgEternity_get_torg_eternity_success_level$19, $TorgEternity_get_torg_eternity_damage_result$20, $TorgEternity_get_torg_eternity_bonus$21;

    
    Opal.const_set($nesting[0], 'ID', "TorgEternity");
    Opal.const_set($nesting[0], 'NAME', "TORG Eternity");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u3068\u304A\u304F\u3048\u305F\u3042\u306B\u3066\u3044");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u30FB\u5224\u5B9A\n" + "\u3000\u30FBTG\n" + "\u3000\u3000\"TG[m]\"\u30671d20\u3092\u30ED\u30FC\u30EB\u3057\u307E\u3059\u3002[]\u5185\u306F\u7701\u7565\u53EF\u80FD\u3002\n" + "\u3000\u3000m\u306F\u6280\u80FD\u57FA\u672C\u5024\u3092\u5165\u308C\u3066\u4E0B\u3055\u3044\u3002R\u30B3\u30DE\u30F3\u30C9\u306B\u8AAD\u66FF\u3055\u308C\u307E\u3059\u3002\n" + "\u3000\u3000\u632F\u308A\u8DB3\u3057\u3092\u81EA\u52D5\u3067\u884C\u3044\u300120\u306E\u51FA\u76EE\u304C\u51FA\u305F\u3068\u304D\u306B\u306F\u6280\u80FD\u7121\u3057\u5024\u3082\u4E26\u8A18\u3057\u307E\u3059\u3002\n" + "\u3000\u3000(TORG\u30C0\u30A4\u30B9\u30DC\u30C3\u30C8\u3068\u540C\u3058\u6319\u52D5\u3092\u3059\u308B\u30B3\u30DE\u30F3\u30C9\u3067\u3059\u3002\u30ED\u30FC\u30EB\u30DC\u30FC\u30CA\u30B9\u306E\u8AAD\u307F\u66FF\u3048\u306E\u307F\u3001Eternity\u7248\u3068\u306A\u308A\u307E\u3059)\n" + "\u3000\u30FBTE\n" + "\u3000\u3000\"TE\"\u30671d20\u3092\u30ED\u30FC\u30EB\u3057\u307E\u3059\u3002\n" + "\u3000\u3000\u632F\u308A\u8DB3\u3057\u3092\u81EA\u52D5\u3067\u884C\u3044\u300120\u306E\u51FA\u76EE\u304C\u51FA\u305F\u3068\u304D\u306B\u306F\u6280\u80FD\u7121\u3057\u5024\u3082\u4E26\u8A18\u3057\u307E\u3059\u3002\n" + "\u3000\u3000\u51FA\u76EE1\u306E\u6642\u306B\u306F\u300CMishap!\u3000\u81EA\u52D5\u5931\u6557\uFF01\u300D\u3068\u51FA\u529B\u3055\u308C\u307E\u3059\u3002\n" + "\u3000\u30FBUP\n" + "\u3000\u3000\"UP\"\u3067\u9AD8\u63DA\u72B6\u614B\u306E\u30ED\u30FC\u30EB(\u901A\u5E38\u306E1d20\u306B\u52A0\u3048\u30011d20\u3092\u8FFD\u52A0\u3067\u632F\u308A\u8DB3\u3057)\u3092\u884C\u3044\u307E\u3059\u3002\n" + "\u3000\u3000\u5404\u30ED\u30FC\u30EB\u3067\u306E\u632F\u308A\u8DB3\u3057\u3092\u81EA\u52D5\u3067\u884C\u3044\u300120\u306E\u51FA\u76EE\u304C\u51FA\u305F\u3068\u304D\u306B\u306F\u6280\u80FD\u7121\u3057\u5024\u3082\u4E26\u8A18\u3057\u307E\u3059\u3002\n" + "\u3000\u3000\u4E00\u6295\u76EE\u3067\u51FA\u76EE1\u306E\u6642\u306B\u306F\u300CMishap!\u3000\u81EA\u52D5\u5931\u6557\uFF01\u300D\u3068\u51FA\u529B\u3055\u308C\u3001\u4E8C\u6295\u76EE\u306F\u884C\u308F\u308C\u307E\u305B\u3093\u3002\n" + "\u3000\u30FBPOS\n" + "\u3000\u3000\"POSm\"\u3067\u3001\u30DD\u30B7\u30D3\u30EA\u30C6\u30A3\u4F7F\u7528\u306B\u3088\u308B1d20\u306E\u30ED\u30FC\u30EB\u3092\u884C\u3044\u307E\u3059\u3002\n" + "\u3000\u3000m\u306F\u30DD\u30B7\u30D3\u30EA\u30C6\u30A3\u3092\u4F7F\u7528\u3059\u308B\u524D\u306E\u30ED\u30FC\u30EB\u7D50\u679C\u3092\u5165\u308C\u3066\u4E0B\u3055\u3044\u3002\n" + "\u3000\u3000\u51FA\u76EE\u304C10\u672A\u6E80\u306E\u5834\u5408\u306F\u300110\u3078\u306E\u8AAD\u307F\u66FF\u3048\u304C\u884C\u308F\u308C\u307E\u3059\u3002\n" + "\u3000\u3000\u307E\u305F\u3001\u632F\u308A\u8DB3\u3057\u3092\u81EA\u52D5\u3067\u884C\u3044\u300120\u306E\u51FA\u76EE\u304C\u51FA\u305F\u3068\u304D\u306B\u306F\u6280\u80FD\u7121\u3057\u5024\u3082\u4E26\u8A18\u3057\u307E\u3059\u3002\n" + "\u30FB\u30DC\u30FC\u30CA\u30B9\u30C0\u30E1\u30FC\u30B8\u30ED\u30FC\u30EB\n" + "\u3000\"xBD[+y]\"\u3067\u30ED\u30FC\u30EB\u3057\u307E\u3059\u3002[]\u5185\u306F\u7701\u7565\u53EF\u80FD\u3002\n" + "\u3000x\u306F\u30C0\u30E1\u30FC\u30B8\u30C0\u30A4\u30B9\u6570\u3002y\u306F\u30C0\u30E1\u30FC\u30B8\u57FA\u672C\u5024 or \u5F0F\u3092\u5165\u308C\u3066\u4E0B\u3055\u3044\u3002\n" + "\u3000x\u306F1\u4EE5\u4E0A\u304C\u5FC5\u8981\u3067\u3059\u30020\u3060\u3068\u30A8\u30E9\u30FC\u304C\u51FA\u529B\u3055\u308C\u307E\u3059\u3002\u30DE\u30A4\u30CA\u30B9\u5024\u306F\u30B3\u30DE\u30F3\u30C9\u3068\u3057\u3066\u8A8D\u8B58\u3055\u308C\u307E\u305B\u3093\u3002\n" + "\u3000\u632F\u308A\u8DB3\u3057\u51E6\u7406\u306F\u81EA\u52D5\u3067\u884C\u308F\u308C\u307E\u3059\u3002(\u632F\u308A\u8DB3\u3057\u767A\u751F\u6642\u306E\u76EE\u306F\u3001\u300C5\u221E\u300D\u3068\u51FA\u529B\u3055\u308C\u307E\u3059)\n" + "\u30FB\u5404\u7A2E\u8868\n" + "\u3000\"(\u8868\u30B3\u30DE\u30F3\u30C9)(\u6570\u5024)\"\u3067\u632F\u308A\u307E\u3059\u3002\n" + "\u3000\u30FB\u6210\u529F\u30EC\u30D9\u30EB\u8868\u300CRTx or RESULTx\u300D\n" + "\u3000\u30FB\u30C0\u30E1\u30FC\u30B8\u7D50\u679C\u8868\u300CDTx or DAMAGEx\u300D\n" + "\u3000\u30FB\u30ED\u30FC\u30EB\u30DC\u30FC\u30CA\u30B9\u8868\u300CBTx+y or BONUSx+y or TOTALx+y\u300D x\u306F\u6570\u5024, y\u306F\u6280\u80FD\u57FA\u672C\u5024\n");
    self.$setPrefixes(["(TE.*|UP.*|POS.*|\\d+BD.*|TG.*|RT.*|Result.*|DT.*|damage.*|BT.*|bonus.*|total.*)"]);
    
    Opal.def(self, '$initialize', $TorgEternity_initialize$1 = function $$initialize() {
      var $iter = $TorgEternity_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $TorgEternity_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $TorgEternity_initialize$1, false), $zuper, $iter);
      return (self.sendMode = 2);
    }, $TorgEternity_initialize$1.$$arity = 0);
    
    Opal.def(self, '$rollDiceCommand', $TorgEternity_rollDiceCommand$2 = function $$rollDiceCommand(command) {
      var self = this;

      return self.$analyzeDiceCommandResultMethod(command)
    }, $TorgEternity_rollDiceCommand$2.$$arity = 1);
    
    Opal.def(self, '$changeText', $TorgEternity_changeText$3 = function $$changeText(string) {
      var $$4, self = this;

      
      string = $send(string, 'gsub', [/TG(\d+)/i], ($$4 = function(){var self = $$4.$$s || this;

      return "" + "1R20+" + ($$($nesting, 'Regexp').$last_match(1))}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      string = string.$gsub(/TG/i, "1R20");
      return string;
    }, $TorgEternity_changeText$3.$$arity = 1);
    
    Opal.def(self, '$dice_command_xRn', $TorgEternity_dice_command_xRn$5 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      return self.$torg_check(string, nick_e)
    }, $TorgEternity_dice_command_xRn$5.$$arity = 2);
    
    Opal.def(self, '$torg_check', $TorgEternity_torg_check$6 = function $$torg_check(string, nick_e) {
      var $a, $b, self = this, output = nil, mod = nil, skilled = nil, unskilled = nil, dice_str = nil, sk_bonus = nil;

      
      output = "1";
      if ($truthy(/(^|\s)S?(1R20([+-]\d+)*)(\s|$)/i['$=~'](string))) {
      } else {
        return "1"
      };
      string = $$($nesting, 'Regexp').$last_match(2);
      mod = $$($nesting, 'Regexp').$last_match(3);
      self.$debug(mod);
      if ($truthy(mod)) {
        mod = self.$parren_killer("" + "(0" + (mod) + ")").$to_i()};
      self.$debug(mod);
      mod = mod.$to_i();
      $b = self.$torg_eternity_dice(false, false), $a = Opal.to_ary($b), (skilled = ($a[0] == null ? nil : $a[0])), (unskilled = ($a[1] == null ? nil : $a[1])), (dice_str = ($a[2] == null ? nil : $a[2])), $b;
      sk_bonus = self.$get_torg_eternity_bonus(skilled);
      if ($truthy(mod)) {
        if ($truthy($rb_gt(mod, 0))) {
          output = "" + (sk_bonus) + "[" + (dice_str) + "]+" + (mod)
        } else {
          output = "" + (sk_bonus) + "[" + (dice_str) + "]" + (mod)
        }
      } else {
        output = "" + (sk_bonus) + "[" + (dice_str) + "]"
      };
      output = $rb_plus(output, $rb_plus(" \uFF1E ", $rb_plus(sk_bonus, mod).$to_s()));
      if ($truthy(skilled['$!='](unskilled))) {
        output = $rb_plus(output, $rb_plus($rb_plus("(\u6280\u80FD\u7121", $rb_plus(self.$get_torg_eternity_bonus(unskilled), mod).$to_s()), ")"))};
      output = "" + (nick_e) + ": (" + (string) + ") \uFF1E " + (output);
      return output;
    }, $TorgEternity_torg_check$6.$$arity = 2);
    
    Opal.def(self, '$getRolld20DiceCommandResult', $TorgEternity_getRolld20DiceCommandResult$7 = function $$getRolld20DiceCommandResult(command) {
      var $a, $b, self = this, m = nil, secret = nil, skilled = nil, unskilled = nil, dice_str = nil, mishap = nil, output = nil, value_skilled = nil, value_unskilled = nil;

      
      self.$debug("Torg Eternity Dice Roll Command ? ", command);
      m = /(^|\s)(S)?(TE)/i['$=~'](command);
      if ($truthy(m)) {
      } else {
        
        self.$debug("None");
        return nil;
      };
      secret = $$($nesting, 'Regexp').$last_match(2)['$nil?']()['$!']();
      self.$debug("Yes!");
      $b = self.$torg_eternity_dice(false, true), $a = Opal.to_ary($b), (skilled = ($a[0] == null ? nil : $a[0])), (unskilled = ($a[1] == null ? nil : $a[1])), (dice_str = ($a[2] == null ? nil : $a[2])), (mishap = ($a[3] == null ? nil : $a[3])), $b;
      if (mishap['$=='](1)) {
        output = "" + "d20\u30ED\u30FC\u30EB\uFF08\u901A\u5E38\uFF09 \uFF1E 1d20[" + (dice_str) + "] \uFF1E Mishap!\u3000\u7D76\u5BFE\u5931\u6557\uFF01"
      } else {
        
        value_skilled = self.$format("%+d", self.$get_torg_eternity_bonus(skilled));
        if ($truthy(skilled['$!='](unskilled))) {
          
          value_unskilled = self.$format("%+d", self.$get_torg_eternity_bonus(unskilled));
          output = "" + "d20\u30ED\u30FC\u30EB\uFF08\u901A\u5E38\uFF09 \uFF1E 1d20[" + (dice_str) + "] \uFF1E " + (value_skilled) + "[" + (skilled) + "]\uFF08\u6280\u80FD\u6709\uFF09 / " + (value_unskilled) + "[" + (unskilled) + "]\uFF08\u6280\u80FD\u7121\uFF09";
        } else {
          output = "" + "d20\u30ED\u30FC\u30EB\uFF08\u901A\u5E38\uFF09 \uFF1E 1d20[" + (dice_str) + "] \uFF1E " + (value_skilled) + "[" + (skilled) + "]"
        };
      };
      self.$debug(output, secret);
      return [output, secret];
    }, $TorgEternity_getRolld20DiceCommandResult$7.$$arity = 1);
    
    Opal.def(self, '$getUpRollDiceCommandResult', $TorgEternity_getUpRollDiceCommandResult$8 = function $$getUpRollDiceCommandResult(command) {
      var $a, $b, self = this, m = nil, secret = nil, skilled1 = nil, unskilled1 = nil, dice_str1 = nil, mishap = nil, output = nil, skilled2 = nil, unskilled2 = nil, dice_str2 = nil, subtotal_skilled = nil, subtotal_unskilled = nil, value_skilled = nil, value_unskilled = nil;

      
      self.$debug("Torg Eternity Dice Roll ( UP ) Command ? ", command);
      m = /(^|\s)(S)?(UP)/i['$=~'](command);
      if ($truthy(m)) {
      } else {
        
        self.$debug("None");
        return nil;
      };
      secret = $$($nesting, 'Regexp').$last_match(2)['$nil?']()['$!']();
      self.$debug("Yes!");
      $b = self.$torg_eternity_dice(false, true), $a = Opal.to_ary($b), (skilled1 = ($a[0] == null ? nil : $a[0])), (unskilled1 = ($a[1] == null ? nil : $a[1])), (dice_str1 = ($a[2] == null ? nil : $a[2])), (mishap = ($a[3] == null ? nil : $a[3])), $b;
      if (mishap['$=='](1)) {
        output = "" + "d20\u30ED\u30FC\u30EB\uFF08\u9AD8\u63DA\uFF09 \uFF1E 1d20[" + (dice_str1) + "] \uFF1E Mishap!\u3000\u7D76\u5BFE\u5931\u6557\uFF01"
      } else {
        
        $b = self.$torg_eternity_dice(false, false), $a = Opal.to_ary($b), (skilled2 = ($a[0] == null ? nil : $a[0])), (unskilled2 = ($a[1] == null ? nil : $a[1])), (dice_str2 = ($a[2] == null ? nil : $a[2])), $b;
        subtotal_skilled = $rb_plus(skilled1, skilled2);
        subtotal_unskilled = $rb_plus(unskilled1, unskilled2);
        value_skilled = self.$format("%+d", self.$get_torg_eternity_bonus(subtotal_skilled));
        if ($truthy(subtotal_skilled['$!='](subtotal_unskilled))) {
          
          value_unskilled = self.$format("%+d", self.$get_torg_eternity_bonus(subtotal_unskilled));
          output = "" + "d20\u30ED\u30FC\u30EB\uFF08\u9AD8\u63DA\uFF09 \uFF1E 1d20[" + (dice_str1) + "] + 1d20[" + (dice_str2) + "] \uFF1E " + (value_skilled) + "[" + (subtotal_skilled) + "]\uFF08\u6280\u80FD\u6709\uFF09 / " + (value_unskilled) + "[" + (subtotal_unskilled) + "]\uFF08\u6280\u80FD\u7121\uFF09";
        } else {
          output = "" + "d20\u30ED\u30FC\u30EB\uFF08\u9AD8\u63DA\uFF09 \uFF1E 1d20[" + (dice_str1) + "] + 1d20[" + (dice_str2) + "] \uFF1E " + (value_skilled) + "[" + (subtotal_skilled) + "]"
        };
      };
      self.$debug(output, secret);
      return [output, secret];
    }, $TorgEternity_getUpRollDiceCommandResult$8.$$arity = 1);
    
    Opal.def(self, '$getPossibilityRollDiceCommandResult', $TorgEternity_getPossibilityRollDiceCommandResult$9 = function $$getPossibilityRollDiceCommandResult(command) {
      var $a, $b, self = this, m = nil, secret = nil, output_modifier = nil, skilled = nil, unskilled = nil, dice_str = nil, subtotal_skilled = nil, subtotal_unskilled = nil, value_skilled = nil, value_unskilled = nil, output = nil;

      
      self.$debug("Torg Eternity Possibility Roll Command ? ", command);
      m = /(^|\s)(S)?(POS)((\d+)(\+\d+)?)/i['$=~'](command);
      if ($truthy(m)) {
      } else {
        
        self.$debug("None");
        return nil;
      };
      secret = $$($nesting, 'Regexp').$last_match(2)['$nil?']()['$!']();
      self.$debug("Yes!");
      output_modifier = self.$parren_killer("" + "(0" + ($$($nesting, 'Regexp').$last_match(4)) + ")").$to_i();
      $b = self.$torg_eternity_dice(true, false), $a = Opal.to_ary($b), (skilled = ($a[0] == null ? nil : $a[0])), (unskilled = ($a[1] == null ? nil : $a[1])), (dice_str = ($a[2] == null ? nil : $a[2])), $b;
      subtotal_skilled = $rb_plus(skilled, output_modifier);
      subtotal_unskilled = $rb_plus(unskilled, output_modifier);
      value_skilled = self.$format("%+d", self.$get_torg_eternity_bonus(subtotal_skilled));
      if ($truthy(subtotal_skilled['$!='](subtotal_unskilled))) {
        
        value_unskilled = self.$format("%+d", self.$get_torg_eternity_bonus(subtotal_unskilled));
        output = "" + "d20\u30ED\u30FC\u30EB\uFF08\u30DD\u30B7\u30D3\u30EA\u30C6\u30A3\uFF09 \uFF1E " + (output_modifier) + "+1d20[" + (dice_str) + "] \uFF1E " + (value_skilled) + "[" + (subtotal_skilled) + "]\uFF08\u6280\u80FD\u6709\uFF09 / " + (value_unskilled) + "[" + (subtotal_unskilled) + "]\uFF08\u6280\u80FD\u7121\uFF09";
      } else {
        output = "" + "d20\u30ED\u30FC\u30EB\uFF08\u30DD\u30B7\u30D3\u30EA\u30C6\u30A3\uFF09 \uFF1E " + (output_modifier) + "+1d20[" + (dice_str) + "] \uFF1E " + (value_skilled) + "[" + (subtotal_skilled) + "]"
      };
      self.$debug(output, secret);
      return [output, secret];
    }, $TorgEternity_getPossibilityRollDiceCommandResult$9.$$arity = 1);
    
    Opal.def(self, '$getBonusDamageDiceCommandResult', $TorgEternity_getBonusDamageDiceCommandResult$10 = function $$getBonusDamageDiceCommandResult(command) {
      var $a, $b, self = this, m = nil, number_bonus_die = nil, value_modifier = nil, output_modifier = nil, output = nil, value_roll = nil, output_roll = nil, output_value = nil;

      
      self.$debug("TorgEternity Bonus Damage Roll Command ? ", command);
      m = /(\d+)(BD)(([\+\-]\d+)*)/i.$match(command);
      if ($truthy(m)) {
      } else {
        
        self.$debug("None");
        return nil;
      };
      self.$debug("Yes!");
      number_bonus_die = $$($nesting, 'Regexp').$last_match(1).$to_i();
      $b = self.$get_torg_eternity_modifier($$($nesting, 'Regexp').$last_match(3)), $a = Opal.to_ary($b), (value_modifier = ($a[0] == null ? nil : $a[0])), (output_modifier = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy($rb_le(number_bonus_die, 0))) {
        output = "\u30A8\u30E9\u30FC\u3067\u3059\u3002xBD (x\u22671) \u3068\u3057\u3066\u4E0B\u3055\u3044"
      } else {
        
        $b = self.$get_torg_eternity_damage_bonus_dice(number_bonus_die), $a = Opal.to_ary($b), (value_roll = ($a[0] == null ? nil : $a[0])), (output_roll = ($a[1] == null ? nil : $a[1])), $b;
        output_value = $rb_plus(value_roll, value_modifier);
        output = "" + "\u30DC\u30FC\u30CA\u30B9\u30C0\u30E1\u30FC\u30B8\u30ED\u30FC\u30EB(" + (number_bonus_die) + "BD" + (output_modifier) + ") \uFF1E " + (value_roll) + "[" + (output_roll) + "]" + (output_modifier) + " \uFF1E " + (output_value) + "\u30C0\u30E1\u30FC\u30B8";
      };
      return output;
    }, $TorgEternity_getBonusDamageDiceCommandResult$10.$$arity = 1);
    
    Opal.def(self, '$getSuccessLevelDiceCommandResult', $TorgEternity_getSuccessLevelDiceCommandResult$11 = function $$getSuccessLevelDiceCommandResult(command) {
      var self = this, m = nil, value = nil, output = nil;

      
      self.$debug("TorgEternity Success Level Table Command ? ", command);
      m = /(RT|Result)(\d+([\+\-]\d+)*)/i.$match(command);
      if ($truthy(m)) {
      } else {
        
        self.$debug("None");
        return nil;
      };
      self.$debug("Yes!");
      value = self.$parren_killer("" + "(0" + ($$($nesting, 'Regexp').$last_match(2)) + ")").$to_i();
      self.$debug(value);
      if ($truthy($rb_lt(value, 0))) {
        output = "Failure."
      } else {
        output = self.$get_torg_eternity_success_level(value)
      };
      output = "" + "\u6210\u529F\u30EC\u30D9\u30EB\u8868[" + (value) + "] \uFF1E " + (output);
      self.$debug(output);
      return output;
    }, $TorgEternity_getSuccessLevelDiceCommandResult$11.$$arity = 1);
    
    Opal.def(self, '$getDamageResultDiceCommandResult', $TorgEternity_getDamageResultDiceCommandResult$12 = function $$getDamageResultDiceCommandResult(command) {
      var self = this, m = nil, value = nil, output = nil;

      
      self.$debug("TorgEternity Damage Result Table Command ? ", command);
      m = /(DT|Damage)(\d+([\+\-]\d+)*)/i.$match(command);
      if ($truthy(m)) {
      } else {
        
        self.$debug("None");
        return nil;
      };
      self.$debug("Yes!");
      value = self.$parren_killer("" + "(0" + ($$($nesting, 'Regexp').$last_match(2)) + ")").$to_i();
      self.$debug(value);
      output = self.$get_torg_eternity_damage_result(value);
      output = "" + "\u30C0\u30E1\u30FC\u30B8\u7D50\u679C\u8868[" + (value) + "] \uFF1E " + (output);
      self.$debug(output);
      return output;
    }, $TorgEternity_getDamageResultDiceCommandResult$12.$$arity = 1);
    
    Opal.def(self, '$getRollBonusDiceCommandResult', $TorgEternity_getRollBonusDiceCommandResult$13 = function $$getRollBonusDiceCommandResult(command) {
      var $a, $b, self = this, m = nil, value_roll = nil, output_bonus = nil, value_modifier = nil, output_modifier = nil, output = nil, value_result = nil;

      
      self.$debug("TorgEternity Roll Bonus Table Command ? ", command);
      m = /(BT|Bonus)(\d+)(([\+\-]\d+)*)/i.$match(command);
      if ($truthy(m)) {
      } else {
        
        self.$debug("None");
        return nil;
      };
      self.$debug("Yes!");
      value_roll = $$($nesting, 'Regexp').$last_match(2).$to_i();
      output_bonus = self.$get_torg_eternity_bonus(value_roll);
      self.$debug(output_bonus);
      $b = self.$get_torg_eternity_modifier($$($nesting, 'Regexp').$last_match(3)), $a = Opal.to_ary($b), (value_modifier = ($a[0] == null ? nil : $a[0])), (output_modifier = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy($rb_le(value_roll, 1))) {
        output = "" + "\u30ED\u30FC\u30EB\u30DC\u30FC\u30CA\u30B9\u8868[" + (value_roll) + "] \uFF1E Mishap!!"
      } else if ($truthy(output_modifier['$empty?']())) {
        output = "" + "\u30ED\u30FC\u30EB\u30DC\u30FC\u30CA\u30B9\u8868[" + (value_roll) + "] \uFF1E " + (output_bonus)
      } else {
        
        value_result = $rb_plus(output_bonus.$to_i(), value_modifier);
        self.$debug(value_result);
        output = "" + "\u30ED\u30FC\u30EB\u30DC\u30FC\u30CA\u30B9\u8868[" + (value_roll) + "]" + (output_modifier) + " \uFF1E " + (output_bonus) + "[" + (value_roll) + "]" + (output_modifier) + " \uFF1E " + (value_result);
      };
      self.$debug(output);
      return output;
    }, $TorgEternity_getRollBonusDiceCommandResult$13.$$arity = 1);
    
    Opal.def(self, '$get_torg_eternity_table_result', $TorgEternity_get_torg_eternity_table_result$14 = function $$get_torg_eternity_table_result(value, table) {
      var $$15, self = this, output = nil;

      
      output = nil;
      (function(){var $brk = Opal.new_brk(); try {return $send(table, 'each', [], ($$15 = function(item){var self = $$15.$$s || this, item_index = nil;

      
        
        if (item == null) {
          item = nil;
        };
        item_index = item['$[]'](0);
        if ($truthy($rb_gt(item_index, value))) {
          
          Opal.brk(nil, $brk)};
        return (output = item['$[]'](1));}, $$15.$$s = self, $$15.$$brk = $brk, $$15.$$arity = 1, $$15))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return output;
    }, $TorgEternity_get_torg_eternity_table_result$14.$$arity = 2);
    
    Opal.def(self, '$get_torg_eternity_modifier', $TorgEternity_get_torg_eternity_modifier$16 = function $$get_torg_eternity_modifier(string_modifier) {
      var self = this, value_modifier = nil, output_modifier = nil;

      
      self.$debug("" + "modifier check : " + (string_modifier));
      if (string_modifier['$==']("")) {
        
        value_modifier = 0;
        output_modifier = "";
      } else {
        
        value_modifier = self.$parren_killer("" + "(0" + (string_modifier) + ")").$to_i();
        output_modifier = self.$format("%+d", value_modifier);
      };
      self.$debug(value_modifier);
      self.$debug(output_modifier);
      return [value_modifier, output_modifier];
    }, $TorgEternity_get_torg_eternity_modifier$16.$$arity = 1);
    
    Opal.def(self, '$torg_eternity_dice', $TorgEternity_torg_eternity_dice$17 = function $$torg_eternity_dice(check_pos, check_mishap) {
      var $a, self = this, isSkilledCritical = nil, isCritical = nil, skilled = nil, unskilled = nil, mishap = nil, dice_str = nil, dummy = nil, dice_n = nil, dice_str_now = nil;

      
      isSkilledCritical = true;
      isCritical = true;
      skilled = 0;
      unskilled = 0;
      mishap = 0;
      dice_str = "";
      while ($truthy(isSkilledCritical)) {
        
        if ($truthy(dice_str['$empty?']())) {
        } else {
          dice_str = $rb_plus(dice_str, ",")
        };
        dummy = self.$roll(1, 20, 0);
        dice_n = dummy.$shift();
        if ($truthy(check_pos)) {
          
          if ($truthy($rb_lt(dice_n, 10))) {
            
            dice_str_now = "" + (dice_n) + "\u219210";
            dice_n = 10;
            isSkilledCritical = false;
          } else {
            dice_str_now = dice_n.$to_s()
          };
          dice_str = $rb_plus(dice_str, dice_str_now);
        } else {
          dice_str = $rb_plus(dice_str, dice_n.$to_s())
        };
        skilled = $rb_plus(skilled, dice_n);
        if ($truthy(isCritical)) {
          unskilled = $rb_plus(unskilled, dice_n)};
        if (dice_n['$=='](20)) {
          isCritical = false
        } else if ($truthy(dice_n['$!='](10))) {
          
          isSkilledCritical = false;
          isCritical = false;
          if ($truthy(check_mishap['$&'](dice_n['$=='](1)))) {
            mishap = 1};};
        check_pos = false;
        check_mishap = false;
      };
      return [skilled, unskilled, dice_str, mishap];
    }, $TorgEternity_torg_eternity_dice$17.$$arity = 2);
    
    Opal.def(self, '$get_torg_eternity_damage_bonus_dice', $TorgEternity_get_torg_eternity_damage_bonus_dice$18 = function $$get_torg_eternity_damage_bonus_dice(number) {
      var $a, $b, $c, self = this, value_roll = nil, output_roll = nil, dice_value = nil, dice_text = nil;

      
      self.$debug("" + "bonus dice roll : " + (number));
      value_roll = 0;
      output_roll = "";
      if ($truthy($rb_gt(number, 0))) {
        
        value_roll = 0;
        output_roll = "";
        while ($truthy($rb_gt(number, 0))) {
          
          if ($truthy(output_roll['$empty?']())) {
          } else {
            output_roll = "" + (output_roll) + ","
          };
          $c = self.$roll(1, 6), $b = Opal.to_ary($c), (dice_value = ($b[0] == null ? nil : $b[0])), (dice_text = ($b[1] == null ? nil : $b[1])), $c;
          if (dice_value['$=='](6)) {
            
            dice_value = 5;
            dice_text = "5\u221E";
            number = $rb_plus(number, 1);};
          value_roll = $rb_plus(value_roll, dice_value);
          output_roll = "" + (output_roll) + (dice_text);
          self.$debug(value_roll);
          self.$debug(output_roll);
          number = $rb_minus(number, 1);
        };
      } else {
        output_roll = "0"
      };
      self.$debug(value_roll);
      self.$debug(output_roll);
      return [value_roll, output_roll];
    }, $TorgEternity_get_torg_eternity_damage_bonus_dice$18.$$arity = 1);
    
    Opal.def(self, '$get_torg_eternity_success_level', $TorgEternity_get_torg_eternity_success_level$19 = function $$get_torg_eternity_success_level(value) {
      var self = this, success_table = nil;

      
      success_table = [[0, "Success - Standard."], [5, "Success - Good!"], [10, "Success - Outstanding!!"]];
      return self.$get_torg_eternity_table_result(value, success_table);
    }, $TorgEternity_get_torg_eternity_success_level$19.$$arity = 1);
    
    Opal.def(self, '$get_torg_eternity_damage_result', $TorgEternity_get_torg_eternity_damage_result$20 = function $$get_torg_eternity_damage_result(value) {
      var self = this, damage_table = nil;

      
      damage_table = [[-50, "\u30CE\u30FC\u30C0\u30E1\u30FC\u30B8"], [-5, "1\u30B7\u30E7\u30C3\u30AF"], [0, "2\u30B7\u30E7\u30C3\u30AF"], [5, "1\u30EC\u30D9\u30EB\u8CA0\u50B7 + 2\u30B7\u30E7\u30C3\u30AF"], [10, "2\u30EC\u30D9\u30EB\u8CA0\u50B7 + 4\u30B7\u30E7\u30C3\u30AF"], [15, "3\u30EC\u30D9\u30EB\u8CA0\u50B7 + 6\u30B7\u30E7\u30C3\u30AF"], [20, "4\u30EC\u30D9\u30EB\u8CA0\u50B7 + 8\u30B7\u30E7\u30C3\u30AF"], [25, "5\u30EC\u30D9\u30EB\u8CA0\u50B7 + 10\u30B7\u30E7\u30C3\u30AF"], [30, "6\u30EC\u30D9\u30EB\u8CA0\u50B7 + 12\u30B7\u30E7\u30C3\u30AF"], [35, "7\u30EC\u30D9\u30EB\u8CA0\u50B7 + 14\u30B7\u30E7\u30C3\u30AF"], [40, "8\u30EC\u30D9\u30EB\u8CA0\u50B7 + 16\u30B7\u30E7\u30C3\u30AF"], [45, "9\u30EC\u30D9\u30EB\u8CA0\u50B7 + 18\u30B7\u30E7\u30C3\u30AF"], [50, "10\u30EC\u30D9\u30EB\u8CA0\u50B7 + 20\u30B7\u30E7\u30C3\u30AF"]];
      return self.$get_torg_eternity_table_result(value, damage_table);
    }, $TorgEternity_get_torg_eternity_damage_result$20.$$arity = 1);
    return (Opal.def(self, '$get_torg_eternity_bonus', $TorgEternity_get_torg_eternity_bonus$21 = function $$get_torg_eternity_bonus(value) {
      var self = this, bonus_table = nil, bonus = nil, over_value_bonus = nil;

      
      bonus_table = [[1, -10], [2, -8], [3, -6], [5, -4], [7, -2], [9, -1], [11, 0], [13, 1], [15, 2], [16, 3], [17, 4], [18, 5], [19, 6], [20, 7]];
      bonus = self.$get_torg_eternity_table_result(value, bonus_table);
      if ($truthy($rb_gt(value, 20))) {
        
        over_value_bonus = $rb_plus($rb_divide($rb_minus(value, 21), 5).$to_i(), 1);
        bonus = $rb_plus(bonus, over_value_bonus);};
      return bonus;
    }, $TorgEternity_get_torg_eternity_bonus$21.$$arity = 1), nil) && 'get_torg_eternity_bonus';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
