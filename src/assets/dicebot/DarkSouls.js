/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$setPrefixes', '$match', '$upcase', '$to_i', '$[]', '$!', '$nil?', '$getValue', '$checkRoll', '$roll', '$+', '$getValueText', '$==', '$collect', '$split', '$count', '$>', '$*', '$>=', '$to_s', '$parren_killer', '$<']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'DarkSouls');

    var $nesting = [self].concat($parent_nesting), $DarkSouls_rollDiceCommand$1, $DarkSouls_checkRoll$2, $DarkSouls_getValue$5, $DarkSouls_getValueText$6;

    
    Opal.const_set($nesting[0], 'ID', "DarkSouls");
    Opal.const_set($nesting[0], 'NAME', "\u30C0\u30FC\u30AF\u30BD\u30A6\u30EBTRPG");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u305F\u3042\u304F\u305D\u3046\u308BTRPG");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u30FB\u884C\u70BA\u5224\u5B9A\uFF1A[n]DS[a\u00B1b][@t]\u3000\u3000[]\u5185\u306E\u30B3\u30DE\u30F3\u30C9\u306F\u7701\u7565\u53EF\n" + "\u30FB\u80FD\u52D5\u5224\u5B9A\uFF1A[n]ADS[a\u00B1b][@t]\u3000\u3000FP\u6D88\u8CBB\u3092\u5224\u5B9A\n" + "\u3000n\uFF1A\u30C0\u30A4\u30B9\u6570\u3002\u7701\u7565\u6642\u306F\u300C2\u300D\n" + "\u3000a\u00B1b\uFF1A\u4FEE\u6B63\u5024\u3002\u300C1+2-1\u300D\u306E\u3088\u3046\u306B\u3001\u8907\u6570\u5B9A\u53EF\n" + "\u3000@t\uFF1A\u76EE\u6A19\u5024\u3002\u7701\u7565\u6642\u306F\u9054\u6210\u5024\u3092\u3001\u6307\u5B9A\u6642\u306F\u5224\u5B9A\u306E\u6B63\u5426\u3092\u8868\u793A\n" + "\u4F8B\uFF09DS \u2192 2D6\u306E\u9054\u6210\u5024\u3092\u8868\u793A\n" + "\u3000\u30001DS \u2192 1D6\u306E\u9054\u6210\u5024\u3092\u8868\u793A\n" + "\u3000\u3000ADS+2-2 \u2192 2D6+2\u306E\u9054\u6210\u5024\u3092\u8868\u793A\uFF08\u80FD\u52D5\u5224\u5B9A\uFF09\n" + "\u3000\u3000DS+2@10 \u2192 2D6+2\u3067\u76EE\u6A19\u502410\u306E\u5224\u5B9A\n");
    self.$setPrefixes(["(\\d+)?(A)?DS([-+\\d]*)(@\\d+)?"]);
    
    Opal.def(self, '$rollDiceCommand', $DarkSouls_rollDiceCommand$1 = function $$rollDiceCommand(command) {
      var $a, self = this, m = nil, diceCount = nil, isActive = nil, modify = nil, target = nil, output = nil;

      
      if ($truthy((m = /(\d+)?(A)?DS([-+\d]*)(@(\d+))?$/i.$match(command.$upcase())))) {
      } else {
        return nil
      };
      diceCount = ($truthy($a = m['$[]'](1)) ? $a : 2).$to_i();
      isActive = m['$[]'](2)['$nil?']()['$!']();
      modify = self.$getValue(m['$[]'](3));
      target = ($truthy($a = m['$[]'](5)) ? $a : 0).$to_i();
      output = self.$checkRoll(diceCount, isActive, modify, target);
      return output;
    }, $DarkSouls_rollDiceCommand$1.$$arity = 1);
    
    Opal.def(self, '$checkRoll', $DarkSouls_checkRoll$2 = function $$checkRoll(diceCount, isActive, modify, target) {
      var $a, $b, $$3, $$4, self = this, dice = nil, diceText = nil, successValue = nil, modifyText = nil, targetText = nil, diceArray = nil, focusDamage = nil, focusText = nil, result = nil;

      
      $b = self.$roll(diceCount, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      successValue = $rb_plus(dice, modify);
      modifyText = self.$getValueText(modify);
      targetText = (function() {if (target['$=='](0)) {
        return ""
      } else {
        return "" + ">=" + (target)
      }; return nil; })();
      if ($truthy(isActive)) {
        
        diceArray = $send(diceText.$split(/,/), 'collect', [], ($$3 = function(i){var self = $$3.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return i.$to_i();}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        focusDamage = $send(diceArray, 'count', [], ($$4 = function(i){var self = $$4.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return i['$=='](1);}, $$4.$$s = self, $$4.$$arity = 1, $$4));
        if ($truthy($rb_gt(focusDamage, 0))) {
          
          focusText = $rb_times("\u25A0", focusDamage);
          focusText = "" + "\uFF08FP" + (focusText) + "\u6D88\u8CBB\uFF09";};};
      result = "" + "(" + (diceCount) + "D6" + (modifyText) + (targetText) + ")";
      result = $rb_plus(result, "" + " \uFF1E " + (dice) + "(" + (diceText) + ")" + (modifyText));
      result = $rb_plus(result, "" + " \uFF1E " + (successValue) + (targetText));
      if ($truthy($rb_gt(target, 0))) {
        if ($truthy($rb_ge(successValue, target))) {
          result = $rb_plus(result, " \uFF1E \u3010\u6210\u529F\u3011")
        } else {
          result = $rb_plus(result, " \uFF1E \u3010\u5931\u6557\u3011")
        }};
      result = $rb_plus(result, focusText.$to_s());
      return result;
    }, $DarkSouls_checkRoll$2.$$arity = 4);
    
    Opal.def(self, '$getValue', $DarkSouls_getValue$5 = function $$getValue(text) {
      var $a, self = this;

      
      text = ($truthy($a = text) ? $a : "");
      return self.$parren_killer("" + "(0" + (text) + ")").$to_i();
    }, $DarkSouls_getValue$5.$$arity = 1);
    return (Opal.def(self, '$getValueText', $DarkSouls_getValueText$6 = function $$getValueText(value) {
      var self = this;

      
      if (value['$=='](0)) {
        return ""};
      if ($truthy($rb_lt(value, 0))) {
        return value.$to_s()};
      return "" + "+" + (value);
    }, $DarkSouls_getValueText$6.$$arity = 1), nil) && 'getValueText';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
