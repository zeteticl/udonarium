/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$==', '$getCheckResult', '$>', '$getFailResult', '$getSuccessResult', '$%', '$===', '$to_i', '$last_match', '$getCheckShockResult', '$getStrikeLocationHuman', '$roll', '$<=', '$getStrikeLocationHumanUpperTable', '$getStrikeLocationHumanDownTable', '$getStrikeLocationHumanNormalTable', '$raise', '$get_table_by_number', '$getLocationSide', '$getFaceLocation', '$debug', '$odd?', '$sub']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HarnMaster');

    var $nesting = [self].concat($parent_nesting), $HarnMaster_check_1D100$1, $HarnMaster_getCheckResult$2, $HarnMaster_getFailResult$3, $HarnMaster_getSuccessResult$4, $HarnMaster_rollDiceCommand$5, $HarnMaster_getCheckShockResult$6, $HarnMaster_getStrikeLocationHuman$7, $HarnMaster_getLocationSide$8, $HarnMaster_getFaceLocation$9, $HarnMaster_getStrikeLocationHumanUpperTable$10, $HarnMaster_getStrikeLocationHumanNormalTable$11, $HarnMaster_getStrikeLocationHumanDownTable$12;

    
    Opal.const_set($nesting[0], 'ID', "HarnMaster");
    Opal.const_set($nesting[0], 'NAME', "\u30CF\u30FC\u30F3\u30DE\u30B9\u30BF\u30FC");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u306F\u3042\u3093\u307E\u3059\u305F\u3042");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u30FB\u5224\u5B9A\n" + "\u30001D100<=XX \u306E\u5224\u5B9A\u6642\u306B\u81F4\u547D\u7684\u5931\u6557\u30FB\u6C7A\u5B9A\u7684\u6210\u529F\u3092\u5224\u5B9A\n" + "\u30FB\u30B7\u30E7\u30C3\u30AF\u5224\u5B9A\uFF08SHKx\uFF09\n" + "\u3000\u4F8B\uFF09SHK13,3\n" + "\u30FB\u4EBA\u578B\u7528\u3000\u4E2D\u6BB5\u547D\u4E2D\u90E8\u4F4D\u8868 (SLH)\uFF0F\u4E0A\u6BB5\u547D\u4E2D\u90E8\u4F4D (SLHU)\uFF0F\u4E0A\u6BB5\u547D\u4E2D\u90E8\u4F4D (SLHD)\n");
    self.$setPrefixes(["SHK\\d+.*", "SLH", "SLHU", "SLHD"]);
    
    Opal.def(self, '$check_1D100', $HarnMaster_check_1D100$1 = function $$check_1D100(total, _dice_total, cmp_op, target) {
      var self = this, result = nil;

      
      if (cmp_op['$==']("<=")) {
      } else {
        return ""
      };
      result = self.$getCheckResult(total, target);
      return "" + "\uFF1E " + (result);
    }, $HarnMaster_check_1D100$1.$$arity = 4);
    
    Opal.def(self, '$getCheckResult', $HarnMaster_getCheckResult$2 = function $$getCheckResult(total, diff) {
      var self = this;

      
      if ($truthy($rb_gt(total, diff))) {
        return self.$getFailResult(total)};
      return self.$getSuccessResult(total);
    }, $HarnMaster_getCheckResult$2.$$arity = 2);
    
    Opal.def(self, '$getFailResult', $HarnMaster_getFailResult$3 = function $$getFailResult(total) {
      var self = this;

      
      if (total['$%'](5)['$=='](0)) {
        return "\u81F4\u547D\u7684\u5931\u6557"};
      return "\u5931\u6557";
    }, $HarnMaster_getFailResult$3.$$arity = 1);
    
    Opal.def(self, '$getSuccessResult', $HarnMaster_getSuccessResult$4 = function $$getSuccessResult(total) {
      var self = this;

      
      if (total['$%'](5)['$=='](0)) {
        return "\u6C7A\u5B9A\u7684\u6210\u529F"};
      return "\u6210\u529F";
    }, $HarnMaster_getSuccessResult$4.$$arity = 1);
    
    Opal.def(self, '$rollDiceCommand', $HarnMaster_rollDiceCommand$5 = function $$rollDiceCommand(command) {
      var self = this, result = nil, $case = nil, toughness = nil, damage = nil, type = nil;

      
      result = nil;
      $case = command;
      if (/^SHK(\d*),(\d+)/i['$===']($case)) {
      toughness = $$($nesting, 'Regexp').$last_match(1).$to_i();
      damage = $$($nesting, 'Regexp').$last_match(2).$to_i();
      result = self.$getCheckShockResult(damage, toughness);}
      else if (/SLH(U|D)?/i['$===']($case)) {
      type = $$($nesting, 'Regexp').$last_match(1);
      result = self.$getStrikeLocationHuman(type);}
      else {result = nil};
      return result;
    }, $HarnMaster_rollDiceCommand$5.$$arity = 1);
    
    Opal.def(self, '$getCheckShockResult', $HarnMaster_getCheckShockResult$6 = function $$getCheckShockResult(damage, toughness) {
      var $a, $b, self = this, dice = nil, diceText = nil, result = nil, text = nil;

      
      $b = self.$roll(damage, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      result = (function() {if ($truthy($rb_le(dice, toughness))) {
        return "\u6210\u529F"
      } else {
        return "\u5931\u6557"
      }; return nil; })();
      text = "" + "\u30B7\u30E7\u30C3\u30AF\u5224\u5B9A(\u30C0\u30E1\u30FC\u30B8:" + (damage) + ", \u8010\u4E45\u529B:" + (toughness) + ") \uFF1E (" + (dice) + "[" + (diceText) + "]) \uFF1E " + (result);
      return text;
    }, $HarnMaster_getCheckShockResult$6.$$arity = 2);
    
    Opal.def(self, '$getStrikeLocationHuman', $HarnMaster_getStrikeLocationHuman$7 = function $$getStrikeLocationHuman(type) {
      var $a, $b, self = this, typeName = nil, table = nil, $case = nil, number = nil, part = nil, result = nil;

      
      typeName = "";
      table = nil;
      $case = type;
      if ("U"['$===']($case)) {
      typeName = "\u547D\u4E2D\u90E8\u4F4D(\u4EBA\u578B \u4E0A\u6BB5)";
      table = self.$getStrikeLocationHumanUpperTable();}
      else if ("D"['$===']($case)) {
      typeName = "\u547D\u4E2D\u90E8\u4F4D(\u4EBA\u578B \u4E0B\u6BB5)";
      table = self.$getStrikeLocationHumanDownTable();}
      else if (nil['$===']($case)) {
      typeName = "\u547D\u4E2D\u90E8\u4F4D(\u4EBA\u578B \u4E2D\u6BB5)";
      table = self.$getStrikeLocationHumanNormalTable();}
      else {self.$raise("" + "unknow atak type " + (type))};
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (number = ($a[0] == null ? nil : $a[0])), $b;
      part = self.$get_table_by_number(number, table);
      part = self.$getLocationSide(part, number);
      part = self.$getFaceLocation(part);
      result = "" + (typeName) + " \uFF1E (" + (number) + ")" + (part);
      return result;
    }, $HarnMaster_getStrikeLocationHuman$7.$$arity = 1);
    
    Opal.def(self, '$getLocationSide', $HarnMaster_getLocationSide$8 = function $$getLocationSide(part, number) {
      var self = this, side = nil;

      
      if ($truthy(/^\*/['$==='](part))) {
      } else {
        
        self.$debug("part has NO side", part);
        return part;
      };
      self.$debug("part has side", part);
      side = (function() {if ($truthy(number['$odd?']())) {
        return "\u5DE6"
      } else {
        return "\u53F3"
      }; return nil; })();
      return part.$sub(/\*/, side);
    }, $HarnMaster_getLocationSide$8.$$arity = 2);
    
    Opal.def(self, '$getFaceLocation', $HarnMaster_getFaceLocation$9 = function $$getFaceLocation(part) {
      var $a, $b, self = this, table = nil, number = nil, faceLocation = nil, result = nil;

      
      self.$debug("getFaceLocation part", part);
      if ($truthy(/\+$/['$==='](part))) {
      } else {
        
        self.$debug("is NOT Face");
        return part;
      };
      self.$debug("is Face");
      table = [[15, "\u984E"], [30, "*\u76EE"], [64, "*\u982C"], [80, "\u9F3B"], [90, "*\u8033"], [100, "\u53E3"]];
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (number = ($a[0] == null ? nil : $a[0])), $b;
      faceLocation = self.$get_table_by_number(number, table);
      self.$debug("faceLocation", faceLocation);
      self.$debug("number", number);
      faceLocation = self.$getLocationSide(faceLocation, number);
      result = part.$sub(/\+$/, "" + " \uFF1E (" + (number) + ")" + (faceLocation));
      return result;
    }, $HarnMaster_getFaceLocation$9.$$arity = 1);
    
    Opal.def(self, '$getStrikeLocationHumanUpperTable', $HarnMaster_getStrikeLocationHumanUpperTable$10 = function $$getStrikeLocationHumanUpperTable() {
      var self = this, table = nil;

      
      table = [[15, "\u982D\u90E8"], [30, "\u9854+"], [45, "\u9996"], [57, "*\u80A9"], [69, "*\u4E0A\u8155"], [73, "*\u8098"], [81, "*\u524D\u8155"], [85, "*\u624B"], [95, "\u80F8\u90E8"], [100, "\u8179\u90E8"]];
      return table;
    }, $HarnMaster_getStrikeLocationHumanUpperTable$10.$$arity = 0);
    
    Opal.def(self, '$getStrikeLocationHumanNormalTable', $HarnMaster_getStrikeLocationHumanNormalTable$11 = function $$getStrikeLocationHumanNormalTable() {
      var self = this, table = nil;

      
      table = [[5, "\u982D\u90E8"], [10, "\u9854+"], [15, "\u9996"], [27, "*\u80A9"], [33, "*\u4E0A\u8155"], [35, "*\u8098"], [39, "*\u524D\u8155"], [43, "*\u624B"], [60, "\u80F8\u90E8"], [70, "\u8179\u90E8"], [74, "\u80A1\u9593"], [80, "*\u81C0\u90E8"], [88, "*\u817F"], [90, "*\u819D"], [96, "*\u811B"], [100, "*\u8DB3"]];
      return table;
    }, $HarnMaster_getStrikeLocationHumanNormalTable$11.$$arity = 0);
    return (Opal.def(self, '$getStrikeLocationHumanDownTable', $HarnMaster_getStrikeLocationHumanDownTable$12 = function $$getStrikeLocationHumanDownTable() {
      var self = this, table = nil;

      
      table = [[6, "*\u524D\u8155"], [12, "*\u624B"], [19, "\u80F8\u90E8"], [29, "\u8179\u90E8"], [35, "\u80A1\u9593"], [49, "*\u81C0\u90E8"], [70, "*\u817F"], [78, "*\u819D"], [92, "*\u811B"], [100, "*\u8DB3"]];
      return table;
    }, $HarnMaster_getStrikeLocationHumanDownTable$12.$$arity = 0), nil) && 'getStrikeLocationHumanDownTable';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
