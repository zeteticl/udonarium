/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$===', '$to_i', '$last_match', '$==', '$>', '$checkRoll', '$roll', '$collect', '$split', '$count', '$<=', '$+', '$empty?', '$!=', '$*']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Airgetlamh');

    var $nesting = [self].concat($parent_nesting), $Airgetlamh_initialize$1, $Airgetlamh_rollDiceCommand$2, $Airgetlamh_checkRoll$3;

    self.$$prototype.sortType = nil;
    
    Opal.const_set($nesting[0], 'ID', "Airgetlamh");
    Opal.const_set($nesting[0], 'NAME', "\u6731\u306E\u5B64\u5854\u306E\u30A8\u30A2\u30B2\u30C8\u30E9\u30E0");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u3042\u3051\u306E\u3053\u3068\u3046\u306E\u3048\u3042\u3051\u3068\u3089\u3080");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u3010Reg2.0\u300ETHE ANSWERER\u300F\uFF5E\u3011\n" + "\u30FB\u8ABF\u67FB\u5224\u5B9A\uFF08\u6210\u529F\u6570\u3092\u8868\u793A\uFF09\uFF1A[n]AA[m]\n" + "\u30FB\u547D\u4E2D\u5224\u5B9A\uFF08\u30C0\u30E1\u30FC\u30B8\u8868\u793A\uFF09\uFF1A[n]AA[m]*p[+t][Cx]\n" + "\u3010\uFF5EReg1.1\u300E\u6607\u83EF\u300F\u3011\n" + "\u30FB\u8ABF\u67FB\u5224\u5B9A\uFF08\u6210\u529F\u6570\u3092\u8868\u793A\uFF09\uFF1A[n]AL[m]\n" + "\u30FB\u547D\u4E2D\u5224\u5B9A\uFF08\u30C0\u30E1\u30FC\u30B8\u8868\u793A\uFF09\uFF1A[n]AL[m]*p\n" + "----------------------------------------\n" + "[]\u5185\u306E\u30B3\u30DE\u30F3\u30C9\u306F\u7701\u7565\u53EF\u80FD\u3002\n" + "\n" + "\u300Cn\u300D\u3067\u30C0\u30A4\u30B9\u6570\uFF08\u653B\u6483\u56DE\u6570\uFF09\u3092\u6307\u5B9A\u3002\u7701\u7565\u6642\u306F\u300C2\u300D\u3002\n" + "\u300Cm\u300D\u3067\u76EE\u6A19\u5024\u3092\u6307\u5B9A\u3002\u7701\u7565\u6642\u306F\u300C6\u300D\u3002\n" + "\u300Cp\u300D\u3067\u5A01\u529B\u3092\u6307\u5B9A\u3002\u300C*\u300D\u306F\u300Cx\u300D\u3067\u4EE3\u7528\u53EF\u3002\n" + "\u300C+t\u300D\u3067\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u30C8\u30EA\u30AC\u30FC\u3092\u6307\u5B9A\u3002\u7701\u7565\u53EF\u3002\n" + "\u300CCx\u300D\u3067\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u3092\u6307\u5B9A\u3002\u7701\u7565\u6642\u306F\u300C1\u300D\u3001\u6700\u5927\u5024\u306F\u300C3\u300D\u3001\u300C0\u300D\u3067\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u7121\u3057\u3002\n" + "\n" + "\u653B\u6483\u529B\u6307\u5B9A\u3067\u547D\u4E2D\u5224\u5B9A\u3068\u306A\u308A\u3001\u6210\u529F\u6570\u3067\u306F\u306A\u304F\u3001\u30C0\u30E1\u30FC\u30B8\u3092\u7D50\u679C\u8868\u793A\u3057\u307E\u3059\u3002\n" + "\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u30D2\u30C3\u30C8\u306E\u5206\u3060\u3051\u3001\u81EA\u52D5\u3067\u632F\u308A\u8DB3\u3057\u51E6\u7406\u3092\u884C\u3044\u307E\u3059\u3002\n" + "\uFF08AL\u30B3\u30DE\u30F3\u30C9\u3067\u306F\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u51E6\u7406\u3092\u884C\u3044\u307E\u305B\u3093\uFF09\n" + "\n" + "\u3010\u66F8\u5F0F\u4F8B\u3011\n" + "\u30FBAL \u2192 2d10\u3067\u76EE\u6A19\u50246\u306E\u8ABF\u67FB\u5224\u5B9A\u3002\n" + "\u30FB5AA7*12 \u2192 5d10\u3067\u76EE\u6A19\u50247\u3001\u5A01\u529B12\u306E\u547D\u4E2D\u5224\u5B9A\u3002\n" + "\u30FBAA7x28+5 \u2192 2d10\u3067\u76EE\u6A19\u50247\u3001\u5A01\u529B28\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u30C8\u30EA\u30AC\u30FC5\u306E\u547D\u4E2D\u5224\u5B9A\u3002\n" + "\u30FB9aa5*10C2 \u2192 9d10\u3067\u76EE\u6A19\u50245\u3001\u5A01\u529B10\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u50242\u306E\u547D\u4E2D\u5224\u5B9A\u3002\n" + "\u30FB15AAx4c0 \u2192 15d10\u3067\u76EE\u6A19\u50246\u3001\u5A01\u529B4\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u7121\u3057\u306E\u547D\u4E2D\u5224\u5B9A\u3002\n");
    self.$setPrefixes([["(\\d+)?A(A|L)(\\d+)?((x|\\*)(\\d+)(\\+(\\d+))?)?(C(\\d+))?"]]);
    
    Opal.def(self, '$initialize', $Airgetlamh_initialize$1 = function $$initialize() {
      var $iter = $Airgetlamh_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Airgetlamh_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $Airgetlamh_initialize$1, false), $zuper, $iter);
      return (self.sortType = 1);
    }, $Airgetlamh_initialize$1.$$arity = 0);
    
    Opal.def(self, '$rollDiceCommand', $Airgetlamh_rollDiceCommand$2 = function $$rollDiceCommand(command) {
      var $a, self = this, diceCount = nil, target = nil, damage = nil, criticalTrigger = nil, criticalNumber = nil;

      
      if ($truthy(/(\d+)?A(A|L)(\d+)?((x|\*)(\d+)(\+(\d+))?)?(C(\d+))?$/i['$==='](command))) {
        
        diceCount = ($truthy($a = $$($nesting, 'Regexp').$last_match(1)) ? $a : 2).$to_i();
        target = ($truthy($a = $$($nesting, 'Regexp').$last_match(3)) ? $a : 6).$to_i();
        damage = ($truthy($a = $$($nesting, 'Regexp').$last_match(6)) ? $a : 0).$to_i();
        if ($$($nesting, 'Regexp').$last_match(2)['$==']("L")) {
          
          criticalTrigger = 0;
          criticalNumber = 0;
        } else {
          
          criticalTrigger = ($truthy($a = $$($nesting, 'Regexp').$last_match(8)) ? $a : 0).$to_i();
          criticalNumber = ($truthy($a = $$($nesting, 'Regexp').$last_match(10)) ? $a : 1).$to_i();
        };
        if ($truthy($rb_gt(criticalNumber, 4))) {
          criticalNumber = 3};
        return self.$checkRoll(diceCount, target, damage, criticalTrigger, criticalNumber);};
      return nil;
    }, $Airgetlamh_rollDiceCommand$2.$$arity = 1);
    return (Opal.def(self, '$checkRoll', $Airgetlamh_checkRoll$3 = function $$checkRoll(diceCount, target, damage, criticalTrigger, criticalNumber) {
      var $a, $b, $c, $$4, $$5, $$6, self = this, totalSuccessCount = nil, totalCriticalCount = nil, text = nil, rollCount = nil, _dice = nil, diceText = nil, diceArray = nil, successCount = nil, criticalCount = nil, result = nil, isDamage = nil, totalDamage = nil;

      
      totalSuccessCount = 0;
      totalCriticalCount = 0;
      text = "";
      rollCount = diceCount;
      while ($truthy($rb_gt(rollCount, 0))) {
        
        $c = self.$roll(rollCount, 10, self.sortType), $b = Opal.to_ary($c), (_dice = ($b[0] == null ? nil : $b[0])), (diceText = ($b[1] == null ? nil : $b[1])), $c;
        diceArray = $send(diceText.$split(/,/), 'collect', [], ($$4 = function(i){var self = $$4.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return i.$to_i();}, $$4.$$s = self, $$4.$$arity = 1, $$4));
        successCount = $send(diceArray, 'count', [], ($$5 = function(i){var self = $$5.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return $rb_le(i, target);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
        criticalCount = $send(diceArray, 'count', [], ($$6 = function(i){var self = $$6.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return $rb_le(i, criticalNumber);}, $$6.$$s = self, $$6.$$arity = 1, $$6));
        totalSuccessCount = $rb_plus(totalSuccessCount, successCount);
        totalCriticalCount = $rb_plus(totalCriticalCount, criticalCount);
        if ($truthy(text['$empty?']())) {
        } else {
          text = $rb_plus(text, "+")
        };
        text = $rb_plus(text, "" + (successCount) + "[" + (diceText) + "]");
        rollCount = criticalCount;
      };
      result = "";
      isDamage = damage['$!='](0);
      if ($truthy(isDamage)) {
        
        totalDamage = $rb_plus($rb_times(totalSuccessCount, damage), $rb_times(totalCriticalCount, criticalTrigger));
        result = $rb_plus(result, "" + "(" + (diceCount) + "D10<=" + (target) + ") \uFF1E " + (text) + " \uFF1E Hits\uFF1A" + (totalSuccessCount) + "*" + (damage));
        if ($truthy($rb_gt(criticalTrigger, 0))) {
          result = $rb_plus(result, "" + " + Trigger\uFF1A" + (totalCriticalCount) + "*" + (criticalTrigger))};
        result = $rb_plus(result, "" + " \uFF1E " + (totalDamage) + "\u30C0\u30E1\u30FC\u30B8");
      } else {
        result = $rb_plus(result, "" + "(" + (diceCount) + "D10<=" + (target) + ") \uFF1E " + (text) + " \uFF1E \u6210\u529F\u6570\uFF1A" + (totalSuccessCount))
      };
      if ($truthy($rb_gt(totalCriticalCount, 0))) {
        result = $rb_plus(result, "" + " / " + (totalCriticalCount) + "\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB")};
      return result;
    }, $Airgetlamh_checkRoll$3.$$arity = 5), nil) && 'checkRoll';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
