/* Generated by Opal 1.0.3 */


Opal.modules["utils/modifier_formatter"] = function(Opal) {


  function $rb_gt(lhs, rhs) {


    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);


  }


  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;





  Opal.add_stubs(['$==', '$>', '$to_s']);


  return (function($base, $parent_nesting) {


    var self = $module($base, 'ModifierFormatter');





    var $nesting = [self].concat($parent_nesting), $ModifierFormatter_format_modifier$1;





    


    Opal.def(self, '$format_modifier', $ModifierFormatter_format_modifier$1 = function $$format_modifier(modifier) {


      var self = this;





      if (modifier['$=='](0)) {


        return ""


      } else if ($truthy($rb_gt(modifier, 0))) {


        return "" + "+" + (modifier)


      } else {


        return modifier.$to_s()


      }


    }, $ModifierFormatter_format_modifier$1.$$arity = 1)


  })($nesting[0], $nesting)


};





/* Generated by Opal 1.0.3 */


(function(Opal) {


  function $rb_ge(lhs, rhs) {


    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);


  }


  function $rb_le(lhs, rhs) {


    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);


  }


  function $rb_minus(lhs, rhs) {


    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);


  }


  function $rb_gt(lhs, rhs) {


    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);


  }


  function $rb_lt(lhs, rhs) {


    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);


  }


  function $rb_plus(lhs, rhs) {


    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);


  }


  function $rb_times(lhs, rhs) {


    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);


  }


  function $rb_divide(lhs, rhs) {


    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);


  }


  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars, $hash2 = Opal.hash2;





  Opal.add_stubs(['$require', '$include', '$setPrefixes', '$freeze', '$match', '$gsub', '$last_match', '$>=', '$<=', '$!=', '$==', '$rating', '$private', '$debug', '$getRatingCommandStrings', '$[]', '$include?', '$getRateUpFromString', '$getCriticalFromString', '$getDiceChangesFromString', '$getKeyAndAddValueFromString', '$=~', '$to_i', '$getSW2_0_RatingTable', '$-', '$length', '$>', '$getNewRates', '$<', '$+', '$getAdditionalString', '$to_s', '$loop', '$rollDice', '$<<', '$getAdditionalDiceValue', '$min', '$*', '$getResultText', '$parren_killer', '$each', '$split', '$push', '$[]=', '$roll', '$join', '$size', '$format_modifier', '$first', '$ceil', '$/', '$===']);


  


  self.$require("utils/modifier_formatter");


  return (function($base, $super, $parent_nesting) {


    var self = $klass($base, $super, 'SwordWorld');





    var $nesting = [self].concat($parent_nesting), $SwordWorld_initialize$1, $SwordWorld_changeText$2, $SwordWorld_getRatingCommandStrings$7, $SwordWorld_check_2D6$8, $SwordWorld_rollDiceCommand$9, $SwordWorld_rating$10, $SwordWorld_getAdditionalString$12, $SwordWorld_getAdditionalDiceValue$13, $SwordWorld_getCriticalFromString$14, $SwordWorld_getDiceChangesFromString$15, $SwordWorld_getRateUpFromString$16, $SwordWorld_getKeyAndAddValueFromString$17, $SwordWorld_getSW2_0_RatingTable$18, $SwordWorld_getNewRates$19, $SwordWorld_rollDice$21, $SwordWorld_getResultText$22, $SwordWorld_setRatingTable$23;





    self.$$prototype.rating_table = nil;


    


    self.$include($$($nesting, 'ModifierFormatter'));


    Opal.const_set($nesting[0], 'ID', "SwordWorld");


    Opal.const_set($nesting[0], 'NAME', "\u30BD\u30FC\u30C9\u30EF\u30FC\u30EB\u30C9");


    Opal.const_set($nesting[0], 'SORT_KEY', "\u305D\u304A\u3068\u308F\u3042\u308B\u3068");


    Opal.const_set($nesting[0], 'HELP_MESSAGE', "\u30FBSW\u3000\u30EC\u30FC\u30C6\u30A3\u30F3\u30B0\u8868\u3000(Kx[c]+m$f) (x:\u30AD\u30FC, c:\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024, m:\u30DC\u30FC\u30CA\u30B9, f:\u51FA\u76EE\u4FEE\u6B63)\n");


    self.$setPrefixes(["H?K\\d+.*"]);


    


    Opal.def(self, '$initialize', $SwordWorld_initialize$1 = function $$initialize() {


      var $iter = $SwordWorld_initialize$1.$$p, $yield = $iter || nil, self = this, rating_table = nil;





      if ($iter) $SwordWorld_initialize$1.$$p = null;


      


      rating_table = 0;


      $send(self, Opal.find_super_dispatcher(self, 'initialize', $SwordWorld_initialize$1, false), [], null);


      return (self.rating_table = rating_table);


    }, $SwordWorld_initialize$1.$$arity = 0);


    Opal.const_set($nesting[0], 'RATING_TABLE_RE_FOR_CHANGE_TEXT', /^S?H?K\d+/i.$freeze());


    


    Opal.def(self, '$changeText', $SwordWorld_changeText$2 = function $$changeText(string) {


      var $$3, $$4, $$5, $$6, self = this;





      


      if ($truthy($$($nesting, 'RATING_TABLE_RE_FOR_CHANGE_TEXT').$match(string))) {


      } else {


        return string


      };


      return $send($send($send($send(string, 'gsub', [/\[(\d+)\]/], ($$3 = function(){var self = $$3.$$s || this;





      return "" + "c[" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$3.$$s = self, $$3.$$arity = 0, $$3)), 'gsub', [/@(\d+)/], ($$4 = function(){var self = $$4.$$s || this;





      return "" + "c[" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$4.$$s = self, $$4.$$arity = 0, $$4)), 'gsub', [/\$([-+]?\d+)/], ($$5 = function(){var self = $$5.$$s || this;





      return "" + "m[" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$5.$$s = self, $$5.$$arity = 0, $$5)), 'gsub', [/r([-+]?\d+)/i], ($$6 = function(){var self = $$6.$$s || this;





      return "" + "r[" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$6.$$s = self, $$6.$$arity = 0, $$6));


    }, $SwordWorld_changeText$2.$$arity = 1);


    


    Opal.def(self, '$getRatingCommandStrings', $SwordWorld_getRatingCommandStrings$7 = function $$getRatingCommandStrings() {


      var self = this;





      return "cmCM"


    }, $SwordWorld_getRatingCommandStrings$7.$$arity = 0);


    


    Opal.def(self, '$check_2D6', $SwordWorld_check_2D6$8 = function $$check_2D6(total, dice_total, _dice_list, cmp_op, target) {


      var $a, self = this;





      if ($truthy($rb_ge(dice_total, 12))) {


        return " \uFF1E \u81EA\u52D5\u7684\u6210\u529F"


      } else if ($truthy($rb_le(dice_total, 2))) {


        return " \uFF1E \u81EA\u52D5\u7684\u5931\u6557"


      } else if ($truthy(($truthy($a = cmp_op['$!='](">=")) ? $a : target['$==']("?")))) {


        return ""


      } else if ($truthy($rb_ge(total, target))) {


        return " \uFF1E \u6210\u529F"


      } else {


        return " \uFF1E \u5931\u6557"


      }


    }, $SwordWorld_check_2D6$8.$$arity = 5);


    


    Opal.def(self, '$rollDiceCommand', $SwordWorld_rollDiceCommand$9 = function $$rollDiceCommand(command) {


      var self = this;





      return self.$rating(command)


    }, $SwordWorld_rollDiceCommand$9.$$arity = 1);


    self.$private();


    


    Opal.def(self, '$rating', $SwordWorld_rating$10 = function $$rating(string) {


      var $a, $b, $$11, self = this, commands = nil, m = nil, half = nil, rateUp = nil, crit = nil, firstDiceChanteTo = nil, firstDiceChangeModify = nil, key = nil, addValue = nil, rate_sw2_0 = nil, keyMax = nil, newRates = nil, output = nil, values = nil, diceResultTotals = nil, diceResults = nil, rateResults = nil, dice = nil, diceOnlyTotal = nil, totalValue = nil, round = nil, limitLength = nil;


      if ($gvars.SEND_STR_MAX == null) $gvars.SEND_STR_MAX = nil;





      


      self.$debug("rating string", string);


      commands = self.$getRatingCommandStrings();


      m = new RegExp("" + "^S?(H?K[\\d\\+\\-]+([" + (commands) + "]\\[([\\d\\+\\-]+)\\])*([\\d\\+\\-]*)([CMR]\\[([\\d\\+\\-]+)\\]|GF|H)*)", 'i').$match(string);


      if ($truthy(m)) {


      } else {


        


        self.$debug("not matched");


        return "1";


      };


      string = m['$[]'](1);


      half = string['$include?']("H");


      $b = self.$getRateUpFromString(string), $a = Opal.to_ary($b), (rateUp = ($a[0] == null ? nil : $a[0])), (string = ($a[1] == null ? nil : $a[1])), $b;


      $b = self.$getCriticalFromString(string, half), $a = Opal.to_ary($b), (crit = ($a[0] == null ? nil : $a[0])), (string = ($a[1] == null ? nil : $a[1])), $b;


      $b = self.$getDiceChangesFromString(string), $a = Opal.to_ary($b), (firstDiceChanteTo = ($a[0] == null ? nil : $a[0])), (firstDiceChangeModify = ($a[1] == null ? nil : $a[1])), (string = ($a[2] == null ? nil : $a[2])), $b;


      $b = self.$getKeyAndAddValueFromString(string), $a = Opal.to_ary($b), (key = ($a[0] == null ? nil : $a[0])), (addValue = ($a[1] == null ? nil : $a[1])), $b;


      if ($truthy(key['$=~'](/([\d]+)/))) {


      } else {


        return "1"


      };


      key = $$($nesting, 'Regexp').$last_match(1).$to_i();


      rate_sw2_0 = self.$getSW2_0_RatingTable();


      keyMax = $rb_minus(rate_sw2_0.$length(), 1);


      self.$debug("keyMax", keyMax);


      if ($truthy($rb_gt(key, keyMax))) {


        return "" + "\u30AD\u30FC\u30CA\u30F3\u30D0\u30FC\u306F" + (keyMax) + "\u307E\u3067\u3067\u3059"};


      newRates = self.$getNewRates(rate_sw2_0);


      output = "" + "KeyNo." + (key);


      if ($truthy($rb_lt(crit, 13))) {


        output = $rb_plus(output, "" + "c[" + (crit) + "]")};


      if ($truthy(firstDiceChangeModify['$!='](0))) {


        output = $rb_plus(output, "" + "m[" + (firstDiceChangeModify) + "]")};


      if ($truthy(firstDiceChanteTo['$!='](0))) {


        output = $rb_plus(output, "" + "m[" + (firstDiceChanteTo) + "]")};


      if ($truthy(rateUp['$!='](0))) {


        output = $rb_plus(output, "" + "r[" + (rateUp) + "]")};


      $b = self.$getAdditionalString(string, output), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (values = ($a[1] == null ? nil : $a[1])), $b;


      self.$debug("output", output);


      if ($truthy(addValue['$!='](0))) {


        


        if ($truthy($rb_gt(addValue, 0))) {


          output = $rb_plus(output, "" + "+" + (addValue))};


        if ($truthy($rb_lt(addValue, 0))) {


          output = $rb_plus(output, addValue.$to_s())};};


      output = $rb_plus(output, " \uFF1E ");


      diceResultTotals = [];


      diceResults = [];


      rateResults = [];


      dice = 0;


      diceOnlyTotal = 0;


      totalValue = 0;


      round = 0;


      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$11 = function(){var self = $$11.$$s || this, $c, $d, dice_raw = nil, diceText = nil, currentKey = nil, rateValue = nil;





      


        $d = self.$rollDice(values), $c = Opal.to_ary($d), (dice_raw = ($c[0] == null ? nil : $c[0])), (diceText = ($c[1] == null ? nil : $c[1])), $d;


        dice = dice_raw;


        if ($truthy(firstDiceChanteTo['$!='](0))) {


          


          dice = (dice_raw = firstDiceChanteTo);


          firstDiceChanteTo = 0;


        } else if ($truthy(firstDiceChangeModify['$!='](0))) {


          


          dice = $rb_plus(dice, firstDiceChangeModify.$to_i());


          firstDiceChangeModify = 0;};


        if ($truthy($rb_le(dice_raw, 2))) {


          


          diceResultTotals['$<<'](dice_raw.$to_s());


          diceResults['$<<'](diceText.$to_s());


          rateResults['$<<']("**");


          round = $rb_plus(round, 1);


          


          Opal.brk(nil, $brk);};


        dice = $rb_plus(dice, self.$getAdditionalDiceValue(dice, values));


        if ($truthy($rb_lt(dice, 2))) {


          dice = 2};


        if ($truthy($rb_gt(dice, 12))) {


          dice = 12};


        currentKey = [$rb_plus(key, $rb_times(round, rateUp)), keyMax].$min();


        self.$debug("currentKey", currentKey);


        rateValue = newRates['$[]'](dice)['$[]'](currentKey);


        self.$debug("rateValue", rateValue);


        totalValue = $rb_plus(totalValue, rateValue);


        diceOnlyTotal = $rb_plus(diceOnlyTotal, dice);


        diceResultTotals['$<<'](dice.$to_s());


        diceResults['$<<'](diceText.$to_s());


        rateResults['$<<']((function() {if ($truthy($rb_gt(dice, 2))) {


          return rateValue


        } else {


          return "**"


        }; return nil; })());


        round = $rb_plus(round, 1);


        if ($truthy($rb_ge(dice, crit))) {


          return nil


        } else {


          


          Opal.brk(nil, $brk)


        };}, $$11.$$s = self, $$11.$$brk = $brk, $$11.$$arity = 0, $$11))


      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();


      limitLength = $rb_minus($gvars.SEND_STR_MAX, output.$length());


      output = $rb_plus(output, self.$getResultText(totalValue, addValue, diceResults, diceResultTotals, rateResults, diceOnlyTotal, round, limitLength, half));


      return output;


    }, $SwordWorld_rating$10.$$arity = 1);


    


    Opal.def(self, '$getAdditionalString', $SwordWorld_getAdditionalString$12 = function $$getAdditionalString(_string, output) {


      var self = this, values = nil;





      


      values = $hash2([], {});


      return [output, values];


    }, $SwordWorld_getAdditionalString$12.$$arity = 2);


    


    Opal.def(self, '$getAdditionalDiceValue', $SwordWorld_getAdditionalDiceValue$13 = function $$getAdditionalDiceValue(_dice, _values) {


      var self = this;





      return 0


    }, $SwordWorld_getAdditionalDiceValue$13.$$arity = 2);


    


    Opal.def(self, '$getCriticalFromString', $SwordWorld_getCriticalFromString$14 = function $$getCriticalFromString(string, half) {


      var self = this, crit = nil, regexp = nil;





      


      crit = (function() {if ($truthy(half)) {


        return 13


      } else {


        return 10


      }; return nil; })();


      regexp = /c\[(\d+)\]/i;


      if ($truthy(regexp['$=~'](string))) {


        


        crit = $$($nesting, 'Regexp').$last_match(1).$to_i();


        if ($truthy($rb_lt(crit, 3))) {


          crit = 3};


        string = string.$gsub(regexp, "");};


      return [crit, string];


    }, $SwordWorld_getCriticalFromString$14.$$arity = 2);


    


    Opal.def(self, '$getDiceChangesFromString', $SwordWorld_getDiceChangesFromString$15 = function $$getDiceChangesFromString(string) {


      var self = this, firstDiceChanteTo = nil, firstDiceChangeModify = nil, regexp = nil;





      


      firstDiceChanteTo = 0;


      firstDiceChangeModify = 0;


      regexp = /m\[([\d\+\-]+)\]/i;


      if ($truthy(regexp['$=~'](string))) {


        


        firstDiceChangeModify = $$($nesting, 'Regexp').$last_match(1);


        if ($truthy(/[\+\-]/['$=~'](firstDiceChangeModify))) {


        } else {


          


          firstDiceChanteTo = firstDiceChangeModify.$to_i();


          firstDiceChangeModify = 0;


        };


        string = string.$gsub(regexp, "");};


      return [firstDiceChanteTo, firstDiceChangeModify, string];


    }, $SwordWorld_getDiceChangesFromString$15.$$arity = 1);


    


    Opal.def(self, '$getRateUpFromString', $SwordWorld_getRateUpFromString$16 = function $$getRateUpFromString(string) {


      var self = this, rateUp = nil;





      


      rateUp = 0;


      return [rateUp, string];


    }, $SwordWorld_getRateUpFromString$16.$$arity = 1);


    


    Opal.def(self, '$getKeyAndAddValueFromString', $SwordWorld_getKeyAndAddValueFromString$17 = function $$getKeyAndAddValueFromString(string) {


      var self = this, key = nil, addValue = nil;





      


      key = nil;


      addValue = 0;


      if ($truthy(/K(\d+)([\d\+\-]*)/i['$=~'](string))) {


        


        key = $$($nesting, 'Regexp').$last_match(1);


        if ($truthy($$($nesting, 'Regexp').$last_match(2))) {


          addValue = self.$parren_killer($rb_plus($rb_plus("(", $$($nesting, 'Regexp').$last_match(2)), ")")).$to_i()};


      } else {


        key = string


      };


      return [key, addValue];


    }, $SwordWorld_getKeyAndAddValueFromString$17.$$arity = 1);


    


    Opal.def(self, '$getSW2_0_RatingTable', $SwordWorld_getSW2_0_RatingTable$18 = function $$getSW2_0_RatingTable() {


      var self = this, rate_sw2_0 = nil;





      


      rate_sw2_0 = ["*,0,0,0,1,2,2,3,3,4,4", "*,0,0,0,1,2,3,3,3,4,4", "*,0,0,0,1,2,3,4,4,4,4", "*,0,0,1,1,2,3,4,4,4,5", "*,0,0,1,2,2,3,4,4,5,5", "*,0,1,1,2,2,3,4,5,5,5", "*,0,1,1,2,3,3,4,5,5,5", "*,0,1,1,2,3,4,4,5,5,6", "*,0,1,2,2,3,4,4,5,6,6", "*,0,1,2,3,3,4,4,5,6,7", "*,1,1,2,3,3,4,5,5,6,7", "*,1,2,2,3,3,4,5,6,6,7", "*,1,2,2,3,4,4,5,6,6,7", "*,1,2,3,3,4,4,5,6,7,7", "*,1,2,3,4,4,4,5,6,7,8", "*,1,2,3,4,4,5,5,6,7,8", "*,1,2,3,4,4,5,6,7,7,8", "*,1,2,3,4,5,5,6,7,7,8", "*,1,2,3,4,5,6,6,7,7,8", "*,1,2,3,4,5,6,7,7,8,9", "*,1,2,3,4,5,6,7,8,9,10", "*,1,2,3,4,6,6,7,8,9,10", "*,1,2,3,5,6,6,7,8,9,10", "*,2,2,3,5,6,7,7,8,9,10", "*,2,3,4,5,6,7,7,8,9,10", "*,2,3,4,5,6,7,8,8,9,10", "*,2,3,4,5,6,8,8,9,9,10", "*,2,3,4,6,6,8,8,9,9,10", "*,2,3,4,6,6,8,9,9,10,10", "*,2,3,4,6,7,8,9,9,10,10", "*,2,4,4,6,7,8,9,10,10,10", "*,2,4,5,6,7,8,9,10,10,11", "*,3,4,5,6,7,8,10,10,10,11", "*,3,4,5,6,8,8,10,10,10,11", "*,3,4,5,6,8,9,10,10,11,11", "*,3,4,5,7,8,9,10,10,11,12", "*,3,5,5,7,8,9,10,11,11,12", "*,3,5,6,7,8,9,10,11,12,12", "*,3,5,6,7,8,10,10,11,12,13", "*,4,5,6,7,8,10,11,11,12,13", "*,4,5,6,7,9,10,11,11,12,13", "*,4,6,6,7,9,10,11,12,12,13", "*,4,6,7,7,9,10,11,12,13,13", "*,4,6,7,8,9,10,11,12,13,14", "*,4,6,7,8,10,10,11,12,13,14", "*,4,6,7,9,10,10,11,12,13,14", "*,4,6,7,9,10,10,12,13,13,14", "*,4,6,7,9,10,11,12,13,13,15", "*,4,6,7,9,10,12,12,13,13,15", "*,4,6,7,10,10,12,12,13,14,15", "*,4,6,8,10,10,12,12,13,15,15", "*,5,7,8,10,10,12,12,13,15,15", "*,5,7,8,10,11,12,12,13,15,15", "*,5,7,9,10,11,12,12,14,15,15", "*,5,7,9,10,11,12,13,14,15,16", "*,5,7,10,10,11,12,13,14,16,16", "*,5,8,10,10,11,12,13,15,16,16", "*,5,8,10,11,11,12,13,15,16,17", "*,5,8,10,11,12,12,13,15,16,17", "*,5,9,10,11,12,12,14,15,16,17", "*,5,9,10,11,12,13,14,15,16,18", "*,5,9,10,11,12,13,14,16,17,18", "*,5,9,10,11,13,13,14,16,17,18", "*,5,9,10,11,13,13,15,17,17,18", "*,5,9,10,11,13,14,15,17,17,18", "*,5,9,10,12,13,14,15,17,18,18", "*,5,9,10,12,13,15,15,17,18,19", "*,5,9,10,12,13,15,16,17,19,19", "*,5,9,10,12,14,15,16,17,19,19", "*,5,9,10,12,14,16,16,17,19,19", "*,5,9,10,12,14,16,17,18,19,19", "*,5,9,10,13,14,16,17,18,19,20", "*,5,9,10,13,15,16,17,18,19,20", "*,5,9,10,13,15,16,17,19,20,21", "*,6,9,10,13,15,16,18,19,20,21", "*,6,9,10,13,16,16,18,19,20,21", "*,6,9,10,13,16,17,18,19,20,21", "*,6,9,10,13,16,17,18,20,21,22", "*,6,9,10,13,16,17,19,20,22,23", "*,6,9,10,13,16,18,19,20,22,23", "*,6,9,10,13,16,18,20,21,22,23", "*,6,9,10,13,17,18,20,21,22,23", "*,6,9,10,14,17,18,20,21,22,24", "*,6,9,11,14,17,18,20,21,23,24", "*,6,9,11,14,17,19,20,21,23,24", "*,6,9,11,14,17,19,21,22,23,24", "*,7,10,11,14,17,19,21,22,23,25", "*,7,10,12,14,17,19,21,22,24,25", "*,7,10,12,14,18,19,21,22,24,25", "*,7,10,12,15,18,19,21,22,24,26", "*,7,10,12,15,18,19,21,23,25,26", "*,7,11,13,15,18,19,21,23,25,26", "*,7,11,13,15,18,20,21,23,25,27", "*,8,11,13,15,18,20,22,23,25,27", "*,8,11,13,16,18,20,22,23,25,28", "*,8,11,14,16,18,20,22,23,26,28", "*,8,11,14,16,19,20,22,23,26,28", "*,8,12,14,16,19,20,22,24,26,28", "*,8,12,15,16,19,20,22,24,27,28", "*,8,12,15,17,19,20,22,24,27,29", "*,8,12,15,18,19,20,22,24,27,30"];


      return rate_sw2_0;


    }, $SwordWorld_getSW2_0_RatingTable$18.$$arity = 0);


    


    Opal.def(self, '$getNewRates', $SwordWorld_getNewRates$19 = function $$getNewRates(rate_sw2_0) {


      var $$20, self = this, rate_3 = nil, rate_4 = nil, rate_5 = nil, rate_6 = nil, rate_7 = nil, rate_8 = nil, rate_9 = nil, rate_10 = nil, rate_11 = nil, rate_12 = nil, zeroArray = nil, $writer = nil, newRates = nil;





      


      rate_3 = [];


      rate_4 = [];


      rate_5 = [];


      rate_6 = [];


      rate_7 = [];


      rate_8 = [];


      rate_9 = [];


      rate_10 = [];


      rate_11 = [];


      rate_12 = [];


      zeroArray = [];


      $send(rate_sw2_0, 'each', [], ($$20 = function(rateText){var self = $$20.$$s || this, rate_arr = nil;





      


        


        if (rateText == null) {


          rateText = nil;


        };


        rate_arr = rateText.$split(/,/);


        zeroArray.$push(0);


        rate_3.$push(rate_arr['$[]'](1).$to_i());


        rate_4.$push(rate_arr['$[]'](2).$to_i());


        rate_5.$push(rate_arr['$[]'](3).$to_i());


        rate_6.$push(rate_arr['$[]'](4).$to_i());


        rate_7.$push(rate_arr['$[]'](5).$to_i());


        rate_8.$push(rate_arr['$[]'](6).$to_i());


        rate_9.$push(rate_arr['$[]'](7).$to_i());


        rate_10.$push(rate_arr['$[]'](8).$to_i());


        rate_11.$push(rate_arr['$[]'](9).$to_i());


        return rate_12.$push(rate_arr['$[]'](10).$to_i());}, $$20.$$s = self, $$20.$$arity = 1, $$20));


      if (self.rating_table['$=='](1)) {


        


        $writer = [31, (($writer = [32, (($writer = [33, 10]), $send(rate_12, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])]), $send(rate_12, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];


        $send(rate_12, '[]=', Opal.to_a($writer));


        $writer[$rb_minus($writer["length"], 1)];};


      newRates = [zeroArray, zeroArray, zeroArray, rate_3, rate_4, rate_5, rate_6, rate_7, rate_8, rate_9, rate_10, rate_11, rate_12];


      return newRates;


    }, $SwordWorld_getNewRates$19.$$arity = 1);


    


    Opal.def(self, '$rollDice', $SwordWorld_rollDice$21 = function $$rollDice(_values) {


      var $a, $b, self = this, dice = nil, diceText = nil;





      


      $b = self.$roll(2, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;


      return [dice, diceText];


    }, $SwordWorld_rollDice$21.$$arity = 1);


    


    Opal.def(self, '$getResultText', $SwordWorld_getResultText$22 = function $$getResultText(rating_total, modifier, diceResults, diceResultTotals, rateResults, dice_total, round, limitLength, half) {


      var $a, self = this, sequence = nil, short$ = nil, text = nil, round_text = nil, total = nil, total_text = nil, ret = nil;





      


      sequence = [];


      short$ = ["..."];


      sequence.$push("" + "2D:[" + (diceResults.$join(" ")) + "]=" + (diceResultTotals.$join(",")));


      if ($truthy($rb_le(dice_total, 2))) {


        


        sequence.$push(rateResults.$join(","));


        sequence.$push("\u81EA\u52D5\u7684\u5931\u6557");


        return sequence.$join(" \uFF1E ");};


      if ($truthy(($truthy($a = $rb_gt(rateResults.$size(), 1)) ? $a : modifier['$!='](0)))) {


        


        text = $rb_plus(rateResults.$join(","), self.$format_modifier(modifier));


        if ($truthy(half)) {


          text = "" + "(" + (text) + ")/2"};


        sequence.$push(text);


      } else if ($truthy(half)) {


        sequence.$push("" + (rateResults.$first()) + "/2")};


      if ($truthy($rb_gt(round, 1))) {


        


        round_text = "" + ($rb_minus(round, 1)) + "\u56DE\u8EE2";


        sequence.$push(round_text);


        short$.$push(round_text);};


      total = $rb_plus(rating_total, modifier);


      if ($truthy(half)) {


        total = $rb_divide(total, 2.0).$ceil()};


      total_text = total.$to_s();


      sequence.$push(total_text);


      short$.$push(total_text);


      ret = sequence.$join(" \uFF1E ");


      if ($truthy($rb_gt(ret.$length(), limitLength))) {


        return short$.$join(" \uFF1E ")


      } else {


        return ret


      };


    }, $SwordWorld_getResultText$22.$$arity = 9);


    return (Opal.def(self, '$setRatingTable', $SwordWorld_setRatingTable$23 = function $$setRatingTable(tnick) {


      var self = this, mode_str = nil, pre_mode = nil, $case = nil;





      


      mode_str = "";


      pre_mode = self.rating_table;


      if ($truthy(/(\d+)/['$=~'](tnick))) {


        


        self.rating_table = $$($nesting, 'Regexp').$last_match(1).$to_i();


        if ($truthy($rb_gt(self.rating_table, 1))) {


          


          mode_str = "2.0-mode";


          self.rating_table = 2;


        } else if ($truthy($rb_gt(self.rating_table, 0))) {


          


          mode_str = "new-mode";


          self.rating_table = 1;


        } else {


          


          mode_str = "old-mode";


          self.rating_table = 0;


        };


      } else {


        $case = tnick;


        if (/old/i['$===']($case)) {


        self.rating_table = 0;


        mode_str = "old-mode";}


        else if (/new/i['$===']($case)) {


        self.rating_table = 1;


        mode_str = "new-mode";}


        else if (/2\.0/i['$===']($case)) {


        self.rating_table = 2;


        mode_str = "2.0-mode";}


      };


      if (self.rating_table['$=='](pre_mode)) {


        return "1"};


      return "" + "RatingTable\u3092" + (mode_str) + "\u306B\u5909\u66F4\u3057\u307E\u3057\u305F";


    }, $SwordWorld_setRatingTable$23.$$arity = 1), nil) && 'setRatingTable';


  })($nesting[0], $$($nesting, 'DiceBot'), $nesting);


})(Opal);


Opal.loaded(["diceBot/SwordWorld.js"]);

/* Generated by Opal 1.0.3 */

(function(Opal) {

  function $rb_minus(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);

  }

  function $rb_plus(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);

  }

  function $rb_times(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);

  }

  function $rb_le(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);

  }

  function $rb_ge(lhs, rhs) {

    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);

  }

  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;



  Opal.add_stubs(['$require', '$setPrefixes', '$===', '$=~', '$growth', '$to_i', '$last_match', '$get_fumble_table', '$get_tangle_table', '$gsub', '$getGratestFortuneFromString', '$[]=', '$-', '$+', '$[]', '$roll', '$*', '$nil?', '$<=', '$==', '$>=', '$push', '$getOriginalMessage', '$bcdice', '$join', '$map', '$growth_step', '$get_ability_by_dice', '$!=', '$get_table_by_1d6']);

  

  self.$require("diceBot/SwordWorld");

  return (function($base, $super, $parent_nesting) {

    var self = $klass($base, $super, 'SwordWorld2_0');



    var $nesting = [self].concat($parent_nesting), $SwordWorld2_0_initialize$1, $SwordWorld2_0_rollDiceCommand$2, $SwordWorld2_0_getRateUpFromString$3, $SwordWorld2_0_getAdditionalString$4, $SwordWorld2_0_rollDice$5, $SwordWorld2_0_getGratestFortuneFromString$6, $SwordWorld2_0_is2dCritical$7, $SwordWorld2_0_check2dCritical$8, $SwordWorld2_0_check_nD6$9, $SwordWorld2_0_growth$10, $SwordWorld2_0_growth_step$12, $SwordWorld2_0_get_ability_by_dice$13, $SwordWorld2_0_get_fumble_table$14, $SwordWorld2_0_get_tangle_table$15;



    

    Opal.const_set($nesting[0], 'ID', "SwordWorld2.0");

    Opal.const_set($nesting[0], 'NAME', "\u30BD\u30FC\u30C9\u30EF\u30FC\u30EB\u30C92.0");

    Opal.const_set($nesting[0], 'SORT_KEY', "\u305D\u304A\u3068\u308F\u3042\u308B\u30682.0");

    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u81EA\u52D5\u7684\u6210\u529F\u3001\u6210\u529F\u3001\u5931\u6557\u3001\u81EA\u52D5\u7684\u5931\u6557\u306E\u81EA\u52D5\u5224\u5B9A\u3092\u884C\u3044\u307E\u3059\u3002\n" + "\n" + "\u30FB\u30EC\u30FC\u30C6\u30A3\u30F3\u30B0\u8868\u3000(Kx)\n" + "\u3000\"K\u30AD\u30FC\u30CA\u30F3\u30D0\u30FC+\u30DC\u30FC\u30CA\u30B9\"\u306E\u5F62\u3067\u8A18\u5165\u3057\u307E\u3059\u3002\n" + "\u3000\u30DC\u30FC\u30CA\u30B9\u306E\u90E8\u5206\u306B\u300CK20+K30\u300D\u306E\u3088\u3046\u306B\u30EC\u30FC\u30C6\u30A3\u30F3\u30B0\u3092\u53D6\u308B\u3053\u3068\u306F\u51FA\u6765\u307E\u305B\u3093\u3002\n" + "\u3000\u307E\u305F\u3001\u30DC\u30FC\u30CA\u30B9\u306F\u8907\u6570\u53D6\u308B\u3053\u3068\u304C\u51FA\u6765\u307E\u3059\u3002\n" + "\u3000\u30EC\u30FC\u30C6\u30A3\u30F3\u30B0\u8868\u3082\u30C0\u30A4\u30B9\u30ED\u30FC\u30EB\u3068\u540C\u69D8\u306B\u3001\u4ED6\u306E\u30D7\u30EC\u30A4\u30E4\u30FC\u306B\u96A0\u308C\u3066\u30ED\u30FC\u30EB\u3059\u308B\u3053\u3068\u3082\u53EF\u80FD\u3067\u3059\u3002\n" + "\u3000\u4F8B\uFF09K20\u3000\u3000\u3000K10+5\u3000\u3000\u3000k30\u3000\u3000\u3000k10+10\u3000\u3000\u3000Sk10-1\u3000\u3000\u3000k10+5+2\n" + "\n" + "\u30FB\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u306E\u8A2D\u5B9A\n" + "\u3000\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u306F\"[\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024]\"\u3067\u6307\u5B9A\u3057\u307E\u3059\u3002\n" + "\u3000\u6307\u5B9A\u3057\u306A\u3044\u5834\u5408\u306F\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u502410\u3068\u3057\u307E\u3059\u3002\n" + "\u3000\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u51E6\u7406\u304C\u5FC5\u8981\u306A\u3044\u3068\u304D\u306F13\u306A\u3069\u3068\u3057\u3066\u304F\u3060\u3055\u3044\u3002(\u9632\u5FA1\u6642\u306A\u3069\u306E\u5BFE\u5FDC)\n" + "\u3000\u307E\u305F\u30BF\u30A4\u30D7\u306E\u8EFD\u6E1B\u5316\u306E\u305F\u3081\u306B\u672B\u5C3E\u306B\u300C@\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u300D\u3067\u3082\u51E6\u7406\u3059\u308B\u3088\u3046\u306B\u3057\u307E\u3057\u305F\u3002\n" + "\u3000\u4F8B\uFF09K20[10]\u3000\u3000\u3000K10+5[9]\u3000\u3000\u3000k30[10]\u3000\u3000\u3000k10[9]+10\u3000\u3000\u3000k10-5@9\n" + "\n" + "\u30FB\u30EC\u30FC\u30C6\u30A3\u30F3\u30B0\u8868\u306E\u534A\u6E1B (HKx)\n" + "\u3000\u30EC\u30FC\u30C6\u30A3\u30F3\u30B0\u8868\u306E\u5148\u982D\u307E\u305F\u306F\u672B\u5C3E\u306B\"H\"\u3092\u3064\u3051\u308B\u3068\u3001\u30EC\u30FC\u30C6\u30A3\u30F3\u30B0\u8868\u3092\u632F\u3063\u3066\u6700\u7D42\u7D50\u679C\u3092\u534A\u6E1B\u3055\u305B\u307E\u3059\u3002\n" + "\u3000\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u3092\u6307\u5B9A\u3057\u306A\u3044\u5834\u5408\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u306A\u3057\u3068\u6271\u308F\u308C\u307E\u3059\u3002\n" + "\u3000\u4F8B\uFF09HK20\u3000\u3000K20h\u3000\u3000HK10-5@9\u3000\u3000K10-5@9H\u3000\u3000K20gfH\n" + "\n" + "\u30FB\u30C0\u30A4\u30B9\u76EE\u306E\u4FEE\u6B63\uFF08\u904B\u547D\u5909\u8EE2\u3084\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u30EC\u30A4\u7528\uFF09\n" + "\u3000\u672B\u5C3E\u306B\u300C$\u4FEE\u6B63\u5024\u300D\u3067\u30C0\u30A4\u30B9\u76EE\u306B\u4FEE\u6B63\u304C\u304B\u304B\u308A\u307E\u3059\u3002\n" + "\u3000$\uFF0B\uFF11\u3068\u4FEE\u6B63\u8868\u8A18\u306A\u3089\u30C0\u30A4\u30B9\u76EE\u306B\uFF0B\u4FEE\u6B63\u3001\uFF04\uFF19\u306E\u3088\u3046\u306B\u56FA\u5B9A\u5024\u306A\u3089\u30C0\u30A4\u30B9\u76EE\u3092\u305D\u306E\u51FA\u76EE\u306B\u5DEE\u3057\u66FF\u3048\u3002\n" + "\u3000\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u3057\u305F\u5834\u5408\u3067\u3082\u56FA\u5B9A\u5024\u3084\u4FEE\u6B63\u5024\u306E\u9069\u7528\u306F\u6700\u521D\u306E\u4E00\u56DE\u3060\u3051\u3067\u3059\u3002\n" + "\u3000\u4F8B\uFF09K20$+1\u3000\u3000\u3000K10+5$9\u3000\u3000\u3000k10-5@9$+2\u3000\u3000\u3000k10[9]+10$9\n" + "\n" + "\u30FB\u9996\u5207\u308A\u5200\u7528\u30EC\u30FC\u30C6\u30A3\u30F3\u30B0\u4E0A\u6607 r10\n" + "\u3000\u4F8B\uFF09K20r10\u3000K30+24@8R10\u3000K40+24@8$12r10\n" + "\n" + "\u30FB\u30B0\u30EC\u30A4\u30C6\u30B9\u30C8\u30D5\u30A9\u30FC\u30C1\u30E5\u30F3\u306F\u672B\u5C3E\u306B gf\n" + "\u3000\u4F8B\uFF09K20gf\u3000K30+24@8GF\u3000K40+24@8$12r10gf\n" + "\n" + "\u30FB\u8D85\u8D8A\u5224\u5B9A\u7528\u306B2d6\u30ED\u30FC\u30EB\u306B 2D6@10 \u66F8\u5F0F\u3067\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u4ED8\u4E0E\u304C\u53EF\u80FD\u306B\u3002\n" + "\u3000\u4F8B\uFF092D6@10\u30002D6@10+11>=30\n" + "\n" + "\u30FB\u6210\u9577\u3000(Gr)\n" + "\u3000\u672B\u5C3E\u306B\u6570\u5B57\u3092\u4ED8\u52A0\u3059\u308B\u3053\u3068\u3067\u3001\u8907\u6570\u56DE\u306E\u6210\u9577\u3092\u307E\u3068\u3081\u3066\u884C\u3048\u307E\u3059\u3002\n" + "\u3000\u4F8B\uFF09Gr3\n" + "\n" + "\u30FB\u9632\u5FA1\u30D5\u30A1\u30F3\u30D6\u30EB\u8868\u3000(FT)\n" + "\u3000\u9632\u5FA1\u30D5\u30A1\u30F3\u30D6\u30EB\u8868\u3092\u51FA\u3059\u3053\u3068\u304C\u3067\u304D\u307E\u3059\u3002\n" + "\n" + "\u30FB\u7D61\u307F\u52B9\u679C\u8868\u3000(TT)\n" + "\u3000\u7D61\u307F\u52B9\u679C\u8868\u3092\u51FA\u3059\u3053\u3068\u304C\u3067\u304D\u307E\u3059\u3002\n");

    self.$setPrefixes(["H?K\\d+.*", "Gr(\\d+)?", "FT", "TT"]);

    

    Opal.def(self, '$initialize', $SwordWorld2_0_initialize$1 = function $$initialize() {

      var $iter = $SwordWorld2_0_initialize$1.$$p, $yield = $iter || nil, self = this, rating_table = nil;



      if ($iter) $SwordWorld2_0_initialize$1.$$p = null;

      

      rating_table = 2;

      $send(self, Opal.find_super_dispatcher(self, 'initialize', $SwordWorld2_0_initialize$1, false), [], null);

      return (self.rating_table = rating_table);

    }, $SwordWorld2_0_initialize$1.$$arity = 0);

    

    Opal.def(self, '$rollDiceCommand', $SwordWorld2_0_rollDiceCommand$2 = function $$rollDiceCommand(command) {

      var $iter = $SwordWorld2_0_rollDiceCommand$2.$$p, $yield = $iter || nil, self = this, $case = nil;



      if ($iter) $SwordWorld2_0_rollDiceCommand$2.$$p = null;

      return (function() {$case = command;

      if (/^Gr(\d+)?/i['$===']($case)) {if ($truthy(command['$=~'](/^Gr(\d+)/i))) {

        return self.$growth($$($nesting, 'Regexp').$last_match(1).$to_i())

      } else {

        return self.$growth()

      }}

      else if ("FT"['$===']($case)) {return self.$get_fumble_table()}

      else if ("TT"['$===']($case)) {return self.$get_tangle_table()}

      else {return $send(self, Opal.find_super_dispatcher(self, 'rollDiceCommand', $SwordWorld2_0_rollDiceCommand$2, false), [command], null)}})()

    }, $SwordWorld2_0_rollDiceCommand$2.$$arity = 1);

    

    Opal.def(self, '$getRateUpFromString', $SwordWorld2_0_getRateUpFromString$3 = function $$getRateUpFromString(string) {

      var self = this, rateUp = nil, regexp = nil;



      

      rateUp = 0;

      regexp = /r\[(\d+)\]/i;

      if ($truthy(regexp['$==='](string))) {

        

        rateUp = $$($nesting, 'Regexp').$last_match(1).$to_i();

        string = string.$gsub(regexp, "");};

      return [rateUp, string];

    }, $SwordWorld2_0_getRateUpFromString$3.$$arity = 1);

    

    Opal.def(self, '$getAdditionalString', $SwordWorld2_0_getAdditionalString$4 = function $$getAdditionalString(string, output) {

      var $a, $b, $iter = $SwordWorld2_0_getAdditionalString$4.$$p, $yield = $iter || nil, self = this, values = nil, isGratestFortune = nil, $writer = nil;



      if ($iter) $SwordWorld2_0_getAdditionalString$4.$$p = null;

      

      $b = $send(self, Opal.find_super_dispatcher(self, 'getAdditionalString', $SwordWorld2_0_getAdditionalString$4, false), [string, output], null), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (values = ($a[1] == null ? nil : $a[1])), $b;

      $b = self.$getGratestFortuneFromString(string), $a = Opal.to_ary($b), (isGratestFortune = ($a[0] == null ? nil : $a[0])), (string = ($a[1] == null ? nil : $a[1])), $b;

      

      $writer = ["isGratestFortune", isGratestFortune];

      $send(values, '[]=', Opal.to_a($writer));

      $writer[$rb_minus($writer["length"], 1)];;

      if ($truthy(isGratestFortune)) {

        output = $rb_plus(output, "gf")};

      return [output, values];

    }, $SwordWorld2_0_getAdditionalString$4.$$arity = 2);

    

    Opal.def(self, '$rollDice', $SwordWorld2_0_rollDice$5 = function $$rollDice(values) {

      var $a, $b, $iter = $SwordWorld2_0_rollDice$5.$$p, $yield = $iter || nil, self = this, dice = nil, diceText = nil;



      if ($iter) $SwordWorld2_0_rollDice$5.$$p = null;

      

      if ($truthy(values['$[]']("isGratestFortune"))) {

      } else {

        return $send(self, Opal.find_super_dispatcher(self, 'rollDice', $SwordWorld2_0_rollDice$5, false), [values], null)

      };

      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;

      dice = $rb_times(dice, 2);

      diceText = "" + (diceText) + "," + (diceText);

      return [dice, diceText];

    }, $SwordWorld2_0_rollDice$5.$$arity = 1);

    

    Opal.def(self, '$getGratestFortuneFromString', $SwordWorld2_0_getGratestFortuneFromString$6 = function $$getGratestFortuneFromString(string) {

      var self = this, isGratestFortune = nil, regexp = nil;



      

      isGratestFortune = false;

      regexp = /gf/i;

      if ($truthy(regexp['$==='](string))) {

        

        isGratestFortune = true;

        string = string.$gsub(regexp, "");};

      return [isGratestFortune, string];

    }, $SwordWorld2_0_getGratestFortuneFromString$6.$$arity = 1);

    

    Opal.def(self, '$is2dCritical', $SwordWorld2_0_is2dCritical$7 = function $$is2dCritical() {

      var self = this;



      return true

    }, $SwordWorld2_0_is2dCritical$7.$$arity = 0);

    

    Opal.def(self, '$check2dCritical', $SwordWorld2_0_check2dCritical$8 = function $$check2dCritical(critical, dice_new, dice_arry, loop_count) {

      var $a, self = this;



      

      if ($truthy(($truthy($a = critical['$nil?']()) ? $a : $rb_le(critical, 2)))) {

        return nil};

      if (loop_count['$=='](0)) {

        

        if (dice_new['$=='](12)) {

          return nil};

        if (dice_new['$=='](2)) {

          return nil};};

      if ($truthy($rb_ge(dice_new, critical))) {

        return dice_arry.$push(2)

      } else {

        return nil

      };

    }, $SwordWorld2_0_check2dCritical$8.$$arity = 4);

    

    Opal.def(self, '$check_nD6', $SwordWorld2_0_check_nD6$9 = function $$check_nD6(total, dice_total, dice_list, cmp_op, target) {

      var $iter = $SwordWorld2_0_check_nD6$9.$$p, $yield = $iter || nil, self = this, result = nil, string = nil, superSuccessValue = nil, critical = nil;



      if ($iter) $SwordWorld2_0_check_nD6$9.$$p = null;

      

      result = $send(self, Opal.find_super_dispatcher(self, 'check_nD6', $SwordWorld2_0_check_nD6$9, false), [total, dice_total, dice_list, cmp_op, target], null);

      if ($truthy(result['$nil?']())) {

      } else {

        return result

      };

      string = self.$bcdice().$getOriginalMessage();

      superSuccessValue = 41;

      if ($truthy(/@(\d+)/['$==='](string))) {

        

        critical = $$($nesting, 'Regexp').$last_match(1).$to_i();

        if ($truthy($rb_ge(dice_total, critical))) {

          if ($truthy($rb_ge(total, superSuccessValue))) {

            return " \uFF1E \u8D85\u6210\u529F"}};};

      return result;

    }, $SwordWorld2_0_check_nD6$9.$$arity = 5);

    

    Opal.def(self, '$growth', $SwordWorld2_0_growth$10 = function $$growth(count) {

      var $$11, self = this;



      

      

      if (count == null) {

        count = 1;

      };

      return $send(Opal.Range.$new(1, count, false), 'map', [], ($$11 = function(){var self = $$11.$$s || this;



      return self.$growth_step()}, $$11.$$s = self, $$11.$$arity = 0, $$11)).$join(" | ");

    }, $SwordWorld2_0_growth$10.$$arity = -1);

    

    Opal.def(self, '$growth_step', $SwordWorld2_0_growth_step$12 = function $$growth_step() {

      var $a, $b, self = this, d1 = nil, d2 = nil, a1 = nil, a2 = nil;



      

      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (d1 = ($a[0] == null ? nil : $a[0])), $b;

      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (d2 = ($a[0] == null ? nil : $a[0])), $b;

      a1 = self.$get_ability_by_dice(d1);

      a2 = self.$get_ability_by_dice(d2);

      return (function() {if ($truthy(a1['$!='](a2))) {

        return "" + "[" + (d1) + "," + (d2) + "]->(" + (a1) + " or " + (a2) + ")"

      } else {

        return "" + "[" + (d1) + "," + (d2) + "]->(" + (a1) + ")"

      }; return nil; })();

    }, $SwordWorld2_0_growth_step$12.$$arity = 0);

    

    Opal.def(self, '$get_ability_by_dice', $SwordWorld2_0_get_ability_by_dice$13 = function $$get_ability_by_dice(dice) {

      var self = this;



      return ["\u5668\u7528\u5EA6", "\u654F\u6377\u5EA6", "\u7B4B\u529B", "\u751F\u547D\u529B", "\u77E5\u529B", "\u7CBE\u795E\u529B"]['$[]']($rb_minus(dice, 1))

    }, $SwordWorld2_0_get_ability_by_dice$13.$$arity = 1);

    

    Opal.def(self, '$get_fumble_table', $SwordWorld2_0_get_fumble_table$14 = function $$get_fumble_table() {

      var $a, $b, self = this, table = nil, text = nil, num = nil;



      

      table = ["\u3053\u306E\u8868\u30922\u56DE\u632F\u308A\u3001\u305D\u306E\u4E21\u65B9\u3092\u9069\u7528\u3059\u308B\u3002\uFF08\u540C\u3058\u51FA\u76EE\u306B\u3088\u308B\u5F71\u97FF\u306F\u7D2F\u7A4D\u3057\u306A\u3044\uFF09\u3002\u3053\u306E\u81EA\u52D5\u5931\u6557\u306B\u3088\u308A\u5F97\u3089\u308C\u308B\u7D4C\u9A13\u70B9\u306F\u3001+50\u70B9\u3055\u308C\u308B", "\u30C0\u30E1\u30FC\u30B8\u306B\u3001\u653B\u6483\u8005\u3092\u5F37\u5316\u3057\u3066\u3044\u308B\u300C\u5263\u306E\u304B\u3051\u3089\u300D\u306E\u6570\u304C\u8FFD\u52A0\u3055\u308C\u308B", "\u30C0\u30E1\u30FC\u30B8\u306B\u3001\u653B\u6483\u8005\u306E\u300C\u30EC\u30D9\u30EB\u300D\u304C\u8FFD\u52A0\u3055\u308C\u308B", "\u30C0\u30E1\u30FC\u30B8\u6C7A\u5B9A\u30922\u56DE\u884C\u3044\u3001\u3088\u308A\u9AD8\u3044\u65B9\u3092\u63A1\u7528\u3059\u308B", "\u5408\u7B97\u30C0\u30E1\u30FC\u30B8\u30922\u500D\u3059\u308B", "\u9632\u8B77\u70B9\u7121\u52B9"];

      $b = self.$get_table_by_1d6(table), $a = Opal.to_ary($b), (text = ($a[0] == null ? nil : $a[0])), (num = ($a[1] == null ? nil : $a[1])), $b;

      return "" + "\u9632\u5FA1\u30D5\u30A1\u30F3\u30D6\u30EB\u8868(" + (num) + ") \u2192 " + (text);

    }, $SwordWorld2_0_get_fumble_table$14.$$arity = 0);

    return (Opal.def(self, '$get_tangle_table', $SwordWorld2_0_get_tangle_table$15 = function $$get_tangle_table() {

      var $a, $b, self = this, table = nil, text = nil, num = nil;



      

      table = ["\u982D\u3084\u9854\uFF1A\u7259\u3084\u565B\u307F\u3064\u304D\u306A\u3069\u306B\u304A\u3051\u308B\u547D\u4E2D\u529B\u5224\u5B9A\u53CA\u3073\u3001\u9B54\u6CD5\u306E\u884C\u4F7F\u3084\u30D6\u30EC\u30B9\u306B-2\u306E\u30DA\u30CA\u30EB\u30C6\u30A3\u4FEE\u6B63\u3092\u53D7\u3051\u308B", "\u6B66\u5668\u3084\u76FE\uFF1A\u6B66\u5668\u306E\u4F7F\u7528\u4E0D\u53EF\u3001\u53C8\u306F\u76FE\u306E\u56DE\u907F\u529B\u4FEE\u6B63\u53CA\u3073\u9632\u8B77\u70B9\u3092\u7121\u52B9\u5316\u3059\u308B", "\u8155\u3084\u624B\uFF1A\u6B66\u5668\u3084\u722A\u306A\u3069\u306B\u304A\u3051\u308B\u547D\u4E2D\u529B\u5224\u5B9A\u306B-2\u306E\u30DA\u30CA\u30EB\u30C6\u30A3\u4FEE\u6B63\u3001\u76FE\u3092\u6301\u3064\u8155\u65B9\u306E\u8155\u306A\u3089\u305D\u306E\u76FE\u306E\u56DE\u907F\u529B\u4FEE\u6B63\u53CA\u3073\u9632\u8B77\u70B9\u3092\u7121\u52B9\u5316\u3059\u308B", "\u811A\u3084\u8DB3\uFF1A\u79FB\u52D5\u4E0D\u53EF\u3001\u66F4\u306B\u56DE\u907F\u529B\u5224\u5B9A\u306B-2\u306E\u30DA\u30CA\u30EB\u30C6\u30A3\u4FEE\u6B63\u3092\u53D7\u3051\u308B \u203B\u4E21\u8DB3\u306B\u7D61\u3093\u3067\u3082\u7D2F\u7A4D\u3057\u306A\u3044", "\u80F4\u4F53\uFF1A\u751F\u547D\u30FB\u7CBE\u795E\u62B5\u6297\u529B\u3092\u57FA\u6E96\u5024\u306B\u7528\u3044\u308B\u5224\u5B9A\u3092\u9664\u304D\u3001\u3042\u3089\u3086\u308B\u884C\u70BA\u5224\u5B9A\u306B-1\u306E\u30DA\u30CA\u30EB\u30C6\u30A3\u4FEE\u6B63\u3092\u53D7\u3051\u308B", "\u7279\u6B8A\uFF1A\u5C3B\u5C3E\u3084\u7FFC\u306A\u3069\u306B\u547D\u4E2D\u3002\u7D61\u3081\u3089\u308C\u305F\u90E8\u4F4D\u3092\u4F7F\u7528\u3059\u308B\u5224\u5B9A\u306B\u304A\u3044\u3066-2\u306E\u30DA\u30CA\u30EB\u30C6\u30A3\u4FEE\u6B63\u3001\u307E\u305F\u306F\u305D\u3053\u304C\u4F7F\u3048\u3066\u3044\u305F\u3053\u3068\u306B\u3088\u308B\u30DC\u30FC\u30CA\u30B9\u4FEE\u6B63\u3092\u5931\u3046 \u203B\u5B58\u5728\u3057\u306A\u3044\u5834\u5408\u306F\u6C7A\u3081\u76F4\u3057"];

      $b = self.$get_table_by_1d6(table), $a = Opal.to_ary($b), (text = ($a[0] == null ? nil : $a[0])), (num = ($a[1] == null ? nil : $a[1])), $b;

      return "" + "\u7D61\u307F\u52B9\u679C\u8868(" + (num) + ") \u2192 " + (text);

    }, $SwordWorld2_0_get_tangle_table$15.$$arity = 0), nil) && 'get_tangle_table';

  })($nesting[0], $$($nesting, 'SwordWorld'), $nesting);

})(Opal);

Opal.loaded(["diceBot/SwordWorld2_0.js"]);
/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$setPrefixes', '$match', '$gsub', '$to_i', '$last_match', '$format_modifier', '$+', '$getKeptDiceChangesFromString', '$[]=', '$-', '$!=', '$[]', '$=~']);
  
  self.$require("diceBot/SwordWorld2_0");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SwordWorld2_5');

    var $nesting = [self].concat($parent_nesting), $SwordWorld2_5_changeText$1, $SwordWorld2_5_getRatingCommandStrings$3, $SwordWorld2_5_getAdditionalString$4, $SwordWorld2_5_getAdditionalDiceValue$5, $SwordWorld2_5_getKeptDiceChangesFromString$6;

    
    Opal.const_set($nesting[0], 'ID', "SwordWorld2.5");
    Opal.const_set($nesting[0], 'NAME', "\u30BD\u30FC\u30C9\u30EF\u30FC\u30EB\u30C92.5");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u305D\u304A\u3068\u308F\u3042\u308B\u30682.5");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u81EA\u52D5\u7684\u6210\u529F\u3001\u6210\u529F\u3001\u5931\u6557\u3001\u81EA\u52D5\u7684\u5931\u6557\u306E\u81EA\u52D5\u5224\u5B9A\u3092\u884C\u3044\u307E\u3059\u3002\n" + "\n" + "\u30FB\u30EC\u30FC\u30C6\u30A3\u30F3\u30B0\u8868\u3000(Kx)\n" + "\u3000\"K\u30AD\u30FC\u30CA\u30F3\u30D0\u30FC+\u30DC\u30FC\u30CA\u30B9\"\u306E\u5F62\u3067\u8A18\u5165\u3057\u307E\u3059\u3002\n" + "\u3000\u30DC\u30FC\u30CA\u30B9\u306E\u90E8\u5206\u306B\u300CK20+K30\u300D\u306E\u3088\u3046\u306B\u30EC\u30FC\u30C6\u30A3\u30F3\u30B0\u3092\u53D6\u308B\u3053\u3068\u306F\u51FA\u6765\u307E\u305B\u3093\u3002\n" + "\u3000\u307E\u305F\u3001\u30DC\u30FC\u30CA\u30B9\u306F\u8907\u6570\u53D6\u308B\u3053\u3068\u304C\u51FA\u6765\u307E\u3059\u3002\n" + "\u3000\u30EC\u30FC\u30C6\u30A3\u30F3\u30B0\u8868\u3082\u30C0\u30A4\u30B9\u30ED\u30FC\u30EB\u3068\u540C\u69D8\u306B\u3001\u4ED6\u306E\u30D7\u30EC\u30A4\u30E4\u30FC\u306B\u96A0\u308C\u3066\u30ED\u30FC\u30EB\u3059\u308B\u3053\u3068\u3082\u53EF\u80FD\u3067\u3059\u3002\n" + "\u3000\u4F8B\uFF09K20\u3000\u3000\u3000K10+5\u3000\u3000\u3000k30\u3000\u3000\u3000k10+10\u3000\u3000\u3000Sk10-1\u3000\u3000\u3000k10+5+2\n" + "\n" + "\u30FB\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u306E\u8A2D\u5B9A\n" + "\u3000\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u306F\"[\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024]\"\u3067\u6307\u5B9A\u3057\u307E\u3059\u3002\n" + "\u3000\u6307\u5B9A\u3057\u306A\u3044\u5834\u5408\u306F\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u502410\u3068\u3057\u307E\u3059\u3002\n" + "\u3000\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u51E6\u7406\u304C\u5FC5\u8981\u306A\u3044\u3068\u304D\u306F13\u306A\u3069\u3068\u3057\u3066\u304F\u3060\u3055\u3044\u3002(\u9632\u5FA1\u6642\u306A\u3069\u306E\u5BFE\u5FDC)\n" + "\u3000\u307E\u305F\u30BF\u30A4\u30D7\u306E\u8EFD\u6E1B\u5316\u306E\u305F\u3081\u306B\u672B\u5C3E\u306B\u300C@\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u300D\u3067\u3082\u51E6\u7406\u3059\u308B\u3088\u3046\u306B\u3057\u307E\u3057\u305F\u3002\n" + "\u3000\u4F8B\uFF09K20[10]\u3000\u3000\u3000K10+5[9]\u3000\u3000\u3000k30[10]\u3000\u3000\u3000k10[9]+10\u3000\u3000\u3000k10-5@9\n" + "\n" + "\u30FB\u30EC\u30FC\u30C6\u30A3\u30F3\u30B0\u8868\u306E\u534A\u6E1B (HKx)\n" + "\u3000\u30EC\u30FC\u30C6\u30A3\u30F3\u30B0\u8868\u306E\u5148\u982D\u307E\u305F\u306F\u672B\u5C3E\u306B\"H\"\u3092\u3064\u3051\u308B\u3068\u3001\u30EC\u30FC\u30C6\u30A3\u30F3\u30B0\u8868\u3092\u632F\u3063\u3066\u6700\u7D42\u7D50\u679C\u3092\u534A\u6E1B\u3055\u305B\u307E\u3059\u3002\n" + "\u3000\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u3092\u6307\u5B9A\u3057\u306A\u3044\u5834\u5408\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u306A\u3057\u3068\u6271\u308F\u308C\u307E\u3059\u3002\n" + "\u3000\u4F8B\uFF09HK20\u3000\u3000K20h\u3000\u3000HK10-5@9\u3000\u3000K10-5@9H\u3000\u3000K20gfH\n" + "\n" + "\u30FB\u30C0\u30A4\u30B9\u76EE\u306E\u4FEE\u6B63\uFF08\u904B\u547D\u5909\u8EE2\u3084\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u30EC\u30A4\u7528\uFF09\n" + "\u3000\u672B\u5C3E\u306B\u300C$\u4FEE\u6B63\u5024\u300D\u3067\u30C0\u30A4\u30B9\u76EE\u306B\u4FEE\u6B63\u304C\u304B\u304B\u308A\u307E\u3059\u3002\n" + "\u3000$\uFF0B\uFF11\u3068\u4FEE\u6B63\u8868\u8A18\u306A\u3089\u30C0\u30A4\u30B9\u76EE\u306B\uFF0B\u4FEE\u6B63\u3001\uFF04\uFF19\u306E\u3088\u3046\u306B\u56FA\u5B9A\u5024\u306A\u3089\u30C0\u30A4\u30B9\u76EE\u3092\u305D\u306E\u51FA\u76EE\u306B\u5DEE\u3057\u66FF\u3048\u3002\n" + "\u3000\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u3057\u305F\u5834\u5408\u3067\u3082\u56FA\u5B9A\u5024\u3084\u4FEE\u6B63\u5024\u306E\u9069\u7528\u306F\u6700\u521D\u306E\u4E00\u56DE\u3060\u3051\u3067\u3059\u3002\n" + "\u3000\u4F8B\uFF09K20$+1\u3000\u3000\u3000K10+5$9\u3000\u3000\u3000k10-5@9$+2\u3000\u3000\u3000k10[9]+10$9\n" + "\n" + "\u30FB\u30C0\u30A4\u30B9\u76EE\u306E\u4FEE\u6B63\uFF08\u5FC5\u6BBA\u653B\u6483\u7528\uFF09\n" + "\u3000\u300C\uFF03\u4FEE\u6B63\u5024\u300D\u3067\u30C0\u30A4\u30B9\u76EE\u306B\u4FEE\u6B63\u304C\u304B\u304B\u308A\u307E\u3059\u3002\n" + "\u3000\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u3057\u305F\u5834\u5408\u3067\u3082\u4FEE\u6B63\u5024\u306E\u9069\u7528\u306F\u7D99\u7D9A\u3055\u308C\u307E\u3059\u3002\n" + "\u3000\u4F8B\uFF09K20#1\u3000\u3000\u3000k10-5@9#2\n" + "\n" + "\u30FB\u9996\u5207\u308A\u5200\u7528\u30EC\u30FC\u30C6\u30A3\u30F3\u30B0\u4E0A\u6607 r10\n" + "\u3000\u4F8B\uFF09K20r10\u3000K30+24@8R10\u3000K40+24@8$12r10\n" + "\n" + "\u30FB\u30B0\u30EC\u30A4\u30C6\u30B9\u30C8\u30D5\u30A9\u30FC\u30C1\u30E5\u30F3\u306F\u672B\u5C3E\u306B gf\n" + "\u3000\u4F8B\uFF09K20gf\u3000K30+24@8GF\u3000K40+24@8$12r10gf\n" + "\n" + "\u30FB\u8D85\u8D8A\u5224\u5B9A\u7528\u306B2d6\u30ED\u30FC\u30EB\u306B 2D6@10 \u66F8\u5F0F\u3067\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u4ED8\u4E0E\u304C\u53EF\u80FD\u306B\u3002\n" + "\u3000\u4F8B\uFF092D6@10\u30002D6@10+11>=30\n" + "\n" + "\u30FB\u6210\u9577\u3000(Gr)\n" + "\u3000\u672B\u5C3E\u306B\u6570\u5B57\u3092\u4ED8\u52A0\u3059\u308B\u3053\u3068\u3067\u3001\u8907\u6570\u56DE\u306E\u6210\u9577\u3092\u307E\u3068\u3081\u3066\u884C\u3048\u307E\u3059\u3002\n" + "\u3000\u4F8B\uFF09Gr3\n" + "\n" + "\u30FB\u9632\u5FA1\u30D5\u30A1\u30F3\u30D6\u30EB\u8868\u3000(FT)\n" + "\u3000\u9632\u5FA1\u30D5\u30A1\u30F3\u30D6\u30EB\u8868\u3092\u51FA\u3059\u3053\u3068\u304C\u3067\u304D\u307E\u3059\u3002\n" + "\n" + "\u30FB\u7D61\u307F\u52B9\u679C\u8868\u3000(TT)\n" + "\u3000\u7D61\u307F\u52B9\u679C\u8868\u3092\u51FA\u3059\u3053\u3068\u304C\u3067\u304D\u307E\u3059\u3002\n");
    self.$setPrefixes(["H?K\\d+.*", "Gr(\\d+)?", "FT", "TT"]);
    
    Opal.def(self, '$changeText', $SwordWorld2_5_changeText$1 = function $$changeText(string) {
      var $$2, $iter = $SwordWorld2_5_changeText$1.$$p, $yield = $iter || nil, self = this;

      if ($iter) $SwordWorld2_5_changeText$1.$$p = null;
      
      if ($truthy($$($nesting, 'RATING_TABLE_RE_FOR_CHANGE_TEXT').$match(string))) {
      } else {
        return string
      };
      return $send($send(self, Opal.find_super_dispatcher(self, 'changeText', $SwordWorld2_5_changeText$1, false), [string], null), 'gsub', [/#([-+]?\d+)/], ($$2 = function(){var self = $$2.$$s || this, modifier = nil;

      
        modifier = $$($nesting, 'Regexp').$last_match(1).$to_i();
        return "" + "a[" + (self.$format_modifier(modifier)) + "]";}, $$2.$$s = self, $$2.$$arity = 0, $$2));
    }, $SwordWorld2_5_changeText$1.$$arity = 1);
    
    Opal.def(self, '$getRatingCommandStrings', $SwordWorld2_5_getRatingCommandStrings$3 = function $$getRatingCommandStrings() {
      var $iter = $SwordWorld2_5_getRatingCommandStrings$3.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $SwordWorld2_5_getRatingCommandStrings$3.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      return $rb_plus($send(self, Opal.find_super_dispatcher(self, 'getRatingCommandStrings', $SwordWorld2_5_getRatingCommandStrings$3, false), $zuper, $iter), "aA")
    }, $SwordWorld2_5_getRatingCommandStrings$3.$$arity = 0);
    
    Opal.def(self, '$getAdditionalString', $SwordWorld2_5_getAdditionalString$4 = function $$getAdditionalString(string, output) {
      var $a, $b, $iter = $SwordWorld2_5_getAdditionalString$4.$$p, $yield = $iter || nil, self = this, values = nil, keptDiceChangeModify = nil, $writer = nil;

      if ($iter) $SwordWorld2_5_getAdditionalString$4.$$p = null;
      
      $b = $send(self, Opal.find_super_dispatcher(self, 'getAdditionalString', $SwordWorld2_5_getAdditionalString$4, false), [string, output], null), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (values = ($a[1] == null ? nil : $a[1])), $b;
      $b = self.$getKeptDiceChangesFromString(string), $a = Opal.to_ary($b), (keptDiceChangeModify = ($a[0] == null ? nil : $a[0])), (string = ($a[1] == null ? nil : $a[1])), $b;
      
      $writer = ["keptDiceChangeModify", keptDiceChangeModify];
      $send(values, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      if ($truthy(keptDiceChangeModify['$!='](0))) {
        output = $rb_plus(output, "" + "a[" + (keptDiceChangeModify) + "]")};
      return [output, values];
    }, $SwordWorld2_5_getAdditionalString$4.$$arity = 2);
    
    Opal.def(self, '$getAdditionalDiceValue', $SwordWorld2_5_getAdditionalDiceValue$5 = function $$getAdditionalDiceValue(dice, values) {
      var $a, self = this, keptDiceChangeModify = nil, value = nil;

      
      keptDiceChangeModify = values['$[]']("keptDiceChangeModify").$to_i();
      value = 0;
      if ($truthy(($truthy($a = keptDiceChangeModify['$!='](0)) ? dice['$!='](2) : $a))) {
        value = $rb_plus(value, keptDiceChangeModify.$to_i())};
      return value;
    }, $SwordWorld2_5_getAdditionalDiceValue$5.$$arity = 2);
    return (Opal.def(self, '$getKeptDiceChangesFromString', $SwordWorld2_5_getKeptDiceChangesFromString$6 = function $$getKeptDiceChangesFromString(string) {
      var self = this, keptDiceChangeModify = nil, regexp = nil;

      
      keptDiceChangeModify = 0;
      regexp = /a\[([\+\-]\d+)\]/i;
      if ($truthy(regexp['$=~'](string))) {
        
        keptDiceChangeModify = $$($nesting, 'Regexp').$last_match(1);
        string = string.$gsub(regexp, "");};
      return [keptDiceChangeModify, string];
    }, $SwordWorld2_5_getKeptDiceChangesFromString$6.$$arity = 1), nil) && 'getKeptDiceChangesFromString';
  })($nesting[0], $$($nesting, 'SwordWorld2_0'), $nesting);
})(Opal);
