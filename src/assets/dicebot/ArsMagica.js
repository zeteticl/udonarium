/* Generated by Opal 1.0.3 */
Opal.modules["utils/normalize"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$module_function', '$===', '$==', '$to_i']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Normalize');

    var $nesting = [self].concat($parent_nesting), $Normalize_comparison_operator$1, $Normalize_target_number$2;

    
    self.$module_function();
    
    Opal.def(self, '$comparison_operator', $Normalize_comparison_operator$1 = function $$comparison_operator(op) {
      var self = this, $case = nil;

      return (function() {$case = op;
      if (/<=|=</['$===']($case)) {return "<="}
      else if (/>=|=>/['$===']($case)) {return ">="}
      else if (/<>|!=|=!/['$===']($case)) {return "!="}
      else if (/</['$===']($case)) {return "<"}
      else if (/>/['$===']($case)) {return ">"}
      else if (/\=/['$===']($case)) {return "=="}
      else { return nil }})()
    }, $Normalize_comparison_operator$1.$$arity = 1);
    
    Opal.def(self, '$target_number', $Normalize_target_number$2 = function $$target_number(val) {
      var self = this;

      if (val['$==']("?")) {
        return val
      } else {
        return val.$to_i()
      }
    }, $Normalize_target_number$2.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$setPrefixes', '$=~', '$gsub', '$last_match', '$arsmagica_stress', '$match', '$[]', '$to_i', '$comparison_operator', '$empty?', '$parren_killer', '$rand', '$==', '$times', '$+', '$push', '$!=', '$sortType', '$sort', '$join', '$>', '$<', '$*', '$sub', '$to_s', '$sendMode', '$>=']);
  
  self.$require("utils/normalize");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ArsMagica');

    var $nesting = [self].concat($parent_nesting), $ArsMagica_initialize$1, $ArsMagica_changeText$2, $ArsMagica_dice_command_xRn$7, $ArsMagica_arsmagica_stress$8;

    
    Opal.const_set($nesting[0], 'ID', "ArsMagica");
    Opal.const_set($nesting[0], 'NAME', "\u30A2\u30EB\u30B9\u30DE\u30AE\u30AB");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u3042\u308B\u3059\u307E\u304D\u304B");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u30FB\u30B9\u30C8\u30EC\u30B9\u30C0\u30A4\u30B9\u3000(ArSx+y)\n" + "\u3000\"ArS(\u30DC\u30C3\u30C1\u30C0\u30A4\u30B9)+(\u4FEE\u6B63)\"\u3067\u3059\u3002\u5224\u5B9A\u306B\u3082\u4F7F\u3048\u307E\u3059\u3002R\u30B3\u30DE\u30F3\u30C9(1R10+y[m])\u306B\u8AAD\u66FF\u3092\u3057\u307E\u3059\u3002\n" + "\u3000\u30DC\u30C3\u30C1\u30C0\u30A4\u30B9\u3068\u4FEE\u6B63\u306F\u7701\u7565\u53EF\u80FD\u3067\u3059\u3002(\u30DC\u30C3\u30C1\u30C0\u30A4\u30B9\u3092\u7701\u7565\u3059\u308B\u30681\u3068\u3057\u3066\u6271\u3044\u307E\u3059)\n" + "\u3000botch\u30C0\u30A4\u30B9\u306E0\u306E\u6570\u304C2\u4EE5\u4E0A\u306E\u6642\u306F\u3001\u6570\u3048\u3066\u8868\u793A\u3057\u307E\u3059\u3002\n" + "\u3000\uFF08\u6CE8\u610F\uFF01\uFF09 botch\u306E\u5224\u65AD\u304C\u767A\u751F\u3057\u305F\u3068\u304D\u306B\u306F\u3001\u305D\u306E\u30C0\u30A4\u30B9\u3092\u542B\u3081\u3066\u30ED\u30FC\u30EB\u3057\u305F\u5168\u3066\u306E\u30C0\u30A4\u30B9\u3092[]\u306E\u4E2D\u306B\u4E26\u3079\u3066\u8868\u793A\u3057\u307E\u3059\u3002\n" + "\u3000\u4F8B) (1R10[5]) \uFF1E 0[0,1,8,0,8,1] \uFF1E Botch!\n" + "\u3000\u3000\u6700\u521D\u306E0\u304C\u5224\u65AD\u57FA\u6E96\u3067\u3001\u305D\u306E\u53F3\u50745\u3064\u304C\u30DC\u30C3\u30C1\u30C0\u30A4\u30B9\u3067\u3059\u30021*2,8*2,0*1\u306A\u306E\u30671botch\u3068\u3044\u3046\u8A33\u3067\u3059\u3002\n");
    self.$setPrefixes(["ArS"]);
    
    Opal.def(self, '$initialize', $ArsMagica_initialize$1 = function $$initialize() {
      var $iter = $ArsMagica_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $ArsMagica_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $ArsMagica_initialize$1, false), $zuper, $iter);
      return (self.sendMode = 2);
    }, $ArsMagica_initialize$1.$$arity = 0);
    
<<<<<<< HEAD
    Opal.defn(self, '$gameName', TMP_ArsMagica_gameName_2 = function $$gameName() {
      var self = this;

      return "アルスマギカ"
    }, TMP_ArsMagica_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_ArsMagica_gameType_3 = function $$gameType() {
      var self = this;

      return "ArsMagica"
    }, TMP_ArsMagica_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_ArsMagica_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "・ストレス骰子　(ArSx+y)\n" + "　\"ArS(ボッチ骰子)+(修正)\"です。判定にも使えます。Rコマンド(1R10+y[m])に読替をします。\n" + "　ボッチ骰子と修正は省略可能です。(ボッチ骰子を省略すると1として扱います)\n" + "　botch骰子の0の数が2以上の時は、数えて表示します。\n" + "　（注意！） botchの判断が発生したときには、その骰子を含めてロールした全ての骰子を[]の中に並べて表示します。\n" + "　例) (1R10[5]) ＞ 0[0,1,8,0,8,1] ＞ Botch!\n" + "　　最初の0が判断基準で、その右側5つがボッチ骰子です。1*2,8*2,0*1なので1botchという訳です。\n"
    }, TMP_ArsMagica_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$changeText', TMP_ArsMagica_changeText_9 = function $$changeText(string) {
      var TMP_5, TMP_6, TMP_7, TMP_8, self = this;
=======
    Opal.def(self, '$changeText', $ArsMagica_changeText$2 = function $$changeText(string) {
      var $$3, $$4, $$5, $$6, self = this;
>>>>>>> 0dfe93a1d368ac1ad3ef24167156b31a70848848

      
      if ($truthy(/ArS/i['$=~'](string))) {
      } else {
        return string
      };
      string = $send(string, 'gsub', [/ArS(\d+)([^\d\s][\+\-\d]+)/i], ($$3 = function(){var self = $$3.$$s || this;

      return "" + "1R10" + ($$($nesting, 'Regexp').$last_match(2)) + "[" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$3.$$s = self, $$3.$$arity = 0, $$3));
      string = $send(string, 'gsub', [/ArS([^\d\s][\+\-\d]+)/i], ($$4 = function(){var self = $$4.$$s || this;

      return "" + "1R10" + ($$($nesting, 'Regexp').$last_match(1))}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      string = $send(string, 'gsub', [/ArS(\d+)/i], ($$5 = function(){var self = $$5.$$s || this;

      return "" + "1R10[" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$5.$$s = self, $$5.$$arity = 0, $$5));
      string = $send(string, 'gsub', [/ArS/i], ($$6 = function(){var self = $$6.$$s || this;

      return "1R10"}, $$6.$$s = self, $$6.$$arity = 0, $$6));
      return string;
    }, $ArsMagica_changeText$2.$$arity = 1);
    
    Opal.def(self, '$dice_command_xRn', $ArsMagica_dice_command_xRn$7 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      return self.$arsmagica_stress(string, nick_e)
    }, $ArsMagica_dice_command_xRn$7.$$arity = 2);
    return (Opal.def(self, '$arsmagica_stress', $ArsMagica_arsmagica_stress$8 = function $$arsmagica_stress(string, _nick_e) {
      var $$9, $a, self = this, m = nil, diff = nil, botch = nil, bonus = nil, crit_mul = nil, total = nil, cmp_op = nil, bonusText = nil, die = nil, output = nil, count0 = nil, dice_n = nil, crit_dice = nil;

      
      if ($truthy((m = /(^|\s)S?(1[rR]10([\+\-\d]*)(\[(\d+)\])?(([>=]+)(\d+))?)(\s|$)/i.$match(string)))) {
      } else {
        return "1"
      };
      diff = 0;
      botch = 1;
      bonus = 0;
      crit_mul = 1;
      total = 0;
      cmp_op = nil;
      bonusText = m['$[]'](3);
      if ($truthy(m['$[]'](4))) {
        botch = m['$[]'](5).$to_i()};
      if ($truthy(m['$[]'](6))) {
        
        cmp_op = $$($nesting, 'Normalize').$comparison_operator(m['$[]'](7));
        diff = m['$[]'](8).$to_i();};
      if ($truthy(bonusText['$empty?']())) {
      } else {
        bonus = self.$parren_killer("" + "(0" + (bonusText) + ")").$to_i()
      };
      die = self.$rand(10);
      output = "" + "(" + (m['$[]'](2)) + ") \uFF1E ";
      if (die['$=='](0)) {
        
        count0 = 0;
        dice_n = [];
        $send(botch, 'times', [], ($$9 = function(_i){var self = $$9.$$s || this, botch_die = nil;

        
          
          if (_i == null) {
            _i = nil;
          };
          botch_die = self.$rand(10);
          if (botch_die['$=='](0)) {
            count0 = $rb_plus(count0, 1)};
          return dice_n.$push(botch_die);}, $$9.$$s = self, $$9.$$arity = 1, $$9));
        if ($truthy(self.$sortType()['$!='](0))) {
          dice_n = dice_n.$sort()};
        output = $rb_plus(output, "" + "0[" + (die) + "," + (dice_n.$join(",")) + "]");
        if ($truthy(count0['$!='](0))) {
          
          bonus = 0;
          if ($truthy($rb_gt(count0, 1))) {
            output = $rb_plus(output, "" + " \uFF1E " + (count0) + "Botch!")
          } else {
            output = $rb_plus(output, " \uFF1E Botch!")
          };
          cmp_op = nil;
        } else {
          
          if ($truthy($rb_gt(bonus, 0))) {
            output = $rb_plus(output, "" + "+" + (bonus) + " \uFF1E " + (bonus))
          } else if ($truthy($rb_lt(bonus, 0))) {
            output = $rb_plus(output, "" + (bonus) + " \uFF1E " + (bonus))
          } else {
            output = $rb_plus(output, " \uFF1E 0")
          };
          total = bonus;
        };
      } else if (die['$=='](1)) {
        
        crit_dice = "";
        while (die['$=='](1)) {
          
          crit_mul = $rb_times(crit_mul, 2);
          die = $rb_plus(self.$rand(10), 1);
          crit_dice = $rb_plus(crit_dice, "" + (die) + ",");
        };
        total = $rb_times(die, crit_mul);
        crit_dice = crit_dice.$sub(/,$/, "");
        output = $rb_plus(output, total.$to_s());
        if ($truthy(self.$sendMode()['$!='](0))) {
          output = $rb_plus(output, "" + "[1," + (crit_dice) + "]")};
        total = $rb_plus(total, bonus);
        if ($truthy($rb_gt(bonus, 0))) {
          output = $rb_plus(output, "" + "+" + (bonus) + " \uFF1E " + (total))
        } else if ($truthy($rb_lt(bonus, 0))) {
          output = $rb_plus(output, "" + (bonus) + " \uFF1E " + (total))};
      } else {
        
        total = $rb_plus(die, bonus);
        if ($truthy($rb_gt(bonus, 0))) {
          output = $rb_plus(output, "" + (die) + "+" + (bonus) + " \uFF1E " + (total))
        } else if ($truthy($rb_lt(bonus, 0))) {
          output = $rb_plus(output, "" + (die) + (bonus) + " \uFF1E " + (total))
        } else {
          output = $rb_plus(output, total.$to_s())
        };
      };
      if (cmp_op['$=='](">=")) {
        output = $rb_plus(output, (function() {if ($truthy($rb_ge(total, diff))) {
          return " \uFF1E \u6210\u529F"
        } else {
          return " \uFF1E \u5931\u6557"
        }; return nil; })())};
      return "" + ": " + (output);
    }, $ArsMagica_arsmagica_stress$8.$$arity = 2), nil) && 'arsmagica_stress';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting);
})(Opal);
