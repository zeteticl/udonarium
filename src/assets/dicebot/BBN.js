/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$setPrefixes', '$freeze', '$parse', '$roll', '$sort', '$map', '$split', '$to_proc', '$+', '$critical?', '$push', '$additional_roll', '$count', '$fumble?', '$>=', '$join', '$private', '$match', '$to_i', '$[]', '$critical_base', '$===', '$ceil', '$/', '$to_f', '$>', '$<']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'BBN');

    var $nesting = [self].concat($parent_nesting), $BBN_rollDiceCommand$1, $BBN_parse$2, $BBN_critical_base$3, $BBN_critical$ques$4, $BBN_fumble$ques$5, $BBN_additional_roll$6;

    self.$$prototype.roll_times = self.$$prototype.modify = self.$$prototype.modify_str = self.$$prototype.difficulty = self.$$prototype.critical = self.$$prototype.fumble = nil;
    
    self.$setPrefixes(["\\d+BN.*"]);
    Opal.const_set($nesting[0], 'ID', "BBN".$freeze());
    Opal.const_set($nesting[0], 'NAME', "BBNTRPG".$freeze());
    Opal.const_set($nesting[0], 'SORT_KEY', "\u3072\u3044\u3072\u3044\u3048\u306CTRPG".$freeze());
    Opal.const_set($nesting[0], 'HELP_MESSAGE', ((((((((((("" + "\u30FB\u5224\u5B9A(xBN\u00B1y>=z[c,f])\n") + "\u3000xD6\u306E\u5224\u5B9A\u3002\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u3001\u30D5\u30A1\u30F3\u30D6\u30EB\u306E\u81EA\u52D5\u5224\u5B9A\u3092\u884C\u3044\u307E\u3059\u3002\n") + "\u30001D\u306E\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u3068\u30D5\u30A1\u30F3\u30D6\u30EB\u5024\u306F1\u30022D\u306E\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u3068\u30D5\u30A1\u30F3\u30D6\u30EB\u5024\u306F2\u3002\n") + "\u3000nD\u306E\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u5024\u3068\u30D5\u30A1\u30F3\u30D6\u30EB\u5024\u306F n/2 \u306E\u5207\u308A\u4E0A\u3052\u3002\n") + "\u3000\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u3068\u30D5\u30A1\u30F3\u30D6\u30EB\u304C\u540C\u6642\u306B\u767A\u751F\u3057\u305F\u5834\u5408\u3001\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u3092\u512A\u5148\u3002\n") + "\u3000x\uFF1Ax\u306B\u632F\u308B\u30C0\u30A4\u30B9\u6570\u3092\u5165\u529B\u3002\n") + "\u3000y\uFF1Ay\u306B\u4FEE\u6B63\u5024\u3092\u5165\u529B\u3002\u7701\u7565\u53EF\u80FD\u3002\n") + "  z\uFF1Az\u306B\u76EE\u6A19\u5024\u3092\u5165\u529B\u3002\u7701\u7565\u53EF\u80FD\u3002\n") + "  c\uFF1A\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u306B\u5FC5\u8981\u306A\u30C0\u30A4\u30B9\u76EE\u300C6\u300D\u306E\u6570\u306E\u5897\u6E1B\u3002\u7701\u7565\u53EF\u80FD\u3002\n") + "  f\uFF1A\u30D5\u30A1\u30F3\u30D6\u30EB\u306B\u5FC5\u8981\u306A\u30C0\u30A4\u30B9\u76EE\u300C1\u300D\u306E\u6570\u306E\u5897\u6E1B\u3002\u7701\u7565\u53EF\u80FD\u3002\n") + "\u3000\u4F8B\uFF09 3BN+4\u30003BN>=8\u30003BN+1>=10[-1] 3BN+1>=10[,1] 3BN+1>=10[1,1]\n").$freeze());
    
    Opal.def(self, '$rollDiceCommand', $BBN_rollDiceCommand$1 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, dice = nil, dice_str = nil, dice_list = nil, total = nil, sequence = nil;

      
      if ($truthy(self.$parse(command))) {
      } else {
        return nil
      };
      $b = self.$roll(self.roll_times, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (dice_str = ($a[1] == null ? nil : $a[1])), $b;
      dice_list = $send(dice_str.$split(","), 'map', [], "to_i".$to_proc()).$sort();
      total = $rb_plus(dice, self.modify);
      sequence = ["" + "(" + (command) + ")", "" + (dice) + "[" + (dice_str) + "]" + (self.modify_str), total];
      if ($truthy(self['$critical?'](dice_list))) {
        $send(sequence, 'push', ["\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\uFF01"].concat(Opal.to_a(self.$additional_roll(dice_list.$count(6), total))))
      } else if ($truthy(self['$fumble?'](dice_list))) {
        sequence.$push("\u30D5\u30A1\u30F3\u30D6\u30EB\uFF01")
      } else if ($truthy(self.difficulty)) {
        sequence.$push((function() {if ($truthy($rb_ge(total, self.difficulty))) {
          return "\u6210\u529F"
        } else {
          return "\u5931\u6557"
        }; return nil; })())};
      return sequence.$join(" \uFF1E ");
    }, $BBN_rollDiceCommand$1.$$arity = 1);
    self.$private();
    
    Opal.def(self, '$parse', $BBN_parse$2 = function $$parse(command) {
      var $a, self = this, m = nil, base = nil;

      
      m = /^(\d+)BN([+-]\d+)?(>=(([+-]?\d+)))?(\[([+-]?\d+)?(,([+-]?\d+))?\])?/.$match(command);
      if ($truthy(m)) {
      } else {
        return false
      };
      self.roll_times = m['$[]'](1).$to_i();
      self.modify_str = ($truthy($a = m['$[]'](2)) ? $a : "");
      self.modify = m['$[]'](2).$to_i();
      self.difficulty = (function() {if ($truthy(m['$[]'](4))) {
        return m['$[]'](4).$to_i()
      } else {
        return nil
      }; return nil; })();
      base = self.$critical_base(self.roll_times);
      self.critical = $rb_plus(base, m['$[]'](7).$to_i());
      self.fumble = $rb_plus(base, m['$[]'](9).$to_i());
      return true;
    }, $BBN_parse$2.$$arity = 1);
    
    Opal.def(self, '$critical_base', $BBN_critical_base$3 = function $$critical_base(roll_times) {
      var self = this, $case = nil;

      return (function() {$case = roll_times;
      if ((1)['$===']($case) || (2)['$===']($case)) {return roll_times}
      else {return $rb_divide(roll_times.$to_f(), 2).$ceil()}})()
    }, $BBN_critical_base$3.$$arity = 1);
    
    Opal.def(self, '$critical?', $BBN_critical$ques$4 = function(dice_list) {
      var self = this;

      return $rb_ge(dice_list.$count(6), self.critical)
    }, $BBN_critical$ques$4.$$arity = 1);
    
    Opal.def(self, '$fumble?', $BBN_fumble$ques$5 = function(dice_list) {
      var self = this;

      return $rb_ge(dice_list.$count(1), self.fumble)
    }, $BBN_fumble$ques$5.$$arity = 1);
    return (Opal.def(self, '$additional_roll', $BBN_additional_roll$6 = function $$additional_roll(additional_dice, total) {
      var $a, $b, $c, self = this, sequence = nil, reroll_count = nil, dice_total = nil, dice_str = nil;

      
      sequence = [];
      reroll_count = 0;
      while ($truthy(($truthy($b = $rb_gt(additional_dice, 0)) ? $rb_lt(reroll_count, 10) : $b))) {
        
        reroll_count = $rb_plus(reroll_count, 1);
        $c = self.$roll(additional_dice, 6), $b = Opal.to_ary($c), (dice_total = ($b[0] == null ? nil : $b[0])), (dice_str = ($b[1] == null ? nil : $b[1])), $c;
        additional_dice = $send(dice_str.$split(","), 'map', [], "to_i".$to_proc()).$count(6);
        sequence.$push("" + (total) + "+" + (dice_total) + "[" + (dice_str) + "]");
        if ($truthy($rb_gt(additional_dice, 0))) {
          sequence.$push("\u8FFD\u52A0\u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\uFF01")};
        total = $rb_plus(total, dice_total);
      };
      if ($truthy($rb_gt(additional_dice, 0))) {
        sequence.$push("\u7121\u9650\u30EB\u30FC\u30D7\u9632\u6B62\u306E\u305F\u3081\u4E2D\u65AD")};
      sequence.$push(total);
      if ($truthy(self.difficulty)) {
        sequence.$push((function() {if ($truthy($rb_ge(total, self.difficulty))) {
          return "\u6210\u529F"
        } else {
          return "\u5931\u6557"
        }; return nil; })())};
      return sequence;
    }, $BBN_additional_roll$6.$$arity = 2), nil) && 'additional_roll';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
