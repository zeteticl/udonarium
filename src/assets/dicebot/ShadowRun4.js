/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$debug', '$/', '$*', '$>=', '$==']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ShadowRun4');

    var $nesting = [self].concat($parent_nesting), $ShadowRun4_initialize$1, $ShadowRun4_getGrichText$2;

    
    Opal.const_set($nesting[0], 'ID', "ShadowRun4");
    Opal.const_set($nesting[0], 'NAME', "\u30B7\u30E3\u30C9\u30A6\u30E9\u30F3\u7B2C4\u7248");
    Opal.const_set($nesting[0], 'SORT_KEY', "\u3057\u3084\u3068\u3046\u3089\u30934");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\u500B\u6570\u632F\u308A\u8DB3\u3057\u30ED\u30FC\u30EB(xRn)\u306E\u5883\u754C\u5024\u30926\u306B\u30BB\u30C3\u30C8\u3001\u30D0\u30E9\u30D0\u30E9\u30ED\u30FC\u30EB(xBn)\u306E\u76EE\u6A19\u5024\u30925\u4EE5\u4E0A\u306B\u30BB\u30C3\u30C8\u3057\u307E\u3059\u3002\n" + "B\u30B3\u30DE\u30F3\u30C9\u3068R\u30B3\u30DE\u30F3\u30C9\u6642\u306B\u3001\u30B0\u30EA\u30C3\u30C1\u306E\u8868\u793A\u3092\u884C\u3044\u307E\u3059\u3002\n");
    
    Opal.def(self, '$initialize', $ShadowRun4_initialize$1 = function $$initialize() {
      var $iter = $ShadowRun4_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $ShadowRun4_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $ShadowRun4_initialize$1, false), $zuper, $iter);
      self.sortType = 3;
      self.rerollNumber = 6;
      return (self.defaultSuccessTarget = ">=5");
    }, $ShadowRun4_initialize$1.$$arity = 0);
    return (Opal.def(self, '$getGrichText', $ShadowRun4_getGrichText$2 = function $$getGrichText(numberSpot1, dice_cnt_total, successCount) {
      var self = this, dice_cnt_total_half = nil;

      
      self.$debug("getGrichText numberSpot1", numberSpot1);
      self.$debug("dice_cnt_total", dice_cnt_total);
      self.$debug("successCount", successCount);
      dice_cnt_total_half = $rb_divide($rb_times(1.0, dice_cnt_total), 2);
      self.$debug("dice_cnt_total_half", dice_cnt_total_half);
      if ($truthy($rb_ge(numberSpot1, dice_cnt_total_half))) {
      } else {
        return ""
      };
      if (successCount['$=='](0)) {
        return " \uFF1E \u30AF\u30EA\u30C6\u30A3\u30AB\u30EB\u30B0\u30EA\u30C3\u30C1"};
      return " \uFF1E \u30B0\u30EA\u30C3\u30C1";
    }, $ShadowRun4_getGrichText$2.$$arity = 3), nil) && 'getGrichText';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
